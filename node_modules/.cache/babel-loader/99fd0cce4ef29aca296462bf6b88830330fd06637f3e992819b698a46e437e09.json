{"ast":null,"code":"var _jsxFileName = \"/Users/gabortabi/DEV/learnKorean/src/context/ProgressContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { koreanAlphabet } from '../koreanAlphabetData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressContext = /*#__PURE__*/createContext();\nexport const useProgress = () => {\n  _s();\n  const context = useContext(ProgressContext);\n  if (!context) {\n    throw new Error('useProgress must be used within a ProgressProvider');\n  }\n  return context;\n};\n_s(useProgress, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ProgressProvider = ({\n  children\n}) => {\n  _s2();\n  // Initialize state from localStorage or defaults\n  const [userProgress, setUserProgress] = useState(() => {\n    const saved = localStorage.getItem('korean-alphabet-progress');\n    return saved ? JSON.parse(saved) : {\n      completedLetters: [],\n      scores: {},\n      currentLevel: 1,\n      totalScore: 0,\n      streakCount: 0,\n      lastPracticeDate: null,\n      achievements: [],\n      unlockedLetters: [1, 2, 3, 4, 5, 15, 16, 17, 18, 19],\n      // Start with first 5 consonants and 5 vowels\n      exerciseStats: {\n        totalQuestions: 0,\n        correctAnswers: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        totalScore: 0,\n        averageScore: 0,\n        studyTimeMinutes: 0,\n        longestStreak: 0\n      },\n      milestones: {\n        lettersCompleted: 0,\n        perfectScores: 0,\n        weeklyGoal: false,\n        monthlyGoal: false\n      }\n    };\n  });\n\n  // Save progress to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('korean-alphabet-progress', JSON.stringify(userProgress));\n  }, [userProgress]);\n\n  // Mark a letter as completed\n  const markLetterCompleted = letterId => {\n    setUserProgress(prev => ({\n      ...prev,\n      completedLetters: [...new Set([...prev.completedLetters, letterId])]\n    }));\n  };\n\n  // Update score for a letter\n  const updateScore = (letterId, score) => {\n    setUserProgress(prev => {\n      const newScores = {\n        ...prev.scores,\n        [letterId]: Math.max(prev.scores[letterId] || 0, score)\n      };\n\n      // Mark letter as completed if score is high enough (>= 80%)\n      const shouldMarkCompleted = score >= 80 && !prev.completedLetters.includes(letterId);\n      const newCompletedLetters = shouldMarkCompleted ? [...new Set([...prev.completedLetters, letterId])] : prev.completedLetters;\n\n      // Update exercise statistics\n      const newStats = {\n        ...prev.exerciseStats,\n        totalQuestions: prev.exerciseStats.totalQuestions + 1,\n        correctAnswers: score >= 70 ? prev.exerciseStats.correctAnswers + 1 : prev.exerciseStats.correctAnswers,\n        totalScore: prev.exerciseStats.totalScore + score,\n        averageScore: Math.round((prev.exerciseStats.totalScore + score) / (prev.exerciseStats.totalQuestions + 1))\n      };\n\n      // Check if we should unlock new letters based on performance\n      const unlockedLetters = checkForUnlocks(newScores, prev.unlockedLetters);\n\n      // Check for new achievements\n      const currentProgress = {\n        ...prev,\n        scores: newScores,\n        completedLetters: newCompletedLetters,\n        unlockedLetters: unlockedLetters,\n        exerciseStats: newStats\n      };\n      const newAchievements = checkAchievements(currentProgress);\n      return {\n        ...prev,\n        scores: newScores,\n        completedLetters: newCompletedLetters,\n        totalScore: prev.totalScore + score,\n        lastPracticeDate: new Date().toISOString(),\n        unlockedLetters: unlockedLetters,\n        exerciseStats: newStats,\n        achievements: [...prev.achievements, ...newAchievements]\n      };\n    });\n  };\n\n  // Increment streak\n  const incrementStreak = () => {\n    setUserProgress(prev => ({\n      ...prev,\n      streakCount: prev.streakCount + 1\n    }));\n  };\n\n  // Reset streak\n  const resetStreak = () => {\n    setUserProgress(prev => ({\n      ...prev,\n      streakCount: 0\n    }));\n  };\n\n  // Add achievement\n  const addAchievement = achievement => {\n    setUserProgress(prev => ({\n      ...prev,\n      achievements: [...new Set([...prev.achievements, achievement])]\n    }));\n  };\n\n  // Get progress percentage\n  const getProgressPercentage = () => {\n    return Math.round(userProgress.completedLetters.length / 24 * 100);\n  };\n\n  // Check if letter is completed\n  const isLetterCompleted = letterId => {\n    return userProgress.completedLetters.includes(letterId);\n  };\n\n  // Get best score for a letter\n  const getBestScore = letterId => {\n    return userProgress.scores[letterId] || 0;\n  };\n\n  // Get average score across all letters\n  const getAverageScore = () => {\n    const scores = Object.values(userProgress.scores);\n    return scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0;\n  };\n\n  // Achievement definitions\n  const ACHIEVEMENTS = {\n    firstSteps: {\n      id: 'firstSteps',\n      name: 'First Steps',\n      description: 'Complete your first Korean letter',\n      icon: '🎯',\n      requirement: progress => progress.completedLetters.length >= 1,\n      reward: 'Unlocks letter practice'\n    },\n    basicConsonants: {\n      id: 'basicConsonants',\n      name: 'Basic Consonants',\n      description: 'Complete first 5 consonants',\n      icon: '🔤',\n      requirement: progress => {\n        const firstFiveConsonants = [1, 2, 3, 4, 5];\n        return firstFiveConsonants.every(id => progress.completedLetters.includes(id));\n      },\n      reward: 'Unlocks basic vowels'\n    },\n    basicVowels: {\n      id: 'basicVowels',\n      name: 'Basic Vowels',\n      description: 'Complete first 5 vowels',\n      icon: '📝',\n      requirement: progress => {\n        const firstFiveVowels = [15, 16, 17, 18, 19];\n        return firstFiveVowels.every(id => progress.completedLetters.includes(id));\n      },\n      reward: 'Unlocks compound vowels'\n    },\n    koreanScholar: {\n      id: 'koreanScholar',\n      name: 'Korean Scholar',\n      description: 'Complete 12 letters',\n      icon: '🎓',\n      requirement: progress => progress.completedLetters.length >= 12,\n      reward: 'Unlocks advanced exercises'\n    },\n    hangulMaster: {\n      id: 'hangulMaster',\n      name: 'Hangul Master',\n      description: 'Complete all 24 letters',\n      icon: '👑',\n      requirement: progress => progress.completedLetters.length >= 24,\n      reward: 'Complete alphabet mastery'\n    },\n    perfectionist: {\n      id: 'perfectionist',\n      name: 'Perfectionist',\n      description: 'Get 100% on an exercise',\n      icon: '💎',\n      requirement: progress => Object.values(progress.scores).some(score => score >= 100),\n      reward: 'Shows exceptional understanding'\n    },\n    streakMaster: {\n      id: 'streakMaster',\n      name: 'Streak Master',\n      description: 'Achieve a 10-day streak',\n      icon: '🔥',\n      requirement: progress => progress.streakCount >= 10,\n      reward: 'Consistent dedication'\n    },\n    speedLearner: {\n      id: 'speedLearner',\n      name: 'Speed Learner',\n      description: 'Complete 10 letters in one session',\n      icon: '⚡',\n      requirement: progress => progress.milestones.lettersCompleted >= 10,\n      reward: 'Rapid progress recognition'\n    },\n    dedicated: {\n      id: 'dedicated',\n      name: 'Dedicated Student',\n      description: 'Study for 60 minutes total',\n      icon: '📚',\n      requirement: progress => progress.exerciseStats.studyTimeMinutes >= 60,\n      reward: 'Commitment to learning'\n    }\n  };\n\n  // Check and unlock achievements\n  const checkAchievements = currentProgress => {\n    const newAchievements = [];\n    const existingAchievementIds = currentProgress.achievements.map(a => a.id);\n    Object.values(ACHIEVEMENTS).forEach(achievement => {\n      if (!existingAchievementIds.includes(achievement.id) && achievement.requirement(currentProgress)) {\n        newAchievements.push({\n          ...achievement,\n          unlockedAt: new Date().toISOString()\n        });\n      }\n    });\n    return newAchievements;\n  };\n\n  // Check if letter is unlocked\n  const isLetterUnlocked = letterId => {\n    return userProgress.unlockedLetters.includes(letterId);\n  };\n\n  // Get next letters to unlock based on performance\n  const checkForUnlocks = (currentScores, currentlyUnlocked) => {\n    const unlocked = [...currentlyUnlocked];\n    const currentLevel = Math.max(...koreanAlphabet.filter(letter => currentlyUnlocked.includes(letter.id)).map(letter => letter.difficulty), 1);\n\n    // Unlock letters of next difficulty level if performance is good\n    const currentLevelLetters = koreanAlphabet.filter(letter => letter.difficulty === currentLevel && currentlyUnlocked.includes(letter.id));\n    const averageCurrentLevelScore = currentLevelLetters.length > 0 ? currentLevelLetters.reduce((sum, letter) => sum + (currentScores[letter.id] || 0), 0) / currentLevelLetters.length : 0;\n\n    // If average score for current level is > 70%, unlock next level\n    if (averageCurrentLevelScore > 70 && currentLevel < 4) {\n      const nextLevelLetters = koreanAlphabet.filter(letter => letter.difficulty === currentLevel + 1);\n      nextLevelLetters.forEach(letter => {\n        if (!unlocked.includes(letter.id)) {\n          unlocked.push(letter.id);\n        }\n      });\n    }\n    return unlocked;\n  };\n\n  // Get letters available for practice (unlocked letters)\n  const getAvailableLetters = () => {\n    return koreanAlphabet.filter(letter => isLetterUnlocked(letter.id));\n  };\n\n  // Get locked letters count\n  const getLockedLettersCount = () => {\n    return 24 - userProgress.unlockedLetters.length;\n  };\n\n  // Calculate overall progress percentage\n  const getOverallProgress = () => {\n    const unlockedCount = userProgress.unlockedLetters.length;\n    return Math.round(unlockedCount / 24 * 100);\n  };\n\n  // Get unlocked achievements\n  const getUnlockedAchievements = () => {\n    return userProgress.achievements;\n  };\n\n  // Get locked achievements\n  const getLockedAchievements = () => {\n    const unlockedIds = userProgress.achievements.map(a => a.id);\n    return Object.values(ACHIEVEMENTS).filter(achievement => !unlockedIds.includes(achievement.id));\n  };\n\n  // Get exercise statistics\n  const getExerciseStats = () => {\n    return userProgress.exerciseStats;\n  };\n\n  // Get detailed progress metrics\n  const getProgressMetrics = () => {\n    const totalLetters = 24;\n    const unlockedLetters = userProgress.unlockedLetters.length;\n    const completedLetters = userProgress.completedLetters.length;\n    const totalScore = userProgress.totalScore;\n    const averageScore = getAverageScore();\n    return {\n      totalLetters,\n      unlockedLetters,\n      completedLetters,\n      totalScore,\n      averageScore,\n      unlockProgress: Math.round(unlockedLetters / totalLetters * 100),\n      completionProgress: Math.round(completedLetters / totalLetters * 100),\n      currentLevel: Math.max(...koreanAlphabet.filter(letter => userProgress.unlockedLetters.includes(letter.id)).map(letter => letter.difficulty), 1)\n    };\n  };\n\n  // Reset all progress (for testing purposes)\n  const resetAllProgress = () => {\n    const initialProgress = {\n      completedLetters: [],\n      scores: {},\n      currentLevel: 1,\n      totalScore: 0,\n      streakCount: 0,\n      lastPracticeDate: null,\n      achievements: [],\n      unlockedLetters: [1, 2, 3, 4, 5, 15, 16, 17, 18, 19],\n      // Start with first 5 consonants and 5 vowels\n      exerciseStats: {\n        totalQuestions: 0,\n        correctAnswers: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        totalScore: 0,\n        averageScore: 0,\n        studyTimeMinutes: 0,\n        longestStreak: 0\n      },\n      milestones: {\n        lettersCompleted: 0,\n        perfectScores: 0,\n        weeklyGoal: false,\n        monthlyGoal: false\n      }\n    };\n    setUserProgress(initialProgress);\n    localStorage.setItem('korean-alphabet-progress', JSON.stringify(initialProgress));\n  };\n  const value = {\n    userProgress,\n    markLetterCompleted,\n    updateScore,\n    incrementStreak,\n    resetStreak,\n    addAchievement,\n    getProgressPercentage,\n    isLetterCompleted,\n    getBestScore,\n    getAverageScore,\n    isLetterUnlocked,\n    getAvailableLetters,\n    getLockedLettersCount,\n    getOverallProgress,\n    getUnlockedAchievements,\n    getLockedAchievements,\n    getExerciseStats,\n    getProgressMetrics,\n    resetAllProgress,\n    ACHIEVEMENTS\n  };\n  return /*#__PURE__*/_jsxDEV(ProgressContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 5\n  }, this);\n};\n_s2(ProgressProvider, \"mkXo4CF+3JTtd6ybynVHXYzH7o8=\");\n_c = ProgressProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgressProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","koreanAlphabet","jsxDEV","_jsxDEV","ProgressContext","useProgress","_s","context","Error","ProgressProvider","children","_s2","userProgress","setUserProgress","saved","localStorage","getItem","JSON","parse","completedLetters","scores","currentLevel","totalScore","streakCount","lastPracticeDate","achievements","unlockedLetters","exerciseStats","totalQuestions","correctAnswers","currentStreak","bestStreak","averageScore","studyTimeMinutes","longestStreak","milestones","lettersCompleted","perfectScores","weeklyGoal","monthlyGoal","setItem","stringify","markLetterCompleted","letterId","prev","Set","updateScore","score","newScores","Math","max","shouldMarkCompleted","includes","newCompletedLetters","newStats","round","checkForUnlocks","currentProgress","newAchievements","checkAchievements","Date","toISOString","incrementStreak","resetStreak","addAchievement","achievement","getProgressPercentage","length","isLetterCompleted","getBestScore","getAverageScore","Object","values","reduce","a","b","ACHIEVEMENTS","firstSteps","id","name","description","icon","requirement","progress","reward","basicConsonants","firstFiveConsonants","every","basicVowels","firstFiveVowels","koreanScholar","hangulMaster","perfectionist","some","streakMaster","speedLearner","dedicated","existingAchievementIds","map","forEach","push","unlockedAt","isLetterUnlocked","currentScores","currentlyUnlocked","unlocked","filter","letter","difficulty","currentLevelLetters","averageCurrentLevelScore","sum","nextLevelLetters","getAvailableLetters","getLockedLettersCount","getOverallProgress","unlockedCount","getUnlockedAchievements","getLockedAchievements","unlockedIds","getExerciseStats","getProgressMetrics","totalLetters","unlockProgress","completionProgress","resetAllProgress","initialProgress","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gabortabi/DEV/learnKorean/src/context/ProgressContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { koreanAlphabet } from '../koreanAlphabetData';\n\nconst ProgressContext = createContext();\n\nexport const useProgress = () => {\n  const context = useContext(ProgressContext);\n  if (!context) {\n    throw new Error('useProgress must be used within a ProgressProvider');\n  }\n  return context;\n};\n\nexport const ProgressProvider = ({ children }) => {\n  // Initialize state from localStorage or defaults\n  const [userProgress, setUserProgress] = useState(() => {\n    const saved = localStorage.getItem('korean-alphabet-progress');\n    return saved ? JSON.parse(saved) : {\n      completedLetters: [],\n      scores: {},\n      currentLevel: 1,\n      totalScore: 0,\n      streakCount: 0,\n      lastPracticeDate: null,\n      achievements: [],\n      unlockedLetters: [1, 2, 3, 4, 5, 15, 16, 17, 18, 19], // Start with first 5 consonants and 5 vowels\n      exerciseStats: {\n        totalQuestions: 0,\n        correctAnswers: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        totalScore: 0,\n        averageScore: 0,\n        studyTimeMinutes: 0,\n        longestStreak: 0\n      },\n      milestones: {\n        lettersCompleted: 0,\n        perfectScores: 0,\n        weeklyGoal: false,\n        monthlyGoal: false\n      }\n    };\n  });\n\n  // Save progress to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('korean-alphabet-progress', JSON.stringify(userProgress));\n  }, [userProgress]);\n\n  // Mark a letter as completed\n  const markLetterCompleted = (letterId) => {\n    setUserProgress(prev => ({\n      ...prev,\n      completedLetters: [...new Set([...prev.completedLetters, letterId])]\n    }));\n  };\n\n  // Update score for a letter\n  const updateScore = (letterId, score) => {\n    setUserProgress(prev => {\n      const newScores = {\n        ...prev.scores,\n        [letterId]: Math.max(prev.scores[letterId] || 0, score)\n      };\n\n      // Mark letter as completed if score is high enough (>= 80%)\n      const shouldMarkCompleted = score >= 80 && !prev.completedLetters.includes(letterId);\n      const newCompletedLetters = shouldMarkCompleted\n        ? [...new Set([...prev.completedLetters, letterId])]\n        : prev.completedLetters;\n\n      // Update exercise statistics\n      const newStats = {\n        ...prev.exerciseStats,\n        totalQuestions: prev.exerciseStats.totalQuestions + 1,\n        correctAnswers: score >= 70 ? prev.exerciseStats.correctAnswers + 1 : prev.exerciseStats.correctAnswers,\n        totalScore: prev.exerciseStats.totalScore + score,\n        averageScore: Math.round((prev.exerciseStats.totalScore + score) / (prev.exerciseStats.totalQuestions + 1))\n      };\n\n      // Check if we should unlock new letters based on performance\n      const unlockedLetters = checkForUnlocks(newScores, prev.unlockedLetters);\n\n      // Check for new achievements\n      const currentProgress = {\n        ...prev,\n        scores: newScores,\n        completedLetters: newCompletedLetters,\n        unlockedLetters: unlockedLetters,\n        exerciseStats: newStats\n      };\n      const newAchievements = checkAchievements(currentProgress);\n\n      return {\n        ...prev,\n        scores: newScores,\n        completedLetters: newCompletedLetters,\n        totalScore: prev.totalScore + score,\n        lastPracticeDate: new Date().toISOString(),\n        unlockedLetters: unlockedLetters,\n        exerciseStats: newStats,\n        achievements: [...prev.achievements, ...newAchievements]\n      };\n    });\n  };\n\n  // Increment streak\n  const incrementStreak = () => {\n    setUserProgress(prev => ({\n      ...prev,\n      streakCount: prev.streakCount + 1\n    }));\n  };\n\n  // Reset streak\n  const resetStreak = () => {\n    setUserProgress(prev => ({\n      ...prev,\n      streakCount: 0\n    }));\n  };\n\n  // Add achievement\n  const addAchievement = (achievement) => {\n    setUserProgress(prev => ({\n      ...prev,\n      achievements: [...new Set([...prev.achievements, achievement])]\n    }));\n  };\n\n  // Get progress percentage\n  const getProgressPercentage = () => {\n    return Math.round((userProgress.completedLetters.length / 24) * 100);\n  };\n\n  // Check if letter is completed\n  const isLetterCompleted = (letterId) => {\n    return userProgress.completedLetters.includes(letterId);\n  };\n\n  // Get best score for a letter\n  const getBestScore = (letterId) => {\n    return userProgress.scores[letterId] || 0;\n  };\n\n  // Get average score across all letters\n  const getAverageScore = () => {\n    const scores = Object.values(userProgress.scores);\n    return scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0;\n  };\n\n  // Achievement definitions\n  const ACHIEVEMENTS = {\n    firstSteps: {\n      id: 'firstSteps',\n      name: 'First Steps',\n      description: 'Complete your first Korean letter',\n      icon: '🎯',\n      requirement: (progress) => progress.completedLetters.length >= 1,\n      reward: 'Unlocks letter practice'\n    },\n    basicConsonants: {\n      id: 'basicConsonants',\n      name: 'Basic Consonants',\n      description: 'Complete first 5 consonants',\n      icon: '🔤',\n      requirement: (progress) => {\n        const firstFiveConsonants = [1, 2, 3, 4, 5];\n        return firstFiveConsonants.every(id => progress.completedLetters.includes(id));\n      },\n      reward: 'Unlocks basic vowels'\n    },\n    basicVowels: {\n      id: 'basicVowels',\n      name: 'Basic Vowels',\n      description: 'Complete first 5 vowels',\n      icon: '📝',\n      requirement: (progress) => {\n        const firstFiveVowels = [15, 16, 17, 18, 19];\n        return firstFiveVowels.every(id => progress.completedLetters.includes(id));\n      },\n      reward: 'Unlocks compound vowels'\n    },\n    koreanScholar: {\n      id: 'koreanScholar',\n      name: 'Korean Scholar',\n      description: 'Complete 12 letters',\n      icon: '🎓',\n      requirement: (progress) => progress.completedLetters.length >= 12,\n      reward: 'Unlocks advanced exercises'\n    },\n    hangulMaster: {\n      id: 'hangulMaster',\n      name: 'Hangul Master',\n      description: 'Complete all 24 letters',\n      icon: '👑',\n      requirement: (progress) => progress.completedLetters.length >= 24,\n      reward: 'Complete alphabet mastery'\n    },\n    perfectionist: {\n      id: 'perfectionist',\n      name: 'Perfectionist',\n      description: 'Get 100% on an exercise',\n      icon: '💎',\n      requirement: (progress) => Object.values(progress.scores).some(score => score >= 100),\n      reward: 'Shows exceptional understanding'\n    },\n    streakMaster: {\n      id: 'streakMaster',\n      name: 'Streak Master',\n      description: 'Achieve a 10-day streak',\n      icon: '🔥',\n      requirement: (progress) => progress.streakCount >= 10,\n      reward: 'Consistent dedication'\n    },\n    speedLearner: {\n      id: 'speedLearner',\n      name: 'Speed Learner',\n      description: 'Complete 10 letters in one session',\n      icon: '⚡',\n      requirement: (progress) => progress.milestones.lettersCompleted >= 10,\n      reward: 'Rapid progress recognition'\n    },\n    dedicated: {\n      id: 'dedicated',\n      name: 'Dedicated Student',\n      description: 'Study for 60 minutes total',\n      icon: '📚',\n      requirement: (progress) => progress.exerciseStats.studyTimeMinutes >= 60,\n      reward: 'Commitment to learning'\n    }\n  };\n\n  // Check and unlock achievements\n  const checkAchievements = (currentProgress) => {\n    const newAchievements = [];\n    const existingAchievementIds = currentProgress.achievements.map(a => a.id);\n\n    Object.values(ACHIEVEMENTS).forEach(achievement => {\n      if (!existingAchievementIds.includes(achievement.id) && achievement.requirement(currentProgress)) {\n        newAchievements.push({\n          ...achievement,\n          unlockedAt: new Date().toISOString()\n        });\n      }\n    });\n\n    return newAchievements;\n  };\n\n  // Check if letter is unlocked\n  const isLetterUnlocked = (letterId) => {\n    return userProgress.unlockedLetters.includes(letterId);\n  };\n\n  // Get next letters to unlock based on performance\n  const checkForUnlocks = (currentScores, currentlyUnlocked) => {\n    const unlocked = [...currentlyUnlocked];\n    const currentLevel = Math.max(...koreanAlphabet\n      .filter(letter => currentlyUnlocked.includes(letter.id))\n      .map(letter => letter.difficulty), 1);\n\n    // Unlock letters of next difficulty level if performance is good\n    const currentLevelLetters = koreanAlphabet.filter(letter =>\n      letter.difficulty === currentLevel && currentlyUnlocked.includes(letter.id)\n    );\n\n    const averageCurrentLevelScore = currentLevelLetters.length > 0\n      ? currentLevelLetters.reduce((sum, letter) => sum + (currentScores[letter.id] || 0), 0) / currentLevelLetters.length\n      : 0;\n\n    // If average score for current level is > 70%, unlock next level\n    if (averageCurrentLevelScore > 70 && currentLevel < 4) {\n      const nextLevelLetters = koreanAlphabet.filter(letter => letter.difficulty === currentLevel + 1);\n      nextLevelLetters.forEach(letter => {\n        if (!unlocked.includes(letter.id)) {\n          unlocked.push(letter.id);\n        }\n      });\n    }\n\n    return unlocked;\n  };\n\n  // Get letters available for practice (unlocked letters)\n  const getAvailableLetters = () => {\n    return koreanAlphabet.filter(letter => isLetterUnlocked(letter.id));\n  };\n\n  // Get locked letters count\n  const getLockedLettersCount = () => {\n    return 24 - userProgress.unlockedLetters.length;\n  };\n\n  // Calculate overall progress percentage\n  const getOverallProgress = () => {\n    const unlockedCount = userProgress.unlockedLetters.length;\n    return Math.round((unlockedCount / 24) * 100);\n  };\n\n  // Get unlocked achievements\n  const getUnlockedAchievements = () => {\n    return userProgress.achievements;\n  };\n\n  // Get locked achievements\n  const getLockedAchievements = () => {\n    const unlockedIds = userProgress.achievements.map(a => a.id);\n    return Object.values(ACHIEVEMENTS).filter(achievement => !unlockedIds.includes(achievement.id));\n  };\n\n  // Get exercise statistics\n  const getExerciseStats = () => {\n    return userProgress.exerciseStats;\n  };\n\n  // Get detailed progress metrics\n  const getProgressMetrics = () => {\n    const totalLetters = 24;\n    const unlockedLetters = userProgress.unlockedLetters.length;\n    const completedLetters = userProgress.completedLetters.length;\n    const totalScore = userProgress.totalScore;\n    const averageScore = getAverageScore();\n\n    return {\n      totalLetters,\n      unlockedLetters,\n      completedLetters,\n      totalScore,\n      averageScore,\n      unlockProgress: Math.round((unlockedLetters / totalLetters) * 100),\n      completionProgress: Math.round((completedLetters / totalLetters) * 100),\n      currentLevel: Math.max(...koreanAlphabet\n        .filter(letter => userProgress.unlockedLetters.includes(letter.id))\n        .map(letter => letter.difficulty), 1)\n    };\n  };\n\n  // Reset all progress (for testing purposes)\n  const resetAllProgress = () => {\n    const initialProgress = {\n      completedLetters: [],\n      scores: {},\n      currentLevel: 1,\n      totalScore: 0,\n      streakCount: 0,\n      lastPracticeDate: null,\n      achievements: [],\n      unlockedLetters: [1, 2, 3, 4, 5, 15, 16, 17, 18, 19], // Start with first 5 consonants and 5 vowels\n      exerciseStats: {\n        totalQuestions: 0,\n        correctAnswers: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        totalScore: 0,\n        averageScore: 0,\n        studyTimeMinutes: 0,\n        longestStreak: 0\n      },\n      milestones: {\n        lettersCompleted: 0,\n        perfectScores: 0,\n        weeklyGoal: false,\n        monthlyGoal: false\n      }\n    };\n\n    setUserProgress(initialProgress);\n    localStorage.setItem('korean-alphabet-progress', JSON.stringify(initialProgress));\n  };\n\n  const value = {\n    userProgress,\n    markLetterCompleted,\n    updateScore,\n    incrementStreak,\n    resetStreak,\n    addAchievement,\n    getProgressPercentage,\n    isLetterCompleted,\n    getBestScore,\n    getAverageScore,\n    isLetterUnlocked,\n    getAvailableLetters,\n    getLockedLettersCount,\n    getOverallProgress,\n    getUnlockedAchievements,\n    getLockedAchievements,\n    getExerciseStats,\n    getProgressMetrics,\n    resetAllProgress,\n    ACHIEVEMENTS\n  };\n\n  return (\n    <ProgressContext.Provider value={value}>\n      {children}\n    </ProgressContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}