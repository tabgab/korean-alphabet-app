{"ast":null,"code":"var _jsxFileName = \"/Users/gabortabi/DEV/learnKorean/src/components/WordBuilderSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { exampleWords, koreanConsonants, koreanVowels } from '../koreanAlphabetData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordBuilderSection = () => {\n  _s();\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [currentStage, setCurrentStage] = useState(1); // 1: jamo, 2: syllables, 3: word\n  const [selectedJamo, setSelectedJamo] = useState({\n    initial: null,\n    // Initial consonant\n    vowel: null,\n    // Vowel\n    final: null // Final consonant (optional)\n  });\n  const [builtSyllables, setBuiltSyllables] = useState([]);\n  const [userWord, setUserWord] = useState([]);\n  const [showHint, setShowHint] = useState(false);\n  const [currentHint, setCurrentHint] = useState('');\n  const selectWord = useCallback(word => {\n    setSelectedWord(word);\n    setCurrentStage(1);\n    setSelectedJamo({\n      consonants: [],\n      vowels: []\n    });\n    setBuiltSyllables([]);\n    setUserWord([]);\n    setShowHint(false);\n  }, []);\n  const getRequiredJamo = useCallback(() => {\n    if (!selectedWord) return {\n      consonants: [],\n      vowels: []\n    };\n    const required = {\n      consonants: [],\n      vowels: []\n    };\n    selectedWord.syllables.forEach(syllable => {\n      // Add initial consonant\n      if (syllable.consonant) {\n        const consonant = koreanConsonants.find(c => c.koreanLetter === syllable.consonant);\n        if (consonant && !required.consonants.find(c => c.id === consonant.id)) {\n          required.consonants.push(consonant);\n        }\n      }\n\n      // Add vowel\n      if (syllable.vowel) {\n        const vowel = koreanVowels.find(v => v.koreanLetter === syllable.vowel);\n        if (vowel && !required.vowels.find(v => v.id === vowel.id)) {\n          required.vowels.push(vowel);\n        }\n      }\n\n      // Add final consonant (for CVC syllables)\n      if (syllable.final) {\n        const finalConsonant = koreanConsonants.find(c => c.koreanLetter === syllable.final);\n        if (finalConsonant && !required.consonants.find(c => c.id === finalConsonant.id)) {\n          required.consonants.push(finalConsonant);\n        }\n      }\n    });\n    return required;\n  }, [selectedWord]);\n  const getHints = useCallback(() => {\n    if (!selectedWord) return [];\n    const hints = [];\n    if (currentStage === 1) {\n      const required = getRequiredJamo();\n      const missingConsonants = required.consonants.filter(reqC => {\n        var _selectedJamo$consona;\n        return !((_selectedJamo$consona = selectedJamo.consonants) !== null && _selectedJamo$consona !== void 0 && _selectedJamo$consona.some(selC => selC.id === reqC.id));\n      });\n      const missingVowels = required.vowels.filter(reqV => {\n        var _selectedJamo$vowels;\n        return !((_selectedJamo$vowels = selectedJamo.vowels) !== null && _selectedJamo$vowels !== void 0 && _selectedJamo$vowels.some(selV => selV.id === reqV.id));\n      });\n      if (missingConsonants.length > 0) {\n        hints.push(`Select the consonant: ${missingConsonants[0].koreanLetter} (${missingConsonants[0].name})`);\n      } else if (missingVowels.length > 0) {\n        hints.push(`Select the vowel: ${missingVowels[0].koreanLetter} (${missingVowels[0].name})`);\n      } else {\n        hints.push(\"Great! You've selected all required letters. Click 'Next' to build syllables.\");\n      }\n    }\n    if (currentStage === 2) {\n      const currentSyllableIndex = builtSyllables.length;\n      if (currentSyllableIndex < selectedWord.syllables.length) {\n        const targetSyllable = selectedWord.syllables[currentSyllableIndex];\n        if (selectedJamo.consonants.length === 0 && selectedJamo.vowels.length === 0) {\n          if (targetSyllable.structure === 'CVC') {\n            hints.push(`Build \"${targetSyllable.syllable}\" (CVC): Select ${targetSyllable.consonant} (initial) + ${targetSyllable.vowel} + ${targetSyllable.final} (final)`);\n          } else {\n            hints.push(`Build \"${targetSyllable.syllable}\" (CV): Select ${targetSyllable.consonant} + ${targetSyllable.vowel}`);\n          }\n        } else if (selectedJamo.consonants.length > 0 && selectedJamo.vowels.length === 0) {\n          hints.push(`Now select ${targetSyllable.vowel}${targetSyllable.final ? ' (and optionally ' + targetSyllable.final + ' for final consonant)' : ''}`);\n        } else if (selectedJamo.consonants.length === 0 && selectedJamo.vowels.length > 0) {\n          hints.push(`Select ${targetSyllable.consonant} as initial consonant`);\n        } else if (selectedJamo.consonants.length === 1 && selectedJamo.vowels.length === 1) {\n          if (targetSyllable.final) {\n            // Check if we can reuse the same consonant for final position\n            const availableConsonants = requiredJamo.consonants.filter(c => c.koreanLetter === targetSyllable.final || c.koreanLetter === targetSyllable.consonant);\n            if (availableConsonants.length > 0) {\n              hints.push(`Add ${targetSyllable.final} as final consonant (you can reuse ${targetSyllable.consonant} if it's the same letter)`);\n            } else {\n              hints.push(`Add ${targetSyllable.final} as final consonant`);\n            }\n          } else {\n            hints.push(`Click \"Build Syllable\" to create \"${targetSyllable.syllable}\" (CV structure)`);\n          }\n        } else if (selectedJamo.consonants.length === 2 && selectedJamo.vowels.length === 1) {\n          hints.push(`Click \"Build Syllable\" to create \"${targetSyllable.syllable}\" (CVC structure)`);\n        }\n      }\n    }\n    if (currentStage === 3) {\n      if (userWord.length < selectedWord.syllables.length) {\n        const nextSyllable = selectedWord.syllables[userWord.length];\n        const availableSyllable = builtSyllables.find(bs => bs.syllable === nextSyllable.syllable);\n        if (availableSyllable) {\n          hints.push(`Drag \"${availableSyllable.syllable}\" to the next empty slot`);\n        } else {\n          hints.push(`Build \"${nextSyllable.syllable}\" first in Stage 2`);\n        }\n      } else {\n        hints.push(`Click \"Check Word\" to verify your word construction`);\n      }\n    }\n    return hints;\n  }, [selectedWord, currentStage, selectedJamo, builtSyllables, userWord, getRequiredJamo]);\n  const showHintForCurrentStage = useCallback(() => {\n    const hints = getHints();\n    if (hints.length > 0) {\n      setCurrentHint(hints[0]);\n      setShowHint(true);\n    }\n  }, [getHints]);\n  const handleJamoSelection = useCallback((jamo, type) => {\n    console.log('Jamo selected:', jamo, type);\n    setSelectedJamo(prev => {\n      if (type === 'consonant') {\n        // If no initial consonant is selected, set this as initial\n        if (!prev.initial) {\n          console.log('Setting as initial consonant');\n          return {\n            ...prev,\n            initial: jamo\n          };\n        }\n        // If initial is selected but no final, set this as final\n        else if (!prev.final) {\n          console.log('Setting as final consonant');\n          return {\n            ...prev,\n            final: jamo\n          };\n        }\n        // Both are selected, replace final consonant\n        else {\n          console.log('Replacing final consonant');\n          return {\n            ...prev,\n            final: jamo\n          };\n        }\n      } else if (type === 'vowel') {\n        // Set or replace vowel\n        console.log('Setting vowel');\n        return {\n          ...prev,\n          vowel: jamo\n        };\n      }\n      return prev;\n    });\n  }, []);\n  const canBuildSyllable = useCallback(() => {\n    // Need at least initial consonant and vowel\n    const hasInitial = !!selectedJamo.initial;\n    const hasVowel = !!selectedJamo.vowel;\n    // Final consonant is optional for CVC structure\n\n    return hasInitial && hasVowel;\n  }, [selectedJamo]);\n  const buildSyllable = useCallback(() => {\n    if (!canBuildSyllable()) return;\n    console.log('Building syllable with:', selectedJamo);\n    const initialConsonant = selectedJamo.initial;\n    const vowel = selectedJamo.vowel;\n    const finalConsonant = selectedJamo.final;\n\n    // Create syllable text based on structure\n    let syllableText = initialConsonant.koreanLetter + vowel.koreanLetter;\n    if (finalConsonant) {\n      syllableText += finalConsonant.koreanLetter;\n    }\n    console.log('Looking for target syllable with:', {\n      consonant: initialConsonant.koreanLetter,\n      vowel: vowel.koreanLetter,\n      final: finalConsonant ? finalConsonant.koreanLetter : null\n    });\n\n    // Find the matching syllable in the target word to get complete structure\n    const targetSyllable = selectedWord.syllables.find(ts => {\n      const consonantMatch = ts.consonant === initialConsonant.koreanLetter;\n      const vowelMatch = ts.vowel === vowel.koreanLetter;\n      const finalMatch = finalConsonant ? ts.final === finalConsonant.koreanLetter : !ts.final; // No final consonant expected\n\n      console.log('Checking syllable:', ts, {\n        consonantMatch,\n        vowelMatch,\n        finalMatch\n      });\n      return consonantMatch && vowelMatch && finalMatch;\n    });\n    console.log('Found target syllable:', targetSyllable);\n    const newSyllable = {\n      syllable: targetSyllable ? targetSyllable.syllable : syllableText,\n      consonant: initialConsonant.koreanLetter,\n      vowel: vowel.koreanLetter,\n      final: finalConsonant ? finalConsonant.koreanLetter : targetSyllable ? targetSyllable.final : null,\n      structure: targetSyllable ? targetSyllable.structure : finalConsonant ? 'CVC' : 'CV',\n      completed: true\n    };\n    console.log('Created new syllable:', newSyllable);\n    setBuiltSyllables(prev => {\n      const updated = [...prev, newSyllable];\n      console.log('Updated builtSyllables:', updated);\n      return updated;\n    });\n\n    // Clear selections after building\n    setSelectedJamo({\n      initial: null,\n      vowel: null,\n      final: null\n    });\n  }, [canBuildSyllable, selectedJamo, selectedWord]);\n  const handleSyllableDrop = useCallback(syllable => {\n    console.log('Dropping syllable:', syllable);\n    if (!selectedWord) {\n      console.error('selectedWord is undefined');\n      return;\n    }\n    if (userWord.length >= selectedWord.syllables.length) {\n      console.log('Word is already complete');\n      return;\n    }\n    if (userWord.some(userSyl => userSyl.syllable === syllable.syllable)) {\n      console.log('Syllable already used');\n      return;\n    }\n    setUserWord(prev => {\n      const newWord = [...prev, syllable];\n      console.log('New userWord:', newWord);\n      return newWord;\n    });\n  }, [selectedWord, userWord]);\n  const removeSyllable = useCallback(index => {\n    console.log('Removing syllable at index:', index);\n    setUserWord(prev => {\n      const newWord = prev.filter((_, i) => i !== index);\n      console.log('New userWord after removal:', newWord);\n      return newWord;\n    });\n  }, []);\n  const checkStageCompletion = useCallback(() => {\n    console.log('Checking stage completion:', {\n      currentStage,\n      userWord,\n      selectedWord\n    });\n    if (currentStage === 1) {\n      const required = getRequiredJamo();\n      const hasAllConsonants = required.consonants.every(reqC => selectedJamo.consonants.some(selC => selC.id === reqC.id));\n      const hasAllVowels = required.vowels.every(reqV => selectedJamo.vowels.some(selV => selV.id === reqV.id));\n      return hasAllConsonants && hasAllVowels;\n    }\n    if (currentStage === 2) {\n      return builtSyllables.length === selectedWord.syllables.length && builtSyllables.every(bs => bs.completed);\n    }\n    if (currentStage === 3) {\n      console.log('Stage 3 validation:', {\n        userWord,\n        selectedWord\n      });\n      if (!selectedWord || !selectedWord.syllables) {\n        console.error('selectedWord or syllables is undefined');\n        return false;\n      }\n      if (userWord.length !== selectedWord.syllables.length) {\n        console.log('User word length mismatch:', userWord.length, selectedWord.syllables.length);\n        return false;\n      }\n\n      // Check each syllable with proper error handling\n      for (let index = 0; index < userWord.length; index++) {\n        const userSyl = userWord[index];\n        const targetSyllable = selectedWord.syllables[index];\n        console.log(`Checking index ${index}:`, {\n          userSyl,\n          targetSyllable\n        });\n        if (!userSyl) {\n          console.error('userSyl is undefined at index:', index);\n          return false;\n        }\n        if (!targetSyllable) {\n          console.error('targetSyllable is undefined at index:', index);\n          return false;\n        }\n        if (!userSyl.syllable || !targetSyllable.syllable) {\n          console.error('Syllable text is undefined:', {\n            userSyl,\n            targetSyllable\n          });\n          return false;\n        }\n        const isCorrect = userSyl.syllable === targetSyllable.syllable;\n        console.log(`Comparing: \"${userSyl.syllable}\" vs \"${targetSyllable.syllable}\" = ${isCorrect}`);\n        if (!isCorrect) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }, [currentStage, selectedJamo, builtSyllables, userWord, selectedWord, getRequiredJamo]);\n  const advanceToNextStage = useCallback(() => {\n    if (currentStage < 3) {\n      setCurrentStage(prev => prev + 1);\n      setShowHint(false);\n    }\n  }, [currentStage]);\n  const resetExercise = useCallback(() => {\n    setCurrentStage(1);\n    setSelectedJamo({\n      consonants: [],\n      vowels: []\n    });\n    setBuiltSyllables([]);\n    setUserWord([]);\n    setShowHint(false);\n  }, []);\n  const getJamoButtonClass = (jamo, type) => {\n    const isSelected = type === 'consonant' ? selectedJamo.consonants.some(c => c.id === jamo.id) : selectedJamo.vowels.some(v => v.id === jamo.id);\n    return `jamo-btn ${isSelected ? 'selected' : 'available'}`;\n  };\n  const getSyllableButtonClass = syllable => {\n    const isUsed = userWord.some(userSyl => userSyl.syllable === syllable.syllable);\n    return `syllable-btn ${isUsed ? 'used' : 'available'}`;\n  };\n  const requiredJamo = getRequiredJamo();\n  const stageHints = getHints();\n  if (!selectedWord) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-builder-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Progressive Word Builder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Learn Korean writing step by step: from individual letters to complete words.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a word to build:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-cards\",\n          children: exampleWords.map(word => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"word-card\",\n            onClick: () => selectWord(word),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-korean\",\n              children: word.korean\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-romanization\",\n              children: word.romanization\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-english\",\n              children: [\"\\\"\", word.english, \"\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"syllable-count\",\n              children: [word.syllables.length, \" syllables\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 17\n            }, this)]\n          }, word.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-builder-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-btn\",\n          onClick: () => setSelectedWord(null),\n          children: \"\\u2190 Back to Word Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Build: \", selectedWord.english]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"target-word\",\n            children: selectedWord.korean\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"romanization\",\n            children: [\"(\", selectedWord.romanization, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stage-progress\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stage ${currentStage === 1 ? 'active' : ''} ${currentStage > 1 ? 'completed' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-number\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-label\",\n            children: \"Jamo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stage ${currentStage === 2 ? 'active' : ''} ${currentStage > 2 ? 'completed' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-number\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-label\",\n            children: \"Syllables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stage ${currentStage === 3 ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-number\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-label\",\n            children: \"Word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-builder-container\",\n      children: [currentStage === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stage-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Stage 1: Select Required Letters (Jamo)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Choose all the consonants and vowels needed to build this word.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jamo-selection\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jamo-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Required Consonants:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"jamo-grid\",\n              children: requiredJamo.consonants.map(consonant => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: getJamoButtonClass(consonant, 'consonant'),\n                onClick: () => handleJamoSelection(consonant, 'consonant'),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-letter\",\n                  children: consonant.koreanLetter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-name\",\n                  children: consonant.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-sound\",\n                  children: [\"(\", consonant.romanization, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 453,\n                  columnNumber: 23\n                }, this)]\n              }, consonant.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jamo-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Required Vowels:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"jamo-grid\",\n              children: requiredJamo.vowels.map(vowel => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: getJamoButtonClass(vowel, 'vowel'),\n                onClick: () => handleJamoSelection(vowel, 'vowel'),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-letter\",\n                  children: vowel.koreanLetter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 468,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-name\",\n                  children: vowel.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 469,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-sound\",\n                  children: [\"(\", vowel.romanization, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 470,\n                  columnNumber: 23\n                }, this)]\n              }, vowel.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"hint-btn\",\n            onClick: showHintForCurrentStage,\n            disabled: stageHints.length === 0,\n            children: \"\\uD83D\\uDCA1 Show Hint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this), showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint-text\",\n            children: currentHint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-navigation\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"next-stage-btn\",\n            onClick: advanceToNextStage,\n            disabled: !checkStageCompletion(),\n            children: \"Next: Build Syllables \\u2192\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this), currentStage === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stage-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Stage 2: Build Syllable Blocks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Combine consonants and vowels to create syllable blocks. Build them one at a time.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"syllable-building\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jamo-pool-stage2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Available Letters:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Select consonants and vowels to build the next syllable. You can reuse consonants for different positions.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"jamo-pool-grid\",\n              children: [requiredJamo.consonants.map(consonant => {\n                const isSelectedForInitial = selectedJamo.consonants.filter((_, index) => index === 0).some(c => c.id === consonant.id);\n                const isSelectedForFinal = selectedJamo.consonants.filter((_, index) => index > 0).some(c => c.id === consonant.id);\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `jamo-btn ${isSelectedForInitial || isSelectedForFinal ? 'selected' : 'available'}`,\n                  onClick: () => handleJamoSelection(consonant, 'consonant'),\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"jamo-letter\",\n                    children: consonant.koreanLetter\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 528,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"jamo-name\",\n                    children: consonant.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 529,\n                    columnNumber: 25\n                  }, this), isSelectedForInitial && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"position-indicator initial\",\n                    children: \"\\uCD08\\uC131\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 530,\n                    columnNumber: 50\n                  }, this), isSelectedForFinal && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"position-indicator final\",\n                    children: \"\\uC885\\uC131\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 531,\n                    columnNumber: 48\n                  }, this)]\n                }, `${consonant.id}-${consonant.koreanLetter}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 523,\n                  columnNumber: 23\n                }, this);\n              }), requiredJamo.vowels.map(vowel => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: getJamoButtonClass(vowel, 'vowel'),\n                onClick: () => handleJamoSelection(vowel, 'vowel'),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-letter\",\n                  children: vowel.koreanLetter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 541,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-name\",\n                  children: vowel.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 542,\n                  columnNumber: 23\n                }, this)]\n              }, vowel.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jamo-workspace\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Selected for Current Syllable:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selected-jamo\",\n              children: [selectedJamo.initial && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"selected-jamo-item consonant\",\n                children: [selectedJamo.initial.koreanLetter, \" (\", selectedJamo.initial.name, \") - Initial\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 21\n              }, this), selectedJamo.vowel && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"selected-jamo-item vowel\",\n                children: [selectedJamo.vowel.koreanLetter, \" (\", selectedJamo.vowel.name, \") - Vowel\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 557,\n                columnNumber: 21\n              }, this), selectedJamo.final && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"selected-jamo-item final-consonant\",\n                children: [selectedJamo.final.koreanLetter, \" (\", selectedJamo.final.name, \") - Final\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selection-summary\",\n              children: selectedJamo.initial && selectedJamo.vowel && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"structure-info\",\n                children: selectedJamo.final ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"structure-badge cvc\",\n                  children: \"CVC Structure\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"structure-badge cv\",\n                  children: \"CV Structure\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 574,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"syllable-preview\",\n              children: selectedJamo.initial && selectedJamo.vowel && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"preview-syllable\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"preview-text\",\n                  children: [\"Preview: \", selectedJamo.initial.koreanLetter + selectedJamo.vowel.koreanLetter, selectedJamo.final && selectedJamo.final.koreanLetter]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 583,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"preview-structure\",\n                  children: [\"(\", selectedJamo.final ? 'CVC' : 'CV', \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 587,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 582,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"workspace-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"build-syllable-btn\",\n                onClick: () => {\n                  console.log('Build Syllable clicked');\n                  console.log('Selected Jamo:', selectedJamo);\n                  console.log('Can build:', canBuildSyllable());\n                  buildSyllable();\n                },\n                disabled: !canBuildSyllable(),\n                children: canBuildSyllable() ? `Build Syllable (${selectedJamo.final ? 'CVC' : 'CV'}) →` : 'Select initial consonant and vowel first'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 595,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"clear-selection-btn\",\n                onClick: () => setSelectedJamo({\n                  initial: null,\n                  vowel: null,\n                  final: null\n                }),\n                children: \"Clear All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"built-syllables\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Built Syllables (\", builtSyllables.length, \"/\", selectedWord.syllables.length, \"):\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"syllables-display\",\n              children: builtSyllables.map((syllable, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"built-syllable\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"syllable-text\",\n                  children: syllable.syllable\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 625,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"syllable-components\",\n                  children: [syllable.consonant, \" + \", syllable.vowel, syllable.final && ` + ${syllable.final}`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 626,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"syllable-structure\",\n                  children: syllable.structure\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 630,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 17\n            }, this), builtSyllables.length < selectedWord.syllables.length && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"next-syllable-hint\",\n              children: [\"Next: Build \\\"\", selectedWord.syllables[builtSyllables.length].syllable, \"\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"hint-btn\",\n            onClick: showHintForCurrentStage,\n            children: \"\\uD83D\\uDCA1 Show Hint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 15\n          }, this), showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint-text\",\n            children: currentHint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-navigation\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"prev-stage-btn\",\n            onClick: () => setCurrentStage(1),\n            children: \"\\u2190 Back to Jamo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"next-stage-btn\",\n            onClick: advanceToNextStage,\n            disabled: !checkStageCompletion(),\n            children: \"Next: Build Word \\u2192\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this), currentStage === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stage-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Stage 3: Build the Complete Word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 669,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Arrange the syllable blocks to form the complete word.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-building\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"target-word-area\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Word Structure:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-slots\",\n              children: selectedWord.syllables.map((targetSyllable, index) => {\n                console.log(`Rendering word slot ${index}:`, {\n                  targetSyllable,\n                  userSyllable: userWord[index]\n                });\n                if (!targetSyllable) {\n                  console.error('targetSyllable is undefined at index:', index);\n                  return null;\n                }\n                const isCorrect = userWord[index] && userWord[index].syllable === targetSyllable.syllable;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `word-slot ${isCorrect ? 'correct' : ''}`,\n                  children: userWord[index] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `syllable-in-word ${isCorrect ? 'correct' : ''}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"syllable-text\",\n                      children: userWord[index].syllable\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 690,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"remove-syllable\",\n                      onClick: () => removeSyllable(index),\n                      children: \"\\xD7\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 691,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 689,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"empty-word-slot\",\n                    children: \"Drop syllable here\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 699,\n                    columnNumber: 27\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 687,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 17\n            }, this), userWord.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"current-word\",\n              children: [\"Current: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"current-word-display\",\n                children: userWord.map(s => s.syllable).join('')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 709,\n                columnNumber: 30\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 19\n            }, this), checkStageCompletion() && currentStage === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"success-message\",\n              children: [\"\\uD83C\\uDF89 Congratulations! You successfully built \\\"\", selectedWord.korean, \"\\\" (\", selectedWord.english, \")!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"available-syllables\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Available Syllables:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"syllables-pool\",\n              children: builtSyllables.map((syllable, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: getSyllableButtonClass(syllable),\n                draggable: !userWord.some(userSyl => userSyl.syllable === syllable.syllable),\n                onDragStart: e => {\n                  e.dataTransfer.setData('text/plain', syllable.syllable);\n                },\n                onClick: () => handleSyllableDrop(syllable),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"syllable-display\",\n                  children: syllable.syllable\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 735,\n                  columnNumber: 23\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 726,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"hint-btn\",\n            onClick: showHintForCurrentStage,\n            children: \"\\uD83D\\uDCA1 Show Hint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 15\n          }, this), showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint-text\",\n            children: currentHint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 746,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-navigation\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"prev-stage-btn\",\n            onClick: () => setCurrentStage(2),\n            children: \"\\u2190 Back to Syllables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"check-word-btn\",\n            onClick: () => {\n              try {\n                console.log('Check Word button clicked');\n                console.log('userWord:', userWord);\n                console.log('selectedWord:', selectedWord);\n                if (checkStageCompletion()) {\n                  setShowHint(false);\n                  setCurrentHint(`Perfect! You successfully built \"${selectedWord.korean}\" (${selectedWord.english})!`);\n                  setShowHint(true);\n                } else {\n                  // Find the first incorrect syllable\n                  let errorMessage = 'Check your syllable placement and try again.';\n                  if (userWord.length > 0 && selectedWord && selectedWord.syllables) {\n                    const firstIncorrect = userWord.findIndex((userSyl, index) => {\n                      if (!userSyl || !selectedWord.syllables[index]) return true;\n                      return userSyl.syllable !== selectedWord.syllables[index].syllable;\n                    });\n                    if (firstIncorrect >= 0) {\n                      errorMessage = `Check position ${firstIncorrect + 1}. Make sure \"${selectedWord.syllables[firstIncorrect].syllable}\" is in the correct place.`;\n                    }\n                  }\n                  setShowHint(false);\n                  setCurrentHint(errorMessage);\n                  setShowHint(true);\n                }\n              } catch (error) {\n                console.error('Error in Check Word:', error);\n                setShowHint(false);\n                setCurrentHint('An error occurred. Please try again or refresh the page.');\n                setShowHint(true);\n              }\n            },\n            children: \"Check Word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-btn\",\n          onClick: resetExercise,\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-word-btn\",\n          onClick: () => setSelectedWord(null),\n          children: \"Try Another Word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 9\n      }, this), showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hint-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hint-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"hint-icon\",\n            children: \"\\uD83D\\uDCA1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 808,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"hint-text\",\n            children: currentHint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 809,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-hint\",\n            onClick: () => setShowHint(false),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n};\n_s(WordBuilderSection, \"yTZsj9KOoxhIJFi4r9eAibsHd6s=\");\n_c = WordBuilderSection;\nexport default WordBuilderSection;\nvar _c;\n$RefreshReg$(_c, \"WordBuilderSection\");","map":{"version":3,"names":["React","useState","useCallback","exampleWords","koreanConsonants","koreanVowels","jsxDEV","_jsxDEV","WordBuilderSection","_s","selectedWord","setSelectedWord","currentStage","setCurrentStage","selectedJamo","setSelectedJamo","initial","vowel","final","builtSyllables","setBuiltSyllables","userWord","setUserWord","showHint","setShowHint","currentHint","setCurrentHint","selectWord","word","consonants","vowels","getRequiredJamo","required","syllables","forEach","syllable","consonant","find","c","koreanLetter","id","push","v","finalConsonant","getHints","hints","missingConsonants","filter","reqC","_selectedJamo$consona","some","selC","missingVowels","reqV","_selectedJamo$vowels","selV","length","name","currentSyllableIndex","targetSyllable","structure","availableConsonants","requiredJamo","nextSyllable","availableSyllable","bs","showHintForCurrentStage","handleJamoSelection","jamo","type","console","log","prev","canBuildSyllable","hasInitial","hasVowel","buildSyllable","initialConsonant","syllableText","ts","consonantMatch","vowelMatch","finalMatch","newSyllable","completed","updated","handleSyllableDrop","error","userSyl","newWord","removeSyllable","index","_","i","checkStageCompletion","hasAllConsonants","every","hasAllVowels","isCorrect","advanceToNextStage","resetExercise","getJamoButtonClass","isSelected","getSyllableButtonClass","isUsed","stageHints","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","korean","romanization","english","disabled","isSelectedForInitial","isSelectedForFinal","userSyllable","s","join","draggable","onDragStart","e","dataTransfer","setData","errorMessage","firstIncorrect","findIndex","_c","$RefreshReg$"],"sources":["/Users/gabortabi/DEV/learnKorean/src/components/WordBuilderSection.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { exampleWords, koreanConsonants, koreanVowels } from '../koreanAlphabetData';\n\nconst WordBuilderSection = () => {\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [currentStage, setCurrentStage] = useState(1); // 1: jamo, 2: syllables, 3: word\n  const [selectedJamo, setSelectedJamo] = useState({\n    initial: null,    // Initial consonant\n    vowel: null,      // Vowel\n    final: null       // Final consonant (optional)\n  });\n  const [builtSyllables, setBuiltSyllables] = useState([]);\n  const [userWord, setUserWord] = useState([]);\n  const [showHint, setShowHint] = useState(false);\n  const [currentHint, setCurrentHint] = useState('');\n\n  const selectWord = useCallback((word) => {\n    setSelectedWord(word);\n    setCurrentStage(1);\n    setSelectedJamo({ consonants: [], vowels: [] });\n    setBuiltSyllables([]);\n    setUserWord([]);\n    setShowHint(false);\n  }, []);\n\n  const getRequiredJamo = useCallback(() => {\n    if (!selectedWord) return { consonants: [], vowels: [] };\n\n    const required = { consonants: [], vowels: [] };\n\n    selectedWord.syllables.forEach(syllable => {\n      // Add initial consonant\n      if (syllable.consonant) {\n        const consonant = koreanConsonants.find(c => c.koreanLetter === syllable.consonant);\n        if (consonant && !required.consonants.find(c => c.id === consonant.id)) {\n          required.consonants.push(consonant);\n        }\n      }\n\n      // Add vowel\n      if (syllable.vowel) {\n        const vowel = koreanVowels.find(v => v.koreanLetter === syllable.vowel);\n        if (vowel && !required.vowels.find(v => v.id === vowel.id)) {\n          required.vowels.push(vowel);\n        }\n      }\n\n      // Add final consonant (for CVC syllables)\n      if (syllable.final) {\n        const finalConsonant = koreanConsonants.find(c => c.koreanLetter === syllable.final);\n        if (finalConsonant && !required.consonants.find(c => c.id === finalConsonant.id)) {\n          required.consonants.push(finalConsonant);\n        }\n      }\n    });\n\n    return required;\n  }, [selectedWord]);\n\n  const getHints = useCallback(() => {\n    if (!selectedWord) return [];\n\n    const hints = [];\n\n    if (currentStage === 1) {\n      const required = getRequiredJamo();\n      const missingConsonants = required.consonants.filter(reqC =>\n        !selectedJamo.consonants?.some(selC => selC.id === reqC.id)\n      );\n      const missingVowels = required.vowels.filter(reqV =>\n        !selectedJamo.vowels?.some(selV => selV.id === reqV.id)\n      );\n\n      if (missingConsonants.length > 0) {\n        hints.push(`Select the consonant: ${missingConsonants[0].koreanLetter} (${missingConsonants[0].name})`);\n      } else if (missingVowels.length > 0) {\n        hints.push(`Select the vowel: ${missingVowels[0].koreanLetter} (${missingVowels[0].name})`);\n      } else {\n        hints.push(\"Great! You've selected all required letters. Click 'Next' to build syllables.\");\n      }\n    }\n\n    if (currentStage === 2) {\n      const currentSyllableIndex = builtSyllables.length;\n      if (currentSyllableIndex < selectedWord.syllables.length) {\n        const targetSyllable = selectedWord.syllables[currentSyllableIndex];\n\n        if (selectedJamo.consonants.length === 0 && selectedJamo.vowels.length === 0) {\n          if (targetSyllable.structure === 'CVC') {\n            hints.push(`Build \"${targetSyllable.syllable}\" (CVC): Select ${targetSyllable.consonant} (initial) + ${targetSyllable.vowel} + ${targetSyllable.final} (final)`);\n          } else {\n            hints.push(`Build \"${targetSyllable.syllable}\" (CV): Select ${targetSyllable.consonant} + ${targetSyllable.vowel}`);\n          }\n        } else if (selectedJamo.consonants.length > 0 && selectedJamo.vowels.length === 0) {\n          hints.push(`Now select ${targetSyllable.vowel}${targetSyllable.final ? ' (and optionally ' + targetSyllable.final + ' for final consonant)' : ''}`);\n        } else if (selectedJamo.consonants.length === 0 && selectedJamo.vowels.length > 0) {\n          hints.push(`Select ${targetSyllable.consonant} as initial consonant`);\n        } else if (selectedJamo.consonants.length === 1 && selectedJamo.vowels.length === 1) {\n          if (targetSyllable.final) {\n            // Check if we can reuse the same consonant for final position\n            const availableConsonants = requiredJamo.consonants.filter(c =>\n              c.koreanLetter === targetSyllable.final ||\n              c.koreanLetter === targetSyllable.consonant\n            );\n            if (availableConsonants.length > 0) {\n              hints.push(`Add ${targetSyllable.final} as final consonant (you can reuse ${targetSyllable.consonant} if it's the same letter)`);\n            } else {\n              hints.push(`Add ${targetSyllable.final} as final consonant`);\n            }\n          } else {\n            hints.push(`Click \"Build Syllable\" to create \"${targetSyllable.syllable}\" (CV structure)`);\n          }\n        } else if (selectedJamo.consonants.length === 2 && selectedJamo.vowels.length === 1) {\n          hints.push(`Click \"Build Syllable\" to create \"${targetSyllable.syllable}\" (CVC structure)`);\n        }\n      }\n    }\n\n    if (currentStage === 3) {\n      if (userWord.length < selectedWord.syllables.length) {\n        const nextSyllable = selectedWord.syllables[userWord.length];\n        const availableSyllable = builtSyllables.find(bs => bs.syllable === nextSyllable.syllable);\n        if (availableSyllable) {\n          hints.push(`Drag \"${availableSyllable.syllable}\" to the next empty slot`);\n        } else {\n          hints.push(`Build \"${nextSyllable.syllable}\" first in Stage 2`);\n        }\n      } else {\n        hints.push(`Click \"Check Word\" to verify your word construction`);\n      }\n    }\n\n    return hints;\n  }, [selectedWord, currentStage, selectedJamo, builtSyllables, userWord, getRequiredJamo]);\n\n  const showHintForCurrentStage = useCallback(() => {\n    const hints = getHints();\n    if (hints.length > 0) {\n      setCurrentHint(hints[0]);\n      setShowHint(true);\n    }\n  }, [getHints]);\n\n  const handleJamoSelection = useCallback((jamo, type) => {\n    console.log('Jamo selected:', jamo, type);\n\n    setSelectedJamo(prev => {\n      if (type === 'consonant') {\n        // If no initial consonant is selected, set this as initial\n        if (!prev.initial) {\n          console.log('Setting as initial consonant');\n          return { ...prev, initial: jamo };\n        }\n        // If initial is selected but no final, set this as final\n        else if (!prev.final) {\n          console.log('Setting as final consonant');\n          return { ...prev, final: jamo };\n        }\n        // Both are selected, replace final consonant\n        else {\n          console.log('Replacing final consonant');\n          return { ...prev, final: jamo };\n        }\n      } else if (type === 'vowel') {\n        // Set or replace vowel\n        console.log('Setting vowel');\n        return { ...prev, vowel: jamo };\n      }\n\n      return prev;\n    });\n  }, []);\n\n  const canBuildSyllable = useCallback(() => {\n    // Need at least initial consonant and vowel\n    const hasInitial = !!selectedJamo.initial;\n    const hasVowel = !!selectedJamo.vowel;\n    // Final consonant is optional for CVC structure\n\n    return hasInitial && hasVowel;\n  }, [selectedJamo]);\n\n\n  const buildSyllable = useCallback(() => {\n    if (!canBuildSyllable()) return;\n\n    console.log('Building syllable with:', selectedJamo);\n\n    const initialConsonant = selectedJamo.initial;\n    const vowel = selectedJamo.vowel;\n    const finalConsonant = selectedJamo.final;\n\n    // Create syllable text based on structure\n    let syllableText = initialConsonant.koreanLetter + vowel.koreanLetter;\n    if (finalConsonant) {\n      syllableText += finalConsonant.koreanLetter;\n    }\n\n    console.log('Looking for target syllable with:', {\n      consonant: initialConsonant.koreanLetter,\n      vowel: vowel.koreanLetter,\n      final: finalConsonant ? finalConsonant.koreanLetter : null\n    });\n\n    // Find the matching syllable in the target word to get complete structure\n    const targetSyllable = selectedWord.syllables.find(ts => {\n      const consonantMatch = ts.consonant === initialConsonant.koreanLetter;\n      const vowelMatch = ts.vowel === vowel.koreanLetter;\n      const finalMatch = finalConsonant\n        ? ts.final === finalConsonant.koreanLetter\n        : !ts.final; // No final consonant expected\n\n      console.log('Checking syllable:', ts, { consonantMatch, vowelMatch, finalMatch });\n      return consonantMatch && vowelMatch && finalMatch;\n    });\n\n    console.log('Found target syllable:', targetSyllable);\n\n    const newSyllable = {\n      syllable: targetSyllable ? targetSyllable.syllable : syllableText,\n      consonant: initialConsonant.koreanLetter,\n      vowel: vowel.koreanLetter,\n      final: finalConsonant ? finalConsonant.koreanLetter : (targetSyllable ? targetSyllable.final : null),\n      structure: targetSyllable ? targetSyllable.structure : (finalConsonant ? 'CVC' : 'CV'),\n      completed: true\n    };\n\n    console.log('Created new syllable:', newSyllable);\n\n    setBuiltSyllables(prev => {\n      const updated = [...prev, newSyllable];\n      console.log('Updated builtSyllables:', updated);\n      return updated;\n    });\n\n    // Clear selections after building\n    setSelectedJamo({ initial: null, vowel: null, final: null });\n  }, [canBuildSyllable, selectedJamo, selectedWord]);\n\n  const handleSyllableDrop = useCallback((syllable) => {\n    console.log('Dropping syllable:', syllable);\n\n    if (!selectedWord) {\n      console.error('selectedWord is undefined');\n      return;\n    }\n\n    if (userWord.length >= selectedWord.syllables.length) {\n      console.log('Word is already complete');\n      return;\n    }\n\n    if (userWord.some(userSyl => userSyl.syllable === syllable.syllable)) {\n      console.log('Syllable already used');\n      return;\n    }\n\n    setUserWord(prev => {\n      const newWord = [...prev, syllable];\n      console.log('New userWord:', newWord);\n      return newWord;\n    });\n  }, [selectedWord, userWord]);\n\n  const removeSyllable = useCallback((index) => {\n    console.log('Removing syllable at index:', index);\n    setUserWord(prev => {\n      const newWord = prev.filter((_, i) => i !== index);\n      console.log('New userWord after removal:', newWord);\n      return newWord;\n    });\n  }, []);\n\n  const checkStageCompletion = useCallback(() => {\n    console.log('Checking stage completion:', { currentStage, userWord, selectedWord });\n\n    if (currentStage === 1) {\n      const required = getRequiredJamo();\n      const hasAllConsonants = required.consonants.every(reqC =>\n        selectedJamo.consonants.some(selC => selC.id === reqC.id)\n      );\n      const hasAllVowels = required.vowels.every(reqV =>\n        selectedJamo.vowels.some(selV => selV.id === reqV.id)\n      );\n      return hasAllConsonants && hasAllVowels;\n    }\n\n    if (currentStage === 2) {\n      return builtSyllables.length === selectedWord.syllables.length &&\n             builtSyllables.every(bs => bs.completed);\n    }\n\n    if (currentStage === 3) {\n      console.log('Stage 3 validation:', { userWord, selectedWord });\n\n      if (!selectedWord || !selectedWord.syllables) {\n        console.error('selectedWord or syllables is undefined');\n        return false;\n      }\n\n      if (userWord.length !== selectedWord.syllables.length) {\n        console.log('User word length mismatch:', userWord.length, selectedWord.syllables.length);\n        return false;\n      }\n\n      // Check each syllable with proper error handling\n      for (let index = 0; index < userWord.length; index++) {\n        const userSyl = userWord[index];\n        const targetSyllable = selectedWord.syllables[index];\n\n        console.log(`Checking index ${index}:`, { userSyl, targetSyllable });\n\n        if (!userSyl) {\n          console.error('userSyl is undefined at index:', index);\n          return false;\n        }\n\n        if (!targetSyllable) {\n          console.error('targetSyllable is undefined at index:', index);\n          return false;\n        }\n\n        if (!userSyl.syllable || !targetSyllable.syllable) {\n          console.error('Syllable text is undefined:', { userSyl, targetSyllable });\n          return false;\n        }\n\n        const isCorrect = userSyl.syllable === targetSyllable.syllable;\n        console.log(`Comparing: \"${userSyl.syllable}\" vs \"${targetSyllable.syllable}\" = ${isCorrect}`);\n\n        if (!isCorrect) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }, [currentStage, selectedJamo, builtSyllables, userWord, selectedWord, getRequiredJamo]);\n\n  const advanceToNextStage = useCallback(() => {\n    if (currentStage < 3) {\n      setCurrentStage(prev => prev + 1);\n      setShowHint(false);\n    }\n  }, [currentStage]);\n\n  const resetExercise = useCallback(() => {\n    setCurrentStage(1);\n    setSelectedJamo({ consonants: [], vowels: [] });\n    setBuiltSyllables([]);\n    setUserWord([]);\n    setShowHint(false);\n  }, []);\n\n  const getJamoButtonClass = (jamo, type) => {\n    const isSelected = type === 'consonant'\n      ? selectedJamo.consonants.some(c => c.id === jamo.id)\n      : selectedJamo.vowels.some(v => v.id === jamo.id);\n    return `jamo-btn ${isSelected ? 'selected' : 'available'}`;\n  };\n\n  const getSyllableButtonClass = (syllable) => {\n    const isUsed = userWord.some(userSyl => userSyl.syllable === syllable.syllable);\n    return `syllable-btn ${isUsed ? 'used' : 'available'}`;\n  };\n\n  const requiredJamo = getRequiredJamo();\n  const stageHints = getHints();\n\n  if (!selectedWord) {\n    return (\n      <div className=\"word-builder-section\">\n        <div className=\"section-header\">\n          <h2>Progressive Word Builder</h2>\n          <p>Learn Korean writing step by step: from individual letters to complete words.</p>\n        </div>\n\n        <div className=\"word-selection\">\n          <h3>Select a word to build:</h3>\n          <div className=\"word-cards\">\n            {exampleWords.map(word => (\n              <button\n                key={word.id}\n                className=\"word-card\"\n                onClick={() => selectWord(word)}\n              >\n                <div className=\"word-korean\">{word.korean}</div>\n                <div className=\"word-romanization\">{word.romanization}</div>\n                <div className=\"word-english\">\"{word.english}\"</div>\n                <div className=\"syllable-count\">{word.syllables.length} syllables</div>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"word-builder-section\">\n      <div className=\"section-header\">\n        <div className=\"exercise-header\">\n          <button className=\"back-btn\" onClick={() => setSelectedWord(null)}>\n            ← Back to Word Selection\n          </button>\n          <h2>Build: {selectedWord.english}</h2>\n          <div className=\"word-info\">\n            <span className=\"target-word\">{selectedWord.korean}</span>\n            <span className=\"romanization\">({selectedWord.romanization})</span>\n          </div>\n        </div>\n\n        {/* Progress indicator */}\n        <div className=\"stage-progress\">\n          <div className={`stage ${currentStage === 1 ? 'active' : ''} ${currentStage > 1 ? 'completed' : ''}`}>\n            <span className=\"stage-number\">1</span>\n            <span className=\"stage-label\">Jamo</span>\n          </div>\n          <div className={`stage ${currentStage === 2 ? 'active' : ''} ${currentStage > 2 ? 'completed' : ''}`}>\n            <span className=\"stage-number\">2</span>\n            <span className=\"stage-label\">Syllables</span>\n          </div>\n          <div className={`stage ${currentStage === 3 ? 'active' : ''}`}>\n            <span className=\"stage-number\">3</span>\n            <span className=\"stage-label\">Word</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"word-builder-container\">\n        {/* Stage 1: Jamo Selection */}\n        {currentStage === 1 && (\n          <div className=\"stage-container\">\n            <div className=\"stage-header\">\n              <h3>Stage 1: Select Required Letters (Jamo)</h3>\n              <p>Choose all the consonants and vowels needed to build this word.</p>\n            </div>\n\n            <div className=\"jamo-selection\">\n              <div className=\"jamo-section\">\n                <h4>Required Consonants:</h4>\n                <div className=\"jamo-grid\">\n                  {requiredJamo.consonants.map(consonant => (\n                    <div\n                      key={consonant.id}\n                      className={getJamoButtonClass(consonant, 'consonant')}\n                      onClick={() => handleJamoSelection(consonant, 'consonant')}\n                    >\n                      <span className=\"jamo-letter\">{consonant.koreanLetter}</span>\n                      <span className=\"jamo-name\">{consonant.name}</span>\n                      <span className=\"jamo-sound\">({consonant.romanization})</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"jamo-section\">\n                <h4>Required Vowels:</h4>\n                <div className=\"jamo-grid\">\n                  {requiredJamo.vowels.map(vowel => (\n                    <div\n                      key={vowel.id}\n                      className={getJamoButtonClass(vowel, 'vowel')}\n                      onClick={() => handleJamoSelection(vowel, 'vowel')}\n                    >\n                      <span className=\"jamo-letter\">{vowel.koreanLetter}</span>\n                      <span className=\"jamo-name\">{vowel.name}</span>\n                      <span className=\"jamo-sound\">({vowel.romanization})</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"stage-controls\">\n              <button\n                className=\"hint-btn\"\n                onClick={showHintForCurrentStage}\n                disabled={stageHints.length === 0}\n              >\n                💡 Show Hint\n              </button>\n              {showHint && <div className=\"hint-text\">{currentHint}</div>}\n            </div>\n\n            <div className=\"stage-navigation\">\n              <button\n                className=\"next-stage-btn\"\n                onClick={advanceToNextStage}\n                disabled={!checkStageCompletion()}\n              >\n                Next: Build Syllables →\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Stage 2: Syllable Building */}\n        {currentStage === 2 && (\n          <div className=\"stage-container\">\n            <div className=\"stage-header\">\n              <h3>Stage 2: Build Syllable Blocks</h3>\n              <p>Combine consonants and vowels to create syllable blocks. Build them one at a time.</p>\n            </div>\n\n            <div className=\"syllable-building\">\n              {/* Available Jamo Pool for Syllable Building */}\n              <div className=\"jamo-pool-stage2\">\n                <h4>Available Letters:</h4>\n                <p>Select consonants and vowels to build the next syllable. You can reuse consonants for different positions.</p>\n                <div className=\"jamo-pool-grid\">\n                  {requiredJamo.consonants.map(consonant => {\n                    const isSelectedForInitial = selectedJamo.consonants\n                      .filter((_, index) => index === 0)\n                      .some(c => c.id === consonant.id);\n                    const isSelectedForFinal = selectedJamo.consonants\n                      .filter((_, index) => index > 0)\n                      .some(c => c.id === consonant.id);\n\n                    return (\n                      <button\n                        key={`${consonant.id}-${consonant.koreanLetter}`}\n                        className={`jamo-btn ${isSelectedForInitial || isSelectedForFinal ? 'selected' : 'available'}`}\n                        onClick={() => handleJamoSelection(consonant, 'consonant')}\n                      >\n                        <span className=\"jamo-letter\">{consonant.koreanLetter}</span>\n                        <span className=\"jamo-name\">{consonant.name}</span>\n                        {isSelectedForInitial && <span className=\"position-indicator initial\">초성</span>}\n                        {isSelectedForFinal && <span className=\"position-indicator final\">종성</span>}\n                      </button>\n                    );\n                  })}\n                  {requiredJamo.vowels.map(vowel => (\n                    <button\n                      key={vowel.id}\n                      className={getJamoButtonClass(vowel, 'vowel')}\n                      onClick={() => handleJamoSelection(vowel, 'vowel')}\n                    >\n                      <span className=\"jamo-letter\">{vowel.koreanLetter}</span>\n                      <span className=\"jamo-name\">{vowel.name}</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"jamo-workspace\">\n                <h4>Selected for Current Syllable:</h4>\n                <div className=\"selected-jamo\">\n                  {selectedJamo.initial && (\n                    <span className=\"selected-jamo-item consonant\">\n                      {selectedJamo.initial.koreanLetter} ({selectedJamo.initial.name}) - Initial\n                    </span>\n                  )}\n                  {selectedJamo.vowel && (\n                    <span className=\"selected-jamo-item vowel\">\n                      {selectedJamo.vowel.koreanLetter} ({selectedJamo.vowel.name}) - Vowel\n                    </span>\n                  )}\n                  {selectedJamo.final && (\n                    <span className=\"selected-jamo-item final-consonant\">\n                      {selectedJamo.final.koreanLetter} ({selectedJamo.final.name}) - Final\n                    </span>\n                  )}\n                </div>\n\n                <div className=\"selection-summary\">\n                  {selectedJamo.initial && selectedJamo.vowel && (\n                    <div className=\"structure-info\">\n                      {selectedJamo.final ? (\n                        <span className=\"structure-badge cvc\">CVC Structure</span>\n                      ) : (\n                        <span className=\"structure-badge cv\">CV Structure</span>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"syllable-preview\">\n                  {selectedJamo.initial && selectedJamo.vowel && (\n                    <div className=\"preview-syllable\">\n                      <span className=\"preview-text\">\n                        Preview: {selectedJamo.initial.koreanLetter + selectedJamo.vowel.koreanLetter}\n                        {selectedJamo.final && selectedJamo.final.koreanLetter}\n                      </span>\n                      <span className=\"preview-structure\">\n                        ({selectedJamo.final ? 'CVC' : 'CV'})\n                      </span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"workspace-buttons\">\n                  <button\n                    className=\"build-syllable-btn\"\n                    onClick={() => {\n                      console.log('Build Syllable clicked');\n                      console.log('Selected Jamo:', selectedJamo);\n                      console.log('Can build:', canBuildSyllable());\n                      buildSyllable();\n                    }}\n                    disabled={!canBuildSyllable()}\n                  >\n                    {canBuildSyllable()\n                      ? `Build Syllable (${selectedJamo.final ? 'CVC' : 'CV'}) →`\n                      : 'Select initial consonant and vowel first'\n                    }\n                  </button>\n\n                  <button\n                    className=\"clear-selection-btn\"\n                    onClick={() => setSelectedJamo({ initial: null, vowel: null, final: null })}\n                  >\n                    Clear All\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"built-syllables\">\n                <h4>Built Syllables ({builtSyllables.length}/{selectedWord.syllables.length}):</h4>\n                <div className=\"syllables-display\">\n                  {builtSyllables.map((syllable, index) => (\n                    <div key={index} className=\"built-syllable\">\n                      <span className=\"syllable-text\">{syllable.syllable}</span>\n                      <div className=\"syllable-components\">\n                        {syllable.consonant} + {syllable.vowel}\n                        {syllable.final && ` + ${syllable.final}`}\n                      </div>\n                      <div className=\"syllable-structure\">{syllable.structure}</div>\n                    </div>\n                  ))}\n                </div>\n\n                {builtSyllables.length < selectedWord.syllables.length && (\n                  <div className=\"next-syllable-hint\">\n                    Next: Build \"{selectedWord.syllables[builtSyllables.length].syllable}\"\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"stage-controls\">\n              <button className=\"hint-btn\" onClick={showHintForCurrentStage}>\n                💡 Show Hint\n              </button>\n              {showHint && <div className=\"hint-text\">{currentHint}</div>}\n            </div>\n\n            <div className=\"stage-navigation\">\n              <button className=\"prev-stage-btn\" onClick={() => setCurrentStage(1)}>\n                ← Back to Jamo\n              </button>\n              <button\n                className=\"next-stage-btn\"\n                onClick={advanceToNextStage}\n                disabled={!checkStageCompletion()}\n              >\n                Next: Build Word →\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Stage 3: Word Building */}\n        {currentStage === 3 && (\n          <div className=\"stage-container\">\n            <div className=\"stage-header\">\n              <h3>Stage 3: Build the Complete Word</h3>\n              <p>Arrange the syllable blocks to form the complete word.</p>\n            </div>\n\n            <div className=\"word-building\">\n              <div className=\"target-word-area\">\n                <h4>Word Structure:</h4>\n                <div className=\"word-slots\">\n                  {selectedWord.syllables.map((targetSyllable, index) => {\n                    console.log(`Rendering word slot ${index}:`, { targetSyllable, userSyllable: userWord[index] });\n\n                    if (!targetSyllable) {\n                      console.error('targetSyllable is undefined at index:', index);\n                      return null;\n                    }\n\n                    const isCorrect = userWord[index] && userWord[index].syllable === targetSyllable.syllable;\n                    return (\n                      <div key={index} className={`word-slot ${isCorrect ? 'correct' : ''}`}>\n                        {userWord[index] ? (\n                          <div className={`syllable-in-word ${isCorrect ? 'correct' : ''}`}>\n                            <span className=\"syllable-text\">{userWord[index].syllable}</span>\n                            <button\n                              className=\"remove-syllable\"\n                              onClick={() => removeSyllable(index)}\n                            >\n                              ×\n                            </button>\n                          </div>\n                        ) : (\n                          <div className=\"empty-word-slot\">\n                            Drop syllable here\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n                {userWord.length > 0 && (\n                  <div className=\"current-word\">\n                    Current: <span className=\"current-word-display\">\n                      {userWord.map(s => s.syllable).join('')}\n                    </span>\n                  </div>\n                )}\n\n                {checkStageCompletion() && currentStage === 3 && (\n                  <div className=\"success-message\">\n                    🎉 Congratulations! You successfully built \"{selectedWord.korean}\" ({selectedWord.english})!\n                  </div>\n                )}\n              </div>\n\n              <div className=\"available-syllables\">\n                <h4>Available Syllables:</h4>\n                <div className=\"syllables-pool\">\n                  {builtSyllables.map((syllable, index) => (\n                    <div\n                      key={index}\n                      className={getSyllableButtonClass(syllable)}\n                      draggable={!userWord.some(userSyl => userSyl.syllable === syllable.syllable)}\n                      onDragStart={(e) => {\n                        e.dataTransfer.setData('text/plain', syllable.syllable);\n                      }}\n                      onClick={() => handleSyllableDrop(syllable)}\n                    >\n                      <span className=\"syllable-display\">{syllable.syllable}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"stage-controls\">\n              <button className=\"hint-btn\" onClick={showHintForCurrentStage}>\n                💡 Show Hint\n              </button>\n              {showHint && <div className=\"hint-text\">{currentHint}</div>}\n            </div>\n\n            <div className=\"stage-navigation\">\n              <button className=\"prev-stage-btn\" onClick={() => setCurrentStage(2)}>\n                ← Back to Syllables\n              </button>\n              <button className=\"check-word-btn\" onClick={() => {\n                try {\n                  console.log('Check Word button clicked');\n                  console.log('userWord:', userWord);\n                  console.log('selectedWord:', selectedWord);\n\n                  if (checkStageCompletion()) {\n                    setShowHint(false);\n                    setCurrentHint(`Perfect! You successfully built \"${selectedWord.korean}\" (${selectedWord.english})!`);\n                    setShowHint(true);\n                  } else {\n                    // Find the first incorrect syllable\n                    let errorMessage = 'Check your syllable placement and try again.';\n                    if (userWord.length > 0 && selectedWord && selectedWord.syllables) {\n                      const firstIncorrect = userWord.findIndex((userSyl, index) => {\n                        if (!userSyl || !selectedWord.syllables[index]) return true;\n                        return userSyl.syllable !== selectedWord.syllables[index].syllable;\n                      });\n\n                      if (firstIncorrect >= 0) {\n                        errorMessage = `Check position ${firstIncorrect + 1}. Make sure \"${selectedWord.syllables[firstIncorrect].syllable}\" is in the correct place.`;\n                      }\n                    }\n\n                    setShowHint(false);\n                    setCurrentHint(errorMessage);\n                    setShowHint(true);\n                  }\n                } catch (error) {\n                  console.error('Error in Check Word:', error);\n                  setShowHint(false);\n                  setCurrentHint('An error occurred. Please try again or refresh the page.');\n                  setShowHint(true);\n                }\n              }}>\n                Check Word\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Overall Controls */}\n        <div className=\"exercise-controls\">\n          <button className=\"reset-btn\" onClick={resetExercise}>\n            Start Over\n          </button>\n          <button className=\"new-word-btn\" onClick={() => setSelectedWord(null)}>\n            Try Another Word\n          </button>\n        </div>\n\n        {/* Hints */}\n        {showHint && (\n          <div className=\"hint-section\">\n            <div className=\"hint-content\">\n              <span className=\"hint-icon\">💡</span>\n              <span className=\"hint-text\">{currentHint}</span>\n              <button className=\"close-hint\" onClick={() => setShowHint(false)}>×</button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WordBuilderSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}