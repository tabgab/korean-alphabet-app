{"ast":null,"code":"/**\n * Audio utilities for Korean learning app\n * Provides functions for playing sounds for letters, syllables, and words\n */\n\n// Audio cache to avoid reloading sounds\nconst audioCache = new Map();\n\n// Check if browser supports speech synthesis\nexport const isSpeechSupported = () => {\n  return 'speechSynthesis' in window;\n};\n\n// Get available Korean voices\nexport const getKoreanVoices = () => {\n  if (!isSpeechSupported()) return [];\n  const voices = window.speechSynthesis.getVoices();\n  return voices.filter(voice => voice.lang.startsWith('ko') || voice.name.toLowerCase().includes('korean') || voice.name.toLowerCase().includes('korea'));\n};\n\n// Play Korean text using speech synthesis\nexport const speakKorean = (text, options = {}) => {\n  if (!isSpeechSupported()) {\n    console.warn('Speech synthesis not supported in this browser');\n    return Promise.reject(new Error('Speech synthesis not supported'));\n  }\n\n  // Cancel any ongoing speech\n  window.speechSynthesis.cancel();\n  return new Promise((resolve, reject) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    const koreanVoices = getKoreanVoices();\n\n    // Configure audio options\n    utterance.rate = options.rate || 0.8; // Slightly slower for clarity\n    utterance.pitch = options.pitch || 1;\n    utterance.volume = options.volume || 0.8;\n    if (koreanVoices.length > 0) {\n      utterance.voice = koreanVoices[0];\n      utterance.lang = utterance.voice.lang;\n    } else {\n      // Fallback to Korean locale\n      utterance.lang = 'ko-KR';\n    }\n\n    // Handle speech events\n    utterance.onend = () => resolve();\n    utterance.onerror = error => reject(error);\n    utterance.onstart = options.onStart || null;\n\n    // Speak the text\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Play individual letter sound\nexport const playLetterSound = letter => {\n  if (!letter || !letter.koreanLetter) {\n    console.warn('Invalid letter provided for audio playback');\n    return Promise.reject(new Error('Invalid letter'));\n  }\n  console.log('Playing letter sound for:', letter.koreanLetter, 'Name:', letter.name);\n\n  // For single letters, repeat them for clarity\n  const textToSpeak = letter.koreanLetter.repeat(2);\n\n  // Enhanced Korean character handling\n  return speakKorean(textToSpeak, {\n    rate: 0.5,\n    // Even slower for individual letters\n    pitch: 1.2,\n    // Slightly higher pitch for clarity\n    onStart: () => {\n      console.log(`Playing sound for letter: ${letter.name} (${letter.koreanLetter})`);\n    },\n    onError: error => {\n      console.error(`Error playing letter ${letter.name}:`, error);\n    }\n  });\n};\n\n// Play syllable sound\nexport const playSyllableSound = syllable => {\n  if (!syllable) {\n    console.warn('Invalid syllable provided for audio playback');\n    return Promise.reject(new Error('Invalid syllable'));\n  }\n\n  // Use the syllable text if available, otherwise construct from components\n  const textToSpeak = syllable.syllable || syllable.text || (syllable.consonant && syllable.vowel ? syllable.consonant + syllable.vowel + (syllable.final || '') : '');\n  if (!textToSpeak) {\n    console.warn('No text found for syllable audio playback');\n    return Promise.reject(new Error('No text for syllable'));\n  }\n  return speakKorean(textToSpeak, {\n    rate: 0.7,\n    onStart: () => console.log(`Playing sound for syllable: ${textToSpeak}`)\n  });\n};\n\n// Play word sound\nexport const playWordSound = word => {\n  if (!word) {\n    console.warn('Invalid word provided for audio playback');\n    return Promise.reject(new Error('Invalid word'));\n  }\n\n  // Use Korean text if available, otherwise fall back to romanization\n  const textToSpeak = word.korean || word.text || word.romanization || '';\n  if (!textToSpeak) {\n    console.warn('No text found for word audio playback');\n    return Promise.reject(new Error('No text for word'));\n  }\n  return speakKorean(textToSpeak, {\n    rate: 0.8,\n    onStart: () => console.log(`Playing sound for word: ${textToSpeak}`)\n  });\n};\n\n// Play pronunciation guide (English sound description)\nexport const playPronunciationGuide = letter => {\n  if (!letter || !letter.englishSound) {\n    console.warn('Invalid letter or missing pronunciation guide');\n    return Promise.reject(new Error('Invalid letter or missing pronunciation'));\n  }\n\n  // Use Web Speech API with English voice for pronunciation guide\n  if (!isSpeechSupported()) {\n    console.warn('Speech synthesis not supported');\n    return Promise.reject(new Error('Speech synthesis not supported'));\n  }\n  window.speechSynthesis.cancel();\n  return new Promise((resolve, reject) => {\n    const utterance = new SpeechSynthesisUtterance(letter.englishSound);\n\n    // Use English voice for pronunciation guide\n    const voices = window.speechSynthesis.getVoices();\n    const englishVoice = voices.find(voice => voice.lang.startsWith('en') && (voice.name.toLowerCase().includes('female') || voice.name.toLowerCase().includes('woman'))) || voices.find(voice => voice.lang.startsWith('en'));\n    if (englishVoice) {\n      utterance.voice = englishVoice;\n      utterance.lang = englishVoice.lang;\n    } else {\n      utterance.lang = 'en-US';\n    }\n    utterance.rate = 0.9;\n    utterance.pitch = 1.1; // Slightly higher pitch for clarity\n\n    utterance.onend = () => resolve();\n    utterance.onerror = error => reject(error);\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Stop all audio playback\nexport const stopAllAudio = () => {\n  if (isSpeechSupported()) {\n    window.speechSynthesis.cancel();\n  }\n};\n\n// Preload voices (call this when app starts)\nexport const preloadVoices = () => {\n  if (isSpeechSupported()) {\n    // Force browser to load voices\n    window.speechSynthesis.getVoices();\n  }\n};\n\n// Audio playback with visual feedback\nexport const playAudioWithFeedback = async (text, type = 'general', options = {}) => {\n  try {\n    // Add visual feedback class to body or specific element\n    document.body.classList.add('audio-playing');\n    await speakKorean(text, options);\n    return Promise.resolve();\n  } catch (error) {\n    console.error(`Error playing ${type} audio:`, error);\n    return Promise.reject(error);\n  } finally {\n    // Remove visual feedback\n    document.body.classList.remove('audio-playing');\n  }\n};","map":{"version":3,"names":["audioCache","Map","isSpeechSupported","window","getKoreanVoices","voices","speechSynthesis","getVoices","filter","voice","lang","startsWith","name","toLowerCase","includes","speakKorean","text","options","console","warn","Promise","reject","Error","cancel","resolve","utterance","SpeechSynthesisUtterance","koreanVoices","rate","pitch","volume","length","onend","onerror","error","onstart","onStart","speak","playLetterSound","letter","koreanLetter","log","textToSpeak","repeat","onError","playSyllableSound","syllable","consonant","vowel","final","playWordSound","word","korean","romanization","playPronunciationGuide","englishSound","englishVoice","find","stopAllAudio","preloadVoices","playAudioWithFeedback","type","document","body","classList","add","remove"],"sources":["/Users/gabortabi/DEV/learnKorean/src/utils/audioUtils.js"],"sourcesContent":["/**\n * Audio utilities for Korean learning app\n * Provides functions for playing sounds for letters, syllables, and words\n */\n\n// Audio cache to avoid reloading sounds\nconst audioCache = new Map();\n\n// Check if browser supports speech synthesis\nexport const isSpeechSupported = () => {\n  return 'speechSynthesis' in window;\n};\n\n// Get available Korean voices\nexport const getKoreanVoices = () => {\n  if (!isSpeechSupported()) return [];\n\n  const voices = window.speechSynthesis.getVoices();\n  return voices.filter(voice =>\n    voice.lang.startsWith('ko') ||\n    voice.name.toLowerCase().includes('korean') ||\n    voice.name.toLowerCase().includes('korea')\n  );\n};\n\n// Play Korean text using speech synthesis\nexport const speakKorean = (text, options = {}) => {\n  if (!isSpeechSupported()) {\n    console.warn('Speech synthesis not supported in this browser');\n    return Promise.reject(new Error('Speech synthesis not supported'));\n  }\n\n  // Cancel any ongoing speech\n  window.speechSynthesis.cancel();\n\n  return new Promise((resolve, reject) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    const koreanVoices = getKoreanVoices();\n\n    // Configure audio options\n    utterance.rate = options.rate || 0.8; // Slightly slower for clarity\n    utterance.pitch = options.pitch || 1;\n    utterance.volume = options.volume || 0.8;\n\n    if (koreanVoices.length > 0) {\n      utterance.voice = koreanVoices[0];\n      utterance.lang = utterance.voice.lang;\n    } else {\n      // Fallback to Korean locale\n      utterance.lang = 'ko-KR';\n    }\n\n    // Handle speech events\n    utterance.onend = () => resolve();\n    utterance.onerror = (error) => reject(error);\n    utterance.onstart = options.onStart || null;\n\n    // Speak the text\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Play individual letter sound\nexport const playLetterSound = (letter) => {\n  if (!letter || !letter.koreanLetter) {\n    console.warn('Invalid letter provided for audio playback');\n    return Promise.reject(new Error('Invalid letter'));\n  }\n\n  console.log('Playing letter sound for:', letter.koreanLetter, 'Name:', letter.name);\n\n  // For single letters, repeat them for clarity\n  const textToSpeak = letter.koreanLetter.repeat(2);\n\n  // Enhanced Korean character handling\n  return speakKorean(textToSpeak, {\n    rate: 0.5, // Even slower for individual letters\n    pitch: 1.2, // Slightly higher pitch for clarity\n    onStart: () => {\n      console.log(`Playing sound for letter: ${letter.name} (${letter.koreanLetter})`);\n    },\n    onError: (error) => {\n      console.error(`Error playing letter ${letter.name}:`, error);\n    }\n  });\n};\n\n// Play syllable sound\nexport const playSyllableSound = (syllable) => {\n  if (!syllable) {\n    console.warn('Invalid syllable provided for audio playback');\n    return Promise.reject(new Error('Invalid syllable'));\n  }\n\n  // Use the syllable text if available, otherwise construct from components\n  const textToSpeak = syllable.syllable || syllable.text ||\n    (syllable.consonant && syllable.vowel ?\n      syllable.consonant + syllable.vowel + (syllable.final || '') : '');\n\n  if (!textToSpeak) {\n    console.warn('No text found for syllable audio playback');\n    return Promise.reject(new Error('No text for syllable'));\n  }\n\n  return speakKorean(textToSpeak, {\n    rate: 0.7,\n    onStart: () => console.log(`Playing sound for syllable: ${textToSpeak}`)\n  });\n};\n\n// Play word sound\nexport const playWordSound = (word) => {\n  if (!word) {\n    console.warn('Invalid word provided for audio playback');\n    return Promise.reject(new Error('Invalid word'));\n  }\n\n  // Use Korean text if available, otherwise fall back to romanization\n  const textToSpeak = word.korean || word.text || word.romanization || '';\n\n  if (!textToSpeak) {\n    console.warn('No text found for word audio playback');\n    return Promise.reject(new Error('No text for word'));\n  }\n\n  return speakKorean(textToSpeak, {\n    rate: 0.8,\n    onStart: () => console.log(`Playing sound for word: ${textToSpeak}`)\n  });\n};\n\n// Play pronunciation guide (English sound description)\nexport const playPronunciationGuide = (letter) => {\n  if (!letter || !letter.englishSound) {\n    console.warn('Invalid letter or missing pronunciation guide');\n    return Promise.reject(new Error('Invalid letter or missing pronunciation'));\n  }\n\n  // Use Web Speech API with English voice for pronunciation guide\n  if (!isSpeechSupported()) {\n    console.warn('Speech synthesis not supported');\n    return Promise.reject(new Error('Speech synthesis not supported'));\n  }\n\n  window.speechSynthesis.cancel();\n\n  return new Promise((resolve, reject) => {\n    const utterance = new SpeechSynthesisUtterance(letter.englishSound);\n\n    // Use English voice for pronunciation guide\n    const voices = window.speechSynthesis.getVoices();\n    const englishVoice = voices.find(voice =>\n      voice.lang.startsWith('en') &&\n      (voice.name.toLowerCase().includes('female') || voice.name.toLowerCase().includes('woman'))\n    ) || voices.find(voice => voice.lang.startsWith('en'));\n\n    if (englishVoice) {\n      utterance.voice = englishVoice;\n      utterance.lang = englishVoice.lang;\n    } else {\n      utterance.lang = 'en-US';\n    }\n\n    utterance.rate = 0.9;\n    utterance.pitch = 1.1; // Slightly higher pitch for clarity\n\n    utterance.onend = () => resolve();\n    utterance.onerror = (error) => reject(error);\n\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Stop all audio playback\nexport const stopAllAudio = () => {\n  if (isSpeechSupported()) {\n    window.speechSynthesis.cancel();\n  }\n};\n\n// Preload voices (call this when app starts)\nexport const preloadVoices = () => {\n  if (isSpeechSupported()) {\n    // Force browser to load voices\n    window.speechSynthesis.getVoices();\n  }\n};\n\n// Audio playback with visual feedback\nexport const playAudioWithFeedback = async (text, type = 'general', options = {}) => {\n  try {\n    // Add visual feedback class to body or specific element\n    document.body.classList.add('audio-playing');\n\n    await speakKorean(text, options);\n\n    return Promise.resolve();\n  } catch (error) {\n    console.error(`Error playing ${type} audio:`, error);\n    return Promise.reject(error);\n  } finally {\n    // Remove visual feedback\n    document.body.classList.remove('audio-playing');\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}