{"ast":null,"code":"/**\n * Audio utilities for Korean learning app\n * Provides functions for playing sounds for letters, syllables, and words\n */\n\n// Audio cache to avoid reloading sounds\nconst audioCache = new Map();\n\n// Korean character compatibility database\n// Some Korean characters have poor browser support, so we provide alternatives\nconst koreanCharacterSupport = {\n  // Problematic characters that need special handling\n  'ㅑ': {\n    primary: 'ㅑ',\n    fallbacks: ['ya', 'yah', '야'],\n    // Romanization and full syllable fallbacks\n    support: 'limited' // Known to have issues in many browsers\n  },\n  'ㅛ': {\n    primary: 'ㅛ',\n    fallbacks: ['yo', 'yoh', '요'],\n    support: 'limited'\n  },\n  'ㅠ': {\n    primary: 'ㅠ',\n    fallbacks: ['yu', 'yoo', '유'],\n    support: 'limited'\n  },\n  'ㅖ': {\n    primary: 'ㅖ',\n    fallbacks: ['ye', 'yeh', '예'],\n    support: 'limited'\n  },\n  'ㅘ': {\n    primary: 'ㅘ',\n    fallbacks: ['wa', 'wah', '와'],\n    support: 'limited'\n  },\n  'ㅚ': {\n    primary: 'ㅚ',\n    fallbacks: ['we', 'weh', '외'],\n    support: 'limited'\n  },\n  'ㅝ': {\n    primary: 'ㅝ',\n    fallbacks: ['wo', 'wah', '워'],\n    support: 'limited'\n  },\n  'ㅟ': {\n    primary: 'ㅟ',\n    fallbacks: ['wi', 'wee', '위'],\n    support: 'limited'\n  },\n  'ㅢ': {\n    primary: 'ㅢ',\n    fallbacks: ['ui', 'ee', '의'],\n    support: 'limited'\n  },\n  // Additional characters that might need fallbacks\n  'ㄸ': {\n    primary: 'ㄸ',\n    fallbacks: ['tt', 'dd', '따'],\n    support: 'limited'\n  },\n  'ㅃ': {\n    primary: 'ㅃ',\n    fallbacks: ['pp', 'bb', '빠'],\n    support: 'limited'\n  },\n  'ㅉ': {\n    primary: 'ㅉ',\n    fallbacks: ['jj', 'zz', '짜'],\n    support: 'limited'\n  },\n  'ㄲ': {\n    primary: 'ㄲ',\n    fallbacks: ['kk', 'gg', '까'],\n    support: 'limited'\n  },\n  'ㅆ': {\n    primary: 'ㅆ',\n    fallbacks: ['ss', '싸'],\n    support: 'limited'\n  },\n  'ㄹ': {\n    primary: 'ㄹ',\n    fallbacks: ['r', 'l', '라'],\n    support: 'limited'\n  }\n};\n\n// Build comprehensive database from koreanAlphabetData\nexport const buildKoreanCharacterDatabase = () => {\n  const database = {};\n\n  // This would be populated from the actual alphabet data\n  // For now, we'll use the manual database above\n\n  return database;\n};\n\n// Check if a Korean character needs special handling\nexport const getKoreanCharacterSupport = character => {\n  return koreanCharacterSupport[character] || {\n    primary: character,\n    fallbacks: [],\n    support: 'good'\n  };\n};\n\n// Check if browser supports speech synthesis\nexport const isSpeechSupported = () => {\n  return 'speechSynthesis' in window;\n};\n\n// Get available Korean voices\nexport const getKoreanVoices = () => {\n  if (!isSpeechSupported()) return [];\n  const voices = window.speechSynthesis.getVoices();\n  return voices.filter(voice => voice.lang.startsWith('ko') || voice.name.toLowerCase().includes('korean') || voice.name.toLowerCase().includes('korea'));\n};\n\n// Play Korean text using speech synthesis\nexport const speakKorean = (text, options = {}) => {\n  if (!isSpeechSupported()) {\n    console.warn('Speech synthesis not supported in this browser');\n    return Promise.reject(new Error('Speech synthesis not supported'));\n  }\n  if (!text || text.trim() === '') {\n    console.warn('Empty text provided for speech synthesis');\n    return Promise.reject(new Error('Empty text'));\n  }\n  console.log('Attempting to speak Korean text:', text);\n\n  // Cancel any ongoing speech\n  window.speechSynthesis.cancel();\n  return new Promise((resolve, reject) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    const koreanVoices = getKoreanVoices();\n\n    // Configure audio options with enhanced settings for Korean\n    utterance.rate = options.rate || 0.7; // Slower for Korean characters\n    utterance.pitch = options.pitch || 1;\n    utterance.volume = options.volume || 0.9;\n    if (koreanVoices.length > 0) {\n      utterance.voice = koreanVoices[0];\n      utterance.lang = utterance.voice.lang;\n      console.log('Using Korean voice:', utterance.voice.name);\n    } else {\n      // Fallback to Korean locale\n      utterance.lang = 'ko-KR';\n      console.log('No Korean voice found, using ko-KR locale');\n    }\n\n    // Enhanced error handling\n    utterance.onend = () => {\n      console.log('Speech synthesis completed successfully');\n      resolve();\n    };\n    utterance.onerror = error => {\n      var _utterance$voice;\n      console.error('Speech synthesis error:', error);\n      console.error('Error details:', {\n        text: text,\n        voice: (_utterance$voice = utterance.voice) === null || _utterance$voice === void 0 ? void 0 : _utterance$voice.name,\n        lang: utterance.lang,\n        rate: utterance.rate,\n        pitch: utterance.pitch,\n        volume: utterance.volume\n      });\n\n      // Try fallback with English voice if Korean fails\n      if (utterance.lang.startsWith('ko') && error.error !== 'canceled') {\n        console.log('Attempting fallback with English voice');\n        return fallbackToEnglish(text, options).then(resolve).catch(reject);\n      }\n      reject(error);\n    };\n    utterance.onstart = () => {\n      console.log('Speech synthesis started for:', text);\n      if (options.onStart) options.onStart();\n    };\n\n    // Speak the text\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Fallback function to use English voice when Korean voice fails\nconst fallbackToEnglish = (text, options) => {\n  return new Promise((resolve, reject) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n\n    // Use English voice for fallback\n    const voices = window.speechSynthesis.getVoices();\n    const englishVoice = voices.find(voice => voice.lang.startsWith('en'));\n    if (englishVoice) {\n      utterance.voice = englishVoice;\n      utterance.lang = englishVoice.lang;\n    } else {\n      utterance.lang = 'en-US';\n    }\n    utterance.rate = 0.8;\n    utterance.pitch = 1.1;\n    utterance.onend = () => resolve();\n    utterance.onerror = error => reject(error);\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Play individual letter sound with enhanced Korean support\nexport const playLetterSound = async letter => {\n  if (!letter || !letter.koreanLetter) {\n    console.warn('Invalid letter provided for audio playback');\n    return Promise.reject(new Error('Invalid letter'));\n  }\n  console.log('Playing letter sound for:', letter.koreanLetter, 'Name:', letter.name);\n  const charSupport = getKoreanCharacterSupport(letter.koreanLetter);\n\n  // Try different approaches based on character support level\n  if (charSupport.support === 'limited') {\n    console.log(`Character ${letter.koreanLetter} has limited support, using fallback methods`);\n    return playLetterSoundWithFallback(letter, charSupport);\n  }\n\n  // For single letters, repeat them for clarity\n  const textToSpeak = letter.koreanLetter.repeat(2);\n  try {\n    // Enhanced Korean character handling\n    await speakKorean(textToSpeak, {\n      rate: 0.5,\n      // Even slower for individual letters\n      pitch: 1.2,\n      // Slightly higher pitch for clarity\n      onStart: () => {\n        console.log(`Playing sound for letter: ${letter.name} (${letter.koreanLetter})`);\n      }\n    });\n  } catch (error) {\n    console.error(`Error playing letter ${letter.name}:`, error);\n\n    // Try fallback methods\n    return playLetterSoundWithFallback(letter, charSupport);\n  }\n};\n\n// Enhanced fallback system for problematic Korean characters\nconst playLetterSoundWithFallback = async (letter, charSupport) => {\n  const attempts = [\n  // Try primary Korean character with different settings\n  {\n    text: letter.koreanLetter.repeat(3),\n    lang: 'ko-KR',\n    rate: 0.3\n  },\n  // Try romanization if available\n  ...(letter.romanization ? [{\n    text: letter.romanization,\n    lang: 'en-US',\n    rate: 0.6\n  }] : []),\n  // Try fallback pronunciations from database\n  ...charSupport.fallbacks.map(fallback => ({\n    text: fallback,\n    lang: fallback.length === 1 ? 'ko-KR' : 'en-US',\n    rate: 0.6\n  })),\n  // Try with English description\n  ...(letter.englishSound ? [{\n    text: letter.englishSound,\n    lang: 'en-US',\n    rate: 0.7\n  }] : [])];\n  for (let i = 0; i < attempts.length; i++) {\n    const attempt = attempts[i];\n    console.log(`Attempting fallback ${i + 1}/${attempts.length}: \"${attempt.text}\" with lang: ${attempt.lang}`);\n    try {\n      await speakKorean(attempt.text, {\n        rate: attempt.rate,\n        pitch: 1.1,\n        onStart: () => {\n          console.log(`Fallback successful for letter: ${letter.name} using \"${attempt.text}\"`);\n        }\n      });\n      return; // Success, exit the function\n    } catch (error) {\n      console.log(`Fallback attempt ${i + 1} failed:`, error);\n      if (i === attempts.length - 1) {\n        throw new Error(`All fallback attempts failed for Korean character: ${letter.koreanLetter}`);\n      }\n    }\n  }\n};\n\n// Play syllable sound\nexport const playSyllableSound = syllable => {\n  if (!syllable) {\n    console.warn('Invalid syllable provided for audio playback');\n    return Promise.reject(new Error('Invalid syllable'));\n  }\n\n  // Use the syllable text if available, otherwise construct from components\n  const textToSpeak = syllable.syllable || syllable.text || (syllable.consonant && syllable.vowel ? syllable.consonant + syllable.vowel + (syllable.final || '') : '');\n  if (!textToSpeak) {\n    console.warn('No text found for syllable audio playback');\n    return Promise.reject(new Error('No text for syllable'));\n  }\n  return speakKorean(textToSpeak, {\n    rate: 0.7,\n    onStart: () => console.log(`Playing sound for syllable: ${textToSpeak}`)\n  });\n};\n\n// Play word sound\nexport const playWordSound = word => {\n  if (!word) {\n    console.warn('Invalid word provided for audio playback');\n    return Promise.reject(new Error('Invalid word'));\n  }\n\n  // Use Korean text if available, otherwise fall back to romanization\n  const textToSpeak = word.korean || word.text || word.romanization || '';\n  if (!textToSpeak) {\n    console.warn('No text found for word audio playback');\n    return Promise.reject(new Error('No text for word'));\n  }\n  return speakKorean(textToSpeak, {\n    rate: 0.8,\n    onStart: () => console.log(`Playing sound for word: ${textToSpeak}`)\n  });\n};\n\n// Play pronunciation guide (English sound description)\nexport const playPronunciationGuide = letter => {\n  if (!letter || !letter.englishSound) {\n    console.warn('Invalid letter or missing pronunciation guide');\n    return Promise.reject(new Error('Invalid letter or missing pronunciation'));\n  }\n\n  // Use Web Speech API with English voice for pronunciation guide\n  if (!isSpeechSupported()) {\n    console.warn('Speech synthesis not supported');\n    return Promise.reject(new Error('Speech synthesis not supported'));\n  }\n  window.speechSynthesis.cancel();\n  return new Promise((resolve, reject) => {\n    const utterance = new SpeechSynthesisUtterance(letter.englishSound);\n\n    // Use English voice for pronunciation guide\n    const voices = window.speechSynthesis.getVoices();\n    const englishVoice = voices.find(voice => voice.lang.startsWith('en') && (voice.name.toLowerCase().includes('female') || voice.name.toLowerCase().includes('woman'))) || voices.find(voice => voice.lang.startsWith('en'));\n    if (englishVoice) {\n      utterance.voice = englishVoice;\n      utterance.lang = englishVoice.lang;\n    } else {\n      utterance.lang = 'en-US';\n    }\n    utterance.rate = 0.9;\n    utterance.pitch = 1.1; // Slightly higher pitch for clarity\n\n    utterance.onend = () => resolve();\n    utterance.onerror = error => reject(error);\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Stop all audio playback\nexport const stopAllAudio = () => {\n  if (isSpeechSupported()) {\n    window.speechSynthesis.cancel();\n  }\n};\n\n// Preload voices (call this when app starts)\nexport const preloadVoices = () => {\n  if (isSpeechSupported()) {\n    // Force browser to load voices\n    window.speechSynthesis.getVoices();\n  }\n};\n\n// Debug function to test Korean character pronunciation\nexport const testKoreanCharacter = character => {\n  console.log('Testing Korean character:', character);\n  console.log('Character code:', character.charCodeAt(0));\n  console.log('Character hex:', character.charCodeAt(0).toString(16));\n\n  // Try to speak the character\n  return speakKorean(character, {\n    rate: 0.3,\n    onStart: () => console.log('Started speaking character'),\n    onError: error => console.log('Error speaking character:', error)\n  });\n};\n\n// Audio playback with visual feedback\nexport const playAudioWithFeedback = async (text, type = 'general', options = {}) => {\n  try {\n    // Add visual feedback class to body or specific element\n    document.body.classList.add('audio-playing');\n    await speakKorean(text, options);\n    return Promise.resolve();\n  } catch (error) {\n    console.error(`Error playing ${type} audio:`, error);\n    return Promise.reject(error);\n  } finally {\n    // Remove visual feedback\n    document.body.classList.remove('audio-playing');\n  }\n};","map":{"version":3,"names":["audioCache","Map","koreanCharacterSupport","primary","fallbacks","support","buildKoreanCharacterDatabase","database","getKoreanCharacterSupport","character","isSpeechSupported","window","getKoreanVoices","voices","speechSynthesis","getVoices","filter","voice","lang","startsWith","name","toLowerCase","includes","speakKorean","text","options","console","warn","Promise","reject","Error","trim","log","cancel","resolve","utterance","SpeechSynthesisUtterance","koreanVoices","rate","pitch","volume","length","onend","onerror","error","_utterance$voice","fallbackToEnglish","then","catch","onstart","onStart","speak","englishVoice","find","playLetterSound","letter","koreanLetter","charSupport","playLetterSoundWithFallback","textToSpeak","repeat","attempts","romanization","map","fallback","englishSound","i","attempt","playSyllableSound","syllable","consonant","vowel","final","playWordSound","word","korean","playPronunciationGuide","stopAllAudio","preloadVoices","testKoreanCharacter","charCodeAt","toString","onError","playAudioWithFeedback","type","document","body","classList","add","remove"],"sources":["/Users/gabortabi/DEV/learnKorean/src/utils/audioUtils.js"],"sourcesContent":["/**\n * Audio utilities for Korean learning app\n * Provides functions for playing sounds for letters, syllables, and words\n */\n\n// Audio cache to avoid reloading sounds\nconst audioCache = new Map();\n\n// Korean character compatibility database\n// Some Korean characters have poor browser support, so we provide alternatives\nconst koreanCharacterSupport = {\n  // Problematic characters that need special handling\n  'ㅑ': {\n    primary: 'ㅑ',\n    fallbacks: ['ya', 'yah', '야'], // Romanization and full syllable fallbacks\n    support: 'limited' // Known to have issues in many browsers\n  },\n  'ㅛ': {\n    primary: 'ㅛ',\n    fallbacks: ['yo', 'yoh', '요'],\n    support: 'limited'\n  },\n  'ㅠ': {\n    primary: 'ㅠ',\n    fallbacks: ['yu', 'yoo', '유'],\n    support: 'limited'\n  },\n  'ㅖ': {\n    primary: 'ㅖ',\n    fallbacks: ['ye', 'yeh', '예'],\n    support: 'limited'\n  },\n  'ㅘ': {\n    primary: 'ㅘ',\n    fallbacks: ['wa', 'wah', '와'],\n    support: 'limited'\n  },\n  'ㅚ': {\n    primary: 'ㅚ',\n    fallbacks: ['we', 'weh', '외'],\n    support: 'limited'\n  },\n  'ㅝ': {\n    primary: 'ㅝ',\n    fallbacks: ['wo', 'wah', '워'],\n    support: 'limited'\n  },\n  'ㅟ': {\n    primary: 'ㅟ',\n    fallbacks: ['wi', 'wee', '위'],\n    support: 'limited'\n  },\n  'ㅢ': {\n    primary: 'ㅢ',\n    fallbacks: ['ui', 'ee', '의'],\n    support: 'limited'\n  },\n\n  // Additional characters that might need fallbacks\n  'ㄸ': {\n    primary: 'ㄸ',\n    fallbacks: ['tt', 'dd', '따'],\n    support: 'limited'\n  },\n  'ㅃ': {\n    primary: 'ㅃ',\n    fallbacks: ['pp', 'bb', '빠'],\n    support: 'limited'\n  },\n  'ㅉ': {\n    primary: 'ㅉ',\n    fallbacks: ['jj', 'zz', '짜'],\n    support: 'limited'\n  },\n  'ㄲ': {\n    primary: 'ㄲ',\n    fallbacks: ['kk', 'gg', '까'],\n    support: 'limited'\n  },\n  'ㅆ': {\n    primary: 'ㅆ',\n    fallbacks: ['ss', '싸'],\n    support: 'limited'\n  },\n  'ㄹ': {\n    primary: 'ㄹ',\n    fallbacks: ['r', 'l', '라'],\n    support: 'limited'\n  }\n};\n\n// Build comprehensive database from koreanAlphabetData\nexport const buildKoreanCharacterDatabase = () => {\n  const database = {};\n\n  // This would be populated from the actual alphabet data\n  // For now, we'll use the manual database above\n\n  return database;\n};\n\n// Check if a Korean character needs special handling\nexport const getKoreanCharacterSupport = (character) => {\n  return koreanCharacterSupport[character] || {\n    primary: character,\n    fallbacks: [],\n    support: 'good'\n  };\n};\n\n// Check if browser supports speech synthesis\nexport const isSpeechSupported = () => {\n  return 'speechSynthesis' in window;\n};\n\n// Get available Korean voices\nexport const getKoreanVoices = () => {\n  if (!isSpeechSupported()) return [];\n\n  const voices = window.speechSynthesis.getVoices();\n  return voices.filter(voice =>\n    voice.lang.startsWith('ko') ||\n    voice.name.toLowerCase().includes('korean') ||\n    voice.name.toLowerCase().includes('korea')\n  );\n};\n\n// Play Korean text using speech synthesis\nexport const speakKorean = (text, options = {}) => {\n  if (!isSpeechSupported()) {\n    console.warn('Speech synthesis not supported in this browser');\n    return Promise.reject(new Error('Speech synthesis not supported'));\n  }\n\n  if (!text || text.trim() === '') {\n    console.warn('Empty text provided for speech synthesis');\n    return Promise.reject(new Error('Empty text'));\n  }\n\n  console.log('Attempting to speak Korean text:', text);\n\n  // Cancel any ongoing speech\n  window.speechSynthesis.cancel();\n\n  return new Promise((resolve, reject) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    const koreanVoices = getKoreanVoices();\n\n    // Configure audio options with enhanced settings for Korean\n    utterance.rate = options.rate || 0.7; // Slower for Korean characters\n    utterance.pitch = options.pitch || 1;\n    utterance.volume = options.volume || 0.9;\n\n    if (koreanVoices.length > 0) {\n      utterance.voice = koreanVoices[0];\n      utterance.lang = utterance.voice.lang;\n      console.log('Using Korean voice:', utterance.voice.name);\n    } else {\n      // Fallback to Korean locale\n      utterance.lang = 'ko-KR';\n      console.log('No Korean voice found, using ko-KR locale');\n    }\n\n    // Enhanced error handling\n    utterance.onend = () => {\n      console.log('Speech synthesis completed successfully');\n      resolve();\n    };\n\n    utterance.onerror = (error) => {\n      console.error('Speech synthesis error:', error);\n      console.error('Error details:', {\n        text: text,\n        voice: utterance.voice?.name,\n        lang: utterance.lang,\n        rate: utterance.rate,\n        pitch: utterance.pitch,\n        volume: utterance.volume\n      });\n\n      // Try fallback with English voice if Korean fails\n      if (utterance.lang.startsWith('ko') && error.error !== 'canceled') {\n        console.log('Attempting fallback with English voice');\n        return fallbackToEnglish(text, options).then(resolve).catch(reject);\n      }\n\n      reject(error);\n    };\n\n    utterance.onstart = () => {\n      console.log('Speech synthesis started for:', text);\n      if (options.onStart) options.onStart();\n    };\n\n    // Speak the text\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Fallback function to use English voice when Korean voice fails\nconst fallbackToEnglish = (text, options) => {\n  return new Promise((resolve, reject) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n\n    // Use English voice for fallback\n    const voices = window.speechSynthesis.getVoices();\n    const englishVoice = voices.find(voice => voice.lang.startsWith('en'));\n\n    if (englishVoice) {\n      utterance.voice = englishVoice;\n      utterance.lang = englishVoice.lang;\n    } else {\n      utterance.lang = 'en-US';\n    }\n\n    utterance.rate = 0.8;\n    utterance.pitch = 1.1;\n\n    utterance.onend = () => resolve();\n    utterance.onerror = (error) => reject(error);\n\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Play individual letter sound with enhanced Korean support\nexport const playLetterSound = async (letter) => {\n  if (!letter || !letter.koreanLetter) {\n    console.warn('Invalid letter provided for audio playback');\n    return Promise.reject(new Error('Invalid letter'));\n  }\n\n  console.log('Playing letter sound for:', letter.koreanLetter, 'Name:', letter.name);\n\n  const charSupport = getKoreanCharacterSupport(letter.koreanLetter);\n\n  // Try different approaches based on character support level\n  if (charSupport.support === 'limited') {\n    console.log(`Character ${letter.koreanLetter} has limited support, using fallback methods`);\n    return playLetterSoundWithFallback(letter, charSupport);\n  }\n\n  // For single letters, repeat them for clarity\n  const textToSpeak = letter.koreanLetter.repeat(2);\n\n  try {\n    // Enhanced Korean character handling\n    await speakKorean(textToSpeak, {\n      rate: 0.5, // Even slower for individual letters\n      pitch: 1.2, // Slightly higher pitch for clarity\n      onStart: () => {\n        console.log(`Playing sound for letter: ${letter.name} (${letter.koreanLetter})`);\n      }\n    });\n  } catch (error) {\n    console.error(`Error playing letter ${letter.name}:`, error);\n\n    // Try fallback methods\n    return playLetterSoundWithFallback(letter, charSupport);\n  }\n};\n\n// Enhanced fallback system for problematic Korean characters\nconst playLetterSoundWithFallback = async (letter, charSupport) => {\n  const attempts = [\n    // Try primary Korean character with different settings\n    { text: letter.koreanLetter.repeat(3), lang: 'ko-KR', rate: 0.3 },\n\n    // Try romanization if available\n    ...(letter.romanization ? [{ text: letter.romanization, lang: 'en-US', rate: 0.6 }] : []),\n\n    // Try fallback pronunciations from database\n    ...charSupport.fallbacks.map(fallback => ({\n      text: fallback,\n      lang: fallback.length === 1 ? 'ko-KR' : 'en-US',\n      rate: 0.6\n    })),\n\n    // Try with English description\n    ...(letter.englishSound ? [{ text: letter.englishSound, lang: 'en-US', rate: 0.7 }] : [])\n  ];\n\n  for (let i = 0; i < attempts.length; i++) {\n    const attempt = attempts[i];\n    console.log(`Attempting fallback ${i + 1}/${attempts.length}: \"${attempt.text}\" with lang: ${attempt.lang}`);\n\n    try {\n      await speakKorean(attempt.text, {\n        rate: attempt.rate,\n        pitch: 1.1,\n        onStart: () => {\n          console.log(`Fallback successful for letter: ${letter.name} using \"${attempt.text}\"`);\n        }\n      });\n      return; // Success, exit the function\n    } catch (error) {\n      console.log(`Fallback attempt ${i + 1} failed:`, error);\n      if (i === attempts.length - 1) {\n        throw new Error(`All fallback attempts failed for Korean character: ${letter.koreanLetter}`);\n      }\n    }\n  }\n};\n\n// Play syllable sound\nexport const playSyllableSound = (syllable) => {\n  if (!syllable) {\n    console.warn('Invalid syllable provided for audio playback');\n    return Promise.reject(new Error('Invalid syllable'));\n  }\n\n  // Use the syllable text if available, otherwise construct from components\n  const textToSpeak = syllable.syllable || syllable.text ||\n    (syllable.consonant && syllable.vowel ?\n      syllable.consonant + syllable.vowel + (syllable.final || '') : '');\n\n  if (!textToSpeak) {\n    console.warn('No text found for syllable audio playback');\n    return Promise.reject(new Error('No text for syllable'));\n  }\n\n  return speakKorean(textToSpeak, {\n    rate: 0.7,\n    onStart: () => console.log(`Playing sound for syllable: ${textToSpeak}`)\n  });\n};\n\n// Play word sound\nexport const playWordSound = (word) => {\n  if (!word) {\n    console.warn('Invalid word provided for audio playback');\n    return Promise.reject(new Error('Invalid word'));\n  }\n\n  // Use Korean text if available, otherwise fall back to romanization\n  const textToSpeak = word.korean || word.text || word.romanization || '';\n\n  if (!textToSpeak) {\n    console.warn('No text found for word audio playback');\n    return Promise.reject(new Error('No text for word'));\n  }\n\n  return speakKorean(textToSpeak, {\n    rate: 0.8,\n    onStart: () => console.log(`Playing sound for word: ${textToSpeak}`)\n  });\n};\n\n// Play pronunciation guide (English sound description)\nexport const playPronunciationGuide = (letter) => {\n  if (!letter || !letter.englishSound) {\n    console.warn('Invalid letter or missing pronunciation guide');\n    return Promise.reject(new Error('Invalid letter or missing pronunciation'));\n  }\n\n  // Use Web Speech API with English voice for pronunciation guide\n  if (!isSpeechSupported()) {\n    console.warn('Speech synthesis not supported');\n    return Promise.reject(new Error('Speech synthesis not supported'));\n  }\n\n  window.speechSynthesis.cancel();\n\n  return new Promise((resolve, reject) => {\n    const utterance = new SpeechSynthesisUtterance(letter.englishSound);\n\n    // Use English voice for pronunciation guide\n    const voices = window.speechSynthesis.getVoices();\n    const englishVoice = voices.find(voice =>\n      voice.lang.startsWith('en') &&\n      (voice.name.toLowerCase().includes('female') || voice.name.toLowerCase().includes('woman'))\n    ) || voices.find(voice => voice.lang.startsWith('en'));\n\n    if (englishVoice) {\n      utterance.voice = englishVoice;\n      utterance.lang = englishVoice.lang;\n    } else {\n      utterance.lang = 'en-US';\n    }\n\n    utterance.rate = 0.9;\n    utterance.pitch = 1.1; // Slightly higher pitch for clarity\n\n    utterance.onend = () => resolve();\n    utterance.onerror = (error) => reject(error);\n\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Stop all audio playback\nexport const stopAllAudio = () => {\n  if (isSpeechSupported()) {\n    window.speechSynthesis.cancel();\n  }\n};\n\n// Preload voices (call this when app starts)\nexport const preloadVoices = () => {\n  if (isSpeechSupported()) {\n    // Force browser to load voices\n    window.speechSynthesis.getVoices();\n  }\n};\n\n// Debug function to test Korean character pronunciation\nexport const testKoreanCharacter = (character) => {\n  console.log('Testing Korean character:', character);\n  console.log('Character code:', character.charCodeAt(0));\n  console.log('Character hex:', character.charCodeAt(0).toString(16));\n\n  // Try to speak the character\n  return speakKorean(character, {\n    rate: 0.3,\n    onStart: () => console.log('Started speaking character'),\n    onError: (error) => console.log('Error speaking character:', error)\n  });\n};\n\n// Audio playback with visual feedback\nexport const playAudioWithFeedback = async (text, type = 'general', options = {}) => {\n  try {\n    // Add visual feedback class to body or specific element\n    document.body.classList.add('audio-playing');\n\n    await speakKorean(text, options);\n\n    return Promise.resolve();\n  } catch (error) {\n    console.error(`Error playing ${type} audio:`, error);\n    return Promise.reject(error);\n  } finally {\n    // Remove visual feedback\n    document.body.classList.remove('audio-playing');\n  }\n};"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;;AAE5B;AACA;AACA,MAAMC,sBAAsB,GAAG;EAC7B;EACA,GAAG,EAAE;IACHC,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;IAAE;IAC/BC,OAAO,EAAE,SAAS,CAAC;EACrB,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;IAC5BC,OAAO,EAAE;EACX,CAAC;EAED;EACA,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;IAC5BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;IAC5BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;IAC5BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;IAC5BC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IACtBC,OAAO,EAAE;EACX,CAAC;EACD,GAAG,EAAE;IACHF,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC1BC,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,4BAA4B,GAAGA,CAAA,KAAM;EAChD,MAAMC,QAAQ,GAAG,CAAC,CAAC;;EAEnB;EACA;;EAEA,OAAOA,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMC,yBAAyB,GAAIC,SAAS,IAAK;EACtD,OAAOP,sBAAsB,CAACO,SAAS,CAAC,IAAI;IAC1CN,OAAO,EAAEM,SAAS;IAClBL,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE;EACX,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAGA,CAAA,KAAM;EACrC,OAAO,iBAAiB,IAAIC,MAAM;AACpC,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,IAAI,CAACF,iBAAiB,CAAC,CAAC,EAAE,OAAO,EAAE;EAEnC,MAAMG,MAAM,GAAGF,MAAM,CAACG,eAAe,CAACC,SAAS,CAAC,CAAC;EACjD,OAAOF,MAAM,CAACG,MAAM,CAACC,KAAK,IACxBA,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,IAAI,CAAC,IAC3BF,KAAK,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAC3CL,KAAK,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAC3C,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACjD,IAAI,CAACf,iBAAiB,CAAC,CAAC,EAAE;IACxBgB,OAAO,CAACC,IAAI,CAAC,gDAAgD,CAAC;IAC9D,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,gCAAgC,CAAC,CAAC;EACpE;EAEA,IAAI,CAACN,IAAI,IAAIA,IAAI,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC/BL,OAAO,CAACC,IAAI,CAAC,0CAA0C,CAAC;IACxD,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,YAAY,CAAC,CAAC;EAChD;EAEAJ,OAAO,CAACM,GAAG,CAAC,kCAAkC,EAAER,IAAI,CAAC;;EAErD;EACAb,MAAM,CAACG,eAAe,CAACmB,MAAM,CAAC,CAAC;EAE/B,OAAO,IAAIL,OAAO,CAAC,CAACM,OAAO,EAAEL,MAAM,KAAK;IACtC,MAAMM,SAAS,GAAG,IAAIC,wBAAwB,CAACZ,IAAI,CAAC;IACpD,MAAMa,YAAY,GAAGzB,eAAe,CAAC,CAAC;;IAEtC;IACAuB,SAAS,CAACG,IAAI,GAAGb,OAAO,CAACa,IAAI,IAAI,GAAG,CAAC,CAAC;IACtCH,SAAS,CAACI,KAAK,GAAGd,OAAO,CAACc,KAAK,IAAI,CAAC;IACpCJ,SAAS,CAACK,MAAM,GAAGf,OAAO,CAACe,MAAM,IAAI,GAAG;IAExC,IAAIH,YAAY,CAACI,MAAM,GAAG,CAAC,EAAE;MAC3BN,SAAS,CAAClB,KAAK,GAAGoB,YAAY,CAAC,CAAC,CAAC;MACjCF,SAAS,CAACjB,IAAI,GAAGiB,SAAS,CAAClB,KAAK,CAACC,IAAI;MACrCQ,OAAO,CAACM,GAAG,CAAC,qBAAqB,EAAEG,SAAS,CAAClB,KAAK,CAACG,IAAI,CAAC;IAC1D,CAAC,MAAM;MACL;MACAe,SAAS,CAACjB,IAAI,GAAG,OAAO;MACxBQ,OAAO,CAACM,GAAG,CAAC,2CAA2C,CAAC;IAC1D;;IAEA;IACAG,SAAS,CAACO,KAAK,GAAG,MAAM;MACtBhB,OAAO,CAACM,GAAG,CAAC,yCAAyC,CAAC;MACtDE,OAAO,CAAC,CAAC;IACX,CAAC;IAEDC,SAAS,CAACQ,OAAO,GAAIC,KAAK,IAAK;MAAA,IAAAC,gBAAA;MAC7BnB,OAAO,CAACkB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/ClB,OAAO,CAACkB,KAAK,CAAC,gBAAgB,EAAE;QAC9BpB,IAAI,EAAEA,IAAI;QACVP,KAAK,GAAA4B,gBAAA,GAAEV,SAAS,CAAClB,KAAK,cAAA4B,gBAAA,uBAAfA,gBAAA,CAAiBzB,IAAI;QAC5BF,IAAI,EAAEiB,SAAS,CAACjB,IAAI;QACpBoB,IAAI,EAAEH,SAAS,CAACG,IAAI;QACpBC,KAAK,EAAEJ,SAAS,CAACI,KAAK;QACtBC,MAAM,EAAEL,SAAS,CAACK;MACpB,CAAC,CAAC;;MAEF;MACA,IAAIL,SAAS,CAACjB,IAAI,CAACC,UAAU,CAAC,IAAI,CAAC,IAAIyB,KAAK,CAACA,KAAK,KAAK,UAAU,EAAE;QACjElB,OAAO,CAACM,GAAG,CAAC,wCAAwC,CAAC;QACrD,OAAOc,iBAAiB,CAACtB,IAAI,EAAEC,OAAO,CAAC,CAACsB,IAAI,CAACb,OAAO,CAAC,CAACc,KAAK,CAACnB,MAAM,CAAC;MACrE;MAEAA,MAAM,CAACe,KAAK,CAAC;IACf,CAAC;IAEDT,SAAS,CAACc,OAAO,GAAG,MAAM;MACxBvB,OAAO,CAACM,GAAG,CAAC,+BAA+B,EAAER,IAAI,CAAC;MAClD,IAAIC,OAAO,CAACyB,OAAO,EAAEzB,OAAO,CAACyB,OAAO,CAAC,CAAC;IACxC,CAAC;;IAED;IACAvC,MAAM,CAACG,eAAe,CAACqC,KAAK,CAAChB,SAAS,CAAC;EACzC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMW,iBAAiB,GAAGA,CAACtB,IAAI,EAAEC,OAAO,KAAK;EAC3C,OAAO,IAAIG,OAAO,CAAC,CAACM,OAAO,EAAEL,MAAM,KAAK;IACtC,MAAMM,SAAS,GAAG,IAAIC,wBAAwB,CAACZ,IAAI,CAAC;;IAEpD;IACA,MAAMX,MAAM,GAAGF,MAAM,CAACG,eAAe,CAACC,SAAS,CAAC,CAAC;IACjD,MAAMqC,YAAY,GAAGvC,MAAM,CAACwC,IAAI,CAACpC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,IAAI,CAAC,CAAC;IAEtE,IAAIiC,YAAY,EAAE;MAChBjB,SAAS,CAAClB,KAAK,GAAGmC,YAAY;MAC9BjB,SAAS,CAACjB,IAAI,GAAGkC,YAAY,CAAClC,IAAI;IACpC,CAAC,MAAM;MACLiB,SAAS,CAACjB,IAAI,GAAG,OAAO;IAC1B;IAEAiB,SAAS,CAACG,IAAI,GAAG,GAAG;IACpBH,SAAS,CAACI,KAAK,GAAG,GAAG;IAErBJ,SAAS,CAACO,KAAK,GAAG,MAAMR,OAAO,CAAC,CAAC;IACjCC,SAAS,CAACQ,OAAO,GAAIC,KAAK,IAAKf,MAAM,CAACe,KAAK,CAAC;IAE5CjC,MAAM,CAACG,eAAe,CAACqC,KAAK,CAAChB,SAAS,CAAC;EACzC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMmB,eAAe,GAAG,MAAOC,MAAM,IAAK;EAC/C,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACC,YAAY,EAAE;IACnC9B,OAAO,CAACC,IAAI,CAAC,4CAA4C,CAAC;IAC1D,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,gBAAgB,CAAC,CAAC;EACpD;EAEAJ,OAAO,CAACM,GAAG,CAAC,2BAA2B,EAAEuB,MAAM,CAACC,YAAY,EAAE,OAAO,EAAED,MAAM,CAACnC,IAAI,CAAC;EAEnF,MAAMqC,WAAW,GAAGjD,yBAAyB,CAAC+C,MAAM,CAACC,YAAY,CAAC;;EAElE;EACA,IAAIC,WAAW,CAACpD,OAAO,KAAK,SAAS,EAAE;IACrCqB,OAAO,CAACM,GAAG,CAAC,aAAauB,MAAM,CAACC,YAAY,8CAA8C,CAAC;IAC3F,OAAOE,2BAA2B,CAACH,MAAM,EAAEE,WAAW,CAAC;EACzD;;EAEA;EACA,MAAME,WAAW,GAAGJ,MAAM,CAACC,YAAY,CAACI,MAAM,CAAC,CAAC,CAAC;EAEjD,IAAI;IACF;IACA,MAAMrC,WAAW,CAACoC,WAAW,EAAE;MAC7BrB,IAAI,EAAE,GAAG;MAAE;MACXC,KAAK,EAAE,GAAG;MAAE;MACZW,OAAO,EAAEA,CAAA,KAAM;QACbxB,OAAO,CAACM,GAAG,CAAC,6BAA6BuB,MAAM,CAACnC,IAAI,KAAKmC,MAAM,CAACC,YAAY,GAAG,CAAC;MAClF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdlB,OAAO,CAACkB,KAAK,CAAC,wBAAwBW,MAAM,CAACnC,IAAI,GAAG,EAAEwB,KAAK,CAAC;;IAE5D;IACA,OAAOc,2BAA2B,CAACH,MAAM,EAAEE,WAAW,CAAC;EACzD;AACF,CAAC;;AAED;AACA,MAAMC,2BAA2B,GAAG,MAAAA,CAAOH,MAAM,EAAEE,WAAW,KAAK;EACjE,MAAMI,QAAQ,GAAG;EACf;EACA;IAAErC,IAAI,EAAE+B,MAAM,CAACC,YAAY,CAACI,MAAM,CAAC,CAAC,CAAC;IAAE1C,IAAI,EAAE,OAAO;IAAEoB,IAAI,EAAE;EAAI,CAAC;EAEjE;EACA,IAAIiB,MAAM,CAACO,YAAY,GAAG,CAAC;IAAEtC,IAAI,EAAE+B,MAAM,CAACO,YAAY;IAAE5C,IAAI,EAAE,OAAO;IAAEoB,IAAI,EAAE;EAAI,CAAC,CAAC,GAAG,EAAE,CAAC;EAEzF;EACA,GAAGmB,WAAW,CAACrD,SAAS,CAAC2D,GAAG,CAACC,QAAQ,KAAK;IACxCxC,IAAI,EAAEwC,QAAQ;IACd9C,IAAI,EAAE8C,QAAQ,CAACvB,MAAM,KAAK,CAAC,GAAG,OAAO,GAAG,OAAO;IAC/CH,IAAI,EAAE;EACR,CAAC,CAAC,CAAC;EAEH;EACA,IAAIiB,MAAM,CAACU,YAAY,GAAG,CAAC;IAAEzC,IAAI,EAAE+B,MAAM,CAACU,YAAY;IAAE/C,IAAI,EAAE,OAAO;IAAEoB,IAAI,EAAE;EAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAC1F;EAED,KAAK,IAAI4B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACpB,MAAM,EAAEyB,CAAC,EAAE,EAAE;IACxC,MAAMC,OAAO,GAAGN,QAAQ,CAACK,CAAC,CAAC;IAC3BxC,OAAO,CAACM,GAAG,CAAC,uBAAuBkC,CAAC,GAAG,CAAC,IAAIL,QAAQ,CAACpB,MAAM,MAAM0B,OAAO,CAAC3C,IAAI,gBAAgB2C,OAAO,CAACjD,IAAI,EAAE,CAAC;IAE5G,IAAI;MACF,MAAMK,WAAW,CAAC4C,OAAO,CAAC3C,IAAI,EAAE;QAC9Bc,IAAI,EAAE6B,OAAO,CAAC7B,IAAI;QAClBC,KAAK,EAAE,GAAG;QACVW,OAAO,EAAEA,CAAA,KAAM;UACbxB,OAAO,CAACM,GAAG,CAAC,mCAAmCuB,MAAM,CAACnC,IAAI,WAAW+C,OAAO,CAAC3C,IAAI,GAAG,CAAC;QACvF;MACF,CAAC,CAAC;MACF,OAAO,CAAC;IACV,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdlB,OAAO,CAACM,GAAG,CAAC,oBAAoBkC,CAAC,GAAG,CAAC,UAAU,EAAEtB,KAAK,CAAC;MACvD,IAAIsB,CAAC,KAAKL,QAAQ,CAACpB,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAM,IAAIX,KAAK,CAAC,sDAAsDyB,MAAM,CAACC,YAAY,EAAE,CAAC;MAC9F;IACF;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,iBAAiB,GAAIC,QAAQ,IAAK;EAC7C,IAAI,CAACA,QAAQ,EAAE;IACb3C,OAAO,CAACC,IAAI,CAAC,8CAA8C,CAAC;IAC5D,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,kBAAkB,CAAC,CAAC;EACtD;;EAEA;EACA,MAAM6B,WAAW,GAAGU,QAAQ,CAACA,QAAQ,IAAIA,QAAQ,CAAC7C,IAAI,KACnD6C,QAAQ,CAACC,SAAS,IAAID,QAAQ,CAACE,KAAK,GACnCF,QAAQ,CAACC,SAAS,GAAGD,QAAQ,CAACE,KAAK,IAAIF,QAAQ,CAACG,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC;EAEtE,IAAI,CAACb,WAAW,EAAE;IAChBjC,OAAO,CAACC,IAAI,CAAC,2CAA2C,CAAC;IACzD,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,sBAAsB,CAAC,CAAC;EAC1D;EAEA,OAAOP,WAAW,CAACoC,WAAW,EAAE;IAC9BrB,IAAI,EAAE,GAAG;IACTY,OAAO,EAAEA,CAAA,KAAMxB,OAAO,CAACM,GAAG,CAAC,+BAA+B2B,WAAW,EAAE;EACzE,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMc,aAAa,GAAIC,IAAI,IAAK;EACrC,IAAI,CAACA,IAAI,EAAE;IACThD,OAAO,CAACC,IAAI,CAAC,0CAA0C,CAAC;IACxD,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,cAAc,CAAC,CAAC;EAClD;;EAEA;EACA,MAAM6B,WAAW,GAAGe,IAAI,CAACC,MAAM,IAAID,IAAI,CAAClD,IAAI,IAAIkD,IAAI,CAACZ,YAAY,IAAI,EAAE;EAEvE,IAAI,CAACH,WAAW,EAAE;IAChBjC,OAAO,CAACC,IAAI,CAAC,uCAAuC,CAAC;IACrD,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,kBAAkB,CAAC,CAAC;EACtD;EAEA,OAAOP,WAAW,CAACoC,WAAW,EAAE;IAC9BrB,IAAI,EAAE,GAAG;IACTY,OAAO,EAAEA,CAAA,KAAMxB,OAAO,CAACM,GAAG,CAAC,2BAA2B2B,WAAW,EAAE;EACrE,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMiB,sBAAsB,GAAIrB,MAAM,IAAK;EAChD,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACU,YAAY,EAAE;IACnCvC,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;IAC7D,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,yCAAyC,CAAC,CAAC;EAC7E;;EAEA;EACA,IAAI,CAACpB,iBAAiB,CAAC,CAAC,EAAE;IACxBgB,OAAO,CAACC,IAAI,CAAC,gCAAgC,CAAC;IAC9C,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,gCAAgC,CAAC,CAAC;EACpE;EAEAnB,MAAM,CAACG,eAAe,CAACmB,MAAM,CAAC,CAAC;EAE/B,OAAO,IAAIL,OAAO,CAAC,CAACM,OAAO,EAAEL,MAAM,KAAK;IACtC,MAAMM,SAAS,GAAG,IAAIC,wBAAwB,CAACmB,MAAM,CAACU,YAAY,CAAC;;IAEnE;IACA,MAAMpD,MAAM,GAAGF,MAAM,CAACG,eAAe,CAACC,SAAS,CAAC,CAAC;IACjD,MAAMqC,YAAY,GAAGvC,MAAM,CAACwC,IAAI,CAACpC,KAAK,IACpCA,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,IAAI,CAAC,KAC1BF,KAAK,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAIL,KAAK,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,CAC5F,CAAC,IAAIT,MAAM,CAACwC,IAAI,CAACpC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,IAAI,CAAC,CAAC;IAEtD,IAAIiC,YAAY,EAAE;MAChBjB,SAAS,CAAClB,KAAK,GAAGmC,YAAY;MAC9BjB,SAAS,CAACjB,IAAI,GAAGkC,YAAY,CAAClC,IAAI;IACpC,CAAC,MAAM;MACLiB,SAAS,CAACjB,IAAI,GAAG,OAAO;IAC1B;IAEAiB,SAAS,CAACG,IAAI,GAAG,GAAG;IACpBH,SAAS,CAACI,KAAK,GAAG,GAAG,CAAC,CAAC;;IAEvBJ,SAAS,CAACO,KAAK,GAAG,MAAMR,OAAO,CAAC,CAAC;IACjCC,SAAS,CAACQ,OAAO,GAAIC,KAAK,IAAKf,MAAM,CAACe,KAAK,CAAC;IAE5CjC,MAAM,CAACG,eAAe,CAACqC,KAAK,CAAChB,SAAS,CAAC;EACzC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAM0C,YAAY,GAAGA,CAAA,KAAM;EAChC,IAAInE,iBAAiB,CAAC,CAAC,EAAE;IACvBC,MAAM,CAACG,eAAe,CAACmB,MAAM,CAAC,CAAC;EACjC;AACF,CAAC;;AAED;AACA,OAAO,MAAM6C,aAAa,GAAGA,CAAA,KAAM;EACjC,IAAIpE,iBAAiB,CAAC,CAAC,EAAE;IACvB;IACAC,MAAM,CAACG,eAAe,CAACC,SAAS,CAAC,CAAC;EACpC;AACF,CAAC;;AAED;AACA,OAAO,MAAMgE,mBAAmB,GAAItE,SAAS,IAAK;EAChDiB,OAAO,CAACM,GAAG,CAAC,2BAA2B,EAAEvB,SAAS,CAAC;EACnDiB,OAAO,CAACM,GAAG,CAAC,iBAAiB,EAAEvB,SAAS,CAACuE,UAAU,CAAC,CAAC,CAAC,CAAC;EACvDtD,OAAO,CAACM,GAAG,CAAC,gBAAgB,EAAEvB,SAAS,CAACuE,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC;;EAEnE;EACA,OAAO1D,WAAW,CAACd,SAAS,EAAE;IAC5B6B,IAAI,EAAE,GAAG;IACTY,OAAO,EAAEA,CAAA,KAAMxB,OAAO,CAACM,GAAG,CAAC,4BAA4B,CAAC;IACxDkD,OAAO,EAAGtC,KAAK,IAAKlB,OAAO,CAACM,GAAG,CAAC,2BAA2B,EAAEY,KAAK;EACpE,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMuC,qBAAqB,GAAG,MAAAA,CAAO3D,IAAI,EAAE4D,IAAI,GAAG,SAAS,EAAE3D,OAAO,GAAG,CAAC,CAAC,KAAK;EACnF,IAAI;IACF;IACA4D,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,eAAe,CAAC;IAE5C,MAAMjE,WAAW,CAACC,IAAI,EAAEC,OAAO,CAAC;IAEhC,OAAOG,OAAO,CAACM,OAAO,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdlB,OAAO,CAACkB,KAAK,CAAC,iBAAiBwC,IAAI,SAAS,EAAExC,KAAK,CAAC;IACpD,OAAOhB,OAAO,CAACC,MAAM,CAACe,KAAK,CAAC;EAC9B,CAAC,SAAS;IACR;IACAyC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,eAAe,CAAC;EACjD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}