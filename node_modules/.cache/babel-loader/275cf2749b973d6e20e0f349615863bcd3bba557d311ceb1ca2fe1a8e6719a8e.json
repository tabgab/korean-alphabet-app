{"ast":null,"code":"import React,{useState,useCallback}from'react';import{useProgress}from'../context/ProgressContext';// Exercise configuration with multiple question patterns\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const EXERCISE_TYPES={'multiple-choice':{name:'Multiple Choice',description:'Choose the correct answer from options',icon:'🔘',questionCount:3},'letter-to-sound':{name:'Letter to Sound',description:'Match Korean letters to their English sounds',icon:'🔊',questionCount:2},'sound-to-letter':{name:'Sound to Letter',description:'Find the Korean letter that makes a specific sound',icon:'📝',questionCount:3},'letter-matching':{name:'Letter Matching',description:'Match letters to their pronunciations',icon:'🔗',questionCount:2},'word-association':{name:'Sound Association',description:'Match letters to words containing their sounds',icon:'🌐',questionCount:3}};const PracticeSection=()=>{const{updateScore,getAvailableLetters}=useProgress();const[selectedExerciseType,setSelectedExerciseType]=useState(null);const[currentQuestion,setCurrentQuestion]=useState(null);const[selectedAnswer,setSelectedAnswer]=useState(null);const[showResult,setShowResult]=useState(false);const[questionNumber,setQuestionNumber]=useState(1);const[score,setScore]=useState(0);// Generate focused questions about a specific letter with multiple variations\nconst generateQuestion=useCallback(function(exerciseType){let targetLetter=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const availableLetters=getAvailableLetters();if(availableLetters.length<2){return{type:'insufficient-letters',question:'Complete more letters to unlock practice exercises!',correctAnswer:null,options:[]};}// Select a target letter to focus questions on\nlet focusLetter;if(targetLetter&&availableLetters.some(l=>l.id===targetLetter.id)){focusLetter=targetLetter;}else{focusLetter=availableLetters[Math.floor(Math.random()*availableLetters.length)];}// Get other letters for options (excluding the focus letter)\nconst otherLetters=availableLetters.filter(l=>l.id!==focusLetter.id);const distractorLetters=otherLetters.sort(()=>Math.random()-0.5).slice(0,3);let question={};switch(exerciseType){case'multiple-choice':const letterQuestionPatterns=[\"What is the name of this Korean letter: \\\"\".concat(focusLetter.koreanLetter,\"\\\"?\"),\"Which letter makes the \\\"\".concat(focusLetter.englishSound,\"\\\" sound?\"),\"What letter should you use for the \\\"\".concat(focusLetter.englishSound,\"\\\" sound?\")];const randomLetterPattern=letterQuestionPatterns[Math.floor(Math.random()*letterQuestionPatterns.length)];question={type:'multiple-choice',question:randomLetterPattern,correctAnswer:focusLetter.name,options:[focusLetter,...distractorLetters].map(l=>l.name).sort(()=>Math.random()-0.5),letter:focusLetter};break;case'letter-to-sound':const soundQuestionPatterns=[\"What sound does \\\"\".concat(focusLetter.koreanLetter,\"\\\" make?\"),\"How do you pronounce \\\"\".concat(focusLetter.koreanLetter,\"\\\"?\"),\"What is the English sound for \\\"\".concat(focusLetter.koreanLetter,\"\\\"?\")];const randomSoundQuestionPattern=soundQuestionPatterns[Math.floor(Math.random()*soundQuestionPatterns.length)];question={type:'letter-to-sound',question:randomSoundQuestionPattern,correctAnswer:focusLetter.englishSound,options:[focusLetter,...distractorLetters].map(l=>l.englishSound).sort(()=>Math.random()-0.5),letter:focusLetter};break;case'sound-to-letter':const reverseQuestionPatterns=[\"Which Korean letter makes the \\\"\".concat(focusLetter.englishSound,\"\\\" sound?\"),\"What letter should you use for the \\\"\".concat(focusLetter.englishSound,\"\\\" sound?\"),\"If you want to make the \\\"\".concat(focusLetter.englishSound,\"\\\" sound, which letter do you use?\")];const randomReversePattern=reverseQuestionPatterns[Math.floor(Math.random()*reverseQuestionPatterns.length)];question={type:'sound-to-letter',question:randomReversePattern,correctAnswer:focusLetter.koreanLetter,options:[focusLetter,...distractorLetters].map(l=>l.koreanLetter).sort(()=>Math.random()-0.5),letter:focusLetter};break;case'letter-matching':const matchQuestionPatterns=[\"What is the romanization of \\\"\".concat(focusLetter.koreanLetter,\"\\\"?\"),\"How do you write \\\"\".concat(focusLetter.koreanLetter,\"\\\" in English letters?\"),\"What is the English spelling for \\\"\".concat(focusLetter.koreanLetter,\"\\\"?\")];const randomMatchQuestionPattern=matchQuestionPatterns[Math.floor(Math.random()*matchQuestionPatterns.length)];question={type:'letter-matching',question:randomMatchQuestionPattern,correctAnswer:focusLetter.romanization,options:[focusLetter,...distractorLetters].map(l=>l.romanization).sort(()=>Math.random()-0.5),letter:focusLetter};break;case'word-association':const wordOptions=focusLetter.exampleWords.slice(0,3);const displayWord=wordOptions[Math.floor(Math.random()*wordOptions.length)];const associationQuestionPatterns=[\"Which letter makes the \\\"\".concat(focusLetter.englishSound,\"\\\" sound found in \\\"\").concat(displayWord,\"\\\"?\"),\"What letter would you use to start writing \\\"\".concat(displayWord,\"\\\" in Korean?\"),\"Which Korean letter sounds like the beginning of \\\"\".concat(displayWord,\"\\\"?\")];const randomAssociationQuestionPattern=associationQuestionPatterns[Math.floor(Math.random()*associationQuestionPatterns.length)];question={type:'word-association',question:randomAssociationQuestionPattern,correctAnswer:focusLetter.name,options:[focusLetter,...distractorLetters].map(l=>l.name).sort(()=>Math.random()-0.5),letter:focusLetter};break;default:return generateQuestion('multiple-choice',focusLetter);}return question;},[getAvailableLetters]);const startExercise=exerciseType=>{setSelectedExerciseType(exerciseType);// Generate first question\nconst firstQuestion=generateQuestion(exerciseType);setCurrentQuestion(firstQuestion);setSelectedAnswer(null);setShowResult(false);setQuestionNumber(1);setScore(0);};const checkAnswer=()=>{if(!selectedAnswer)return;setShowResult(true);const isCorrect=selectedAnswer===currentQuestion.correctAnswer;if(isCorrect){const points=Math.max(10,20-questionNumber*2);setScore(prev=>prev+points);// Update score for the letter\nif(currentQuestion.letter){updateScore(currentQuestion.letter.id,100);}}};const nextQuestion=()=>{if(questionNumber>=10){finishExercise();return;}setQuestionNumber(prev=>prev+1);const newQuestion=generateQuestion(selectedExerciseType);setCurrentQuestion(newQuestion);setSelectedAnswer(null);setShowResult(false);};const finishExercise=()=>{setSelectedExerciseType(null);setCurrentQuestion(null);setScore(0);};const getOptionButtonClass=option=>{let baseClass='option-btn';if(selectedAnswer===option)baseClass+=' selected';if(showResult){if(option===currentQuestion.correctAnswer){baseClass+=' correct';}else if(selectedAnswer===option){baseClass+=' incorrect';}}return baseClass;};if(!selectedExerciseType){return/*#__PURE__*/_jsx(\"div\",{className:\"practice-section\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"section-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Practice Exercises\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Choose an exercise type to test your Korean alphabet knowledge.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"exercise-types\",children:Object.entries(EXERCISE_TYPES).map(_ref=>{let[type,config]=_ref;return/*#__PURE__*/_jsxs(\"button\",{className:\"exercise-type-btn\",onClick:()=>startExercise(type),children:[/*#__PURE__*/_jsx(\"div\",{className:\"exercise-icon\",children:config.icon}),/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-info\",children:[/*#__PURE__*/_jsx(\"h3\",{children:config.name}),/*#__PURE__*/_jsx(\"p\",{children:config.description})]})]},type);})})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"practice-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"section-header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:EXERCISE_TYPES[selectedExerciseType].name}),/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-progress\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"Question \",questionNumber,\"/10\"]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Score: \",score]})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"exercise-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-question\",children:[/*#__PURE__*/_jsx(\"h3\",{children:currentQuestion.question}),currentQuestion.type==='insufficient-letters'?/*#__PURE__*/_jsxs(\"div\",{className:\"insufficient-letters\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\uD83D\\uDCDA You need at least 2 unlocked letters to practice.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Complete some letters in the Learn section first!\"})]}):currentQuestion.letter&&/*#__PURE__*/_jsxs(\"div\",{className:\"question-letter\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"korean-letter-large\",children:currentQuestion.letter.koreanLetter}),/*#__PURE__*/_jsxs(\"div\",{className:\"letter-metadata\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"category-tag \".concat(currentQuestion.letter.category),children:currentQuestion.letter.category}),/*#__PURE__*/_jsxs(\"span\",{className:\"difficulty-tag difficulty-\".concat(currentQuestion.letter.difficulty),children:[\"Level \",currentQuestion.letter.difficulty]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"answer-options\",children:currentQuestion.options.map((option,index)=>/*#__PURE__*/_jsxs(\"button\",{className:\"option-btn \".concat(getOptionButtonClass(option)),onClick:()=>!showResult&&setSelectedAnswer(option),disabled:showResult,children:[/*#__PURE__*/_jsx(\"span\",{className:\"option-letter\",children:String.fromCharCode(65+index)}),/*#__PURE__*/_jsx(\"span\",{className:\"option-text\",children:option})]},index))}),showResult&&/*#__PURE__*/_jsxs(\"div\",{className:\"result-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"feedback \".concat(selectedAnswer===currentQuestion.correctAnswer?'correct':'incorrect'),children:/*#__PURE__*/_jsx(\"p\",{children:selectedAnswer===currentQuestion.correctAnswer?'Correct! Well done!':\"Incorrect. The correct answer is \\\"\".concat(currentQuestion.correctAnswer,\"\\\".\")})}),/*#__PURE__*/_jsxs(\"div\",{className:\"letter-explanation\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[currentQuestion.letter.name,\" (\",currentQuestion.letter.koreanLetter,\")\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Romanization:\"}),\" \",currentQuestion.letter.romanization]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Pronunciation:\"}),\" \",currentQuestion.letter.englishComparison]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"next-btn\",onClick:nextQuestion,children:questionNumber>=10?'Finish Exercise':'Next Question'})]}),!showResult&&/*#__PURE__*/_jsx(\"button\",{className:\"check-btn\",onClick:checkAnswer,disabled:!selectedAnswer,children:\"Check Answer\"})]})})]});};export default PracticeSection;","map":{"version":3,"names":["React","useState","useCallback","useProgress","jsx","_jsx","jsxs","_jsxs","EXERCISE_TYPES","name","description","icon","questionCount","PracticeSection","updateScore","getAvailableLetters","selectedExerciseType","setSelectedExerciseType","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","showResult","setShowResult","questionNumber","setQuestionNumber","score","setScore","generateQuestion","exerciseType","targetLetter","arguments","length","undefined","availableLetters","type","question","correctAnswer","options","focusLetter","some","l","id","Math","floor","random","otherLetters","filter","distractorLetters","sort","slice","letterQuestionPatterns","concat","koreanLetter","englishSound","randomLetterPattern","map","letter","soundQuestionPatterns","randomSoundQuestionPattern","reverseQuestionPatterns","randomReversePattern","matchQuestionPatterns","randomMatchQuestionPattern","romanization","wordOptions","exampleWords","displayWord","associationQuestionPatterns","randomAssociationQuestionPattern","startExercise","firstQuestion","checkAnswer","isCorrect","points","max","prev","nextQuestion","finishExercise","newQuestion","getOptionButtonClass","option","baseClass","className","children","Object","entries","_ref","config","onClick","category","difficulty","index","disabled","String","fromCharCode","englishComparison"],"sources":["/Users/gabortabi/DEV/learnKorean/src/components/PracticeSection.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { useProgress } from '../context/ProgressContext';\n\n// Exercise configuration with multiple question patterns\nconst EXERCISE_TYPES = {\n  'multiple-choice': {\n    name: 'Multiple Choice',\n    description: 'Choose the correct answer from options',\n    icon: '🔘',\n    questionCount: 3\n  },\n  'letter-to-sound': {\n    name: 'Letter to Sound',\n    description: 'Match Korean letters to their English sounds',\n    icon: '🔊',\n    questionCount: 2\n  },\n  'sound-to-letter': {\n    name: 'Sound to Letter',\n    description: 'Find the Korean letter that makes a specific sound',\n    icon: '📝',\n    questionCount: 3\n  },\n  'letter-matching': {\n    name: 'Letter Matching',\n    description: 'Match letters to their pronunciations',\n    icon: '🔗',\n    questionCount: 2\n  },\n  'word-association': {\n    name: 'Sound Association',\n    description: 'Match letters to words containing their sounds',\n    icon: '🌐',\n    questionCount: 3\n  }\n};\n\nconst PracticeSection = () => {\n  const { updateScore, getAvailableLetters } = useProgress();\n  const [selectedExerciseType, setSelectedExerciseType] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  const [questionNumber, setQuestionNumber] = useState(1);\n  const [score, setScore] = useState(0);\n\n  // Generate focused questions about a specific letter with multiple variations\n  const generateQuestion = useCallback((exerciseType, targetLetter = null) => {\n    const availableLetters = getAvailableLetters();\n\n    if (availableLetters.length < 2) {\n      return {\n        type: 'insufficient-letters',\n        question: 'Complete more letters to unlock practice exercises!',\n        correctAnswer: null,\n        options: []\n      };\n    }\n\n    // Select a target letter to focus questions on\n    let focusLetter;\n    if (targetLetter && availableLetters.some(l => l.id === targetLetter.id)) {\n      focusLetter = targetLetter;\n    } else {\n      focusLetter = availableLetters[Math.floor(Math.random() * availableLetters.length)];\n    }\n\n    // Get other letters for options (excluding the focus letter)\n    const otherLetters = availableLetters.filter(l => l.id !== focusLetter.id);\n    const distractorLetters = otherLetters.sort(() => Math.random() - 0.5).slice(0, 3);\n\n    let question = {};\n\n    switch (exerciseType) {\n      case 'multiple-choice':\n        const letterQuestionPatterns = [\n          `What is the name of this Korean letter: \"${focusLetter.koreanLetter}\"?`,\n          `Which letter makes the \"${focusLetter.englishSound}\" sound?`,\n          `What letter should you use for the \"${focusLetter.englishSound}\" sound?`\n        ];\n        const randomLetterPattern = letterQuestionPatterns[Math.floor(Math.random() * letterQuestionPatterns.length)];\n\n        question = {\n          type: 'multiple-choice',\n          question: randomLetterPattern,\n          correctAnswer: focusLetter.name,\n          options: [focusLetter, ...distractorLetters].map(l => l.name).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'letter-to-sound':\n        const soundQuestionPatterns = [\n          `What sound does \"${focusLetter.koreanLetter}\" make?`,\n          `How do you pronounce \"${focusLetter.koreanLetter}\"?`,\n          `What is the English sound for \"${focusLetter.koreanLetter}\"?`\n        ];\n        const randomSoundQuestionPattern = soundQuestionPatterns[Math.floor(Math.random() * soundQuestionPatterns.length)];\n\n        question = {\n          type: 'letter-to-sound',\n          question: randomSoundQuestionPattern,\n          correctAnswer: focusLetter.englishSound,\n          options: [focusLetter, ...distractorLetters].map(l => l.englishSound).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'sound-to-letter':\n        const reverseQuestionPatterns = [\n          `Which Korean letter makes the \"${focusLetter.englishSound}\" sound?`,\n          `What letter should you use for the \"${focusLetter.englishSound}\" sound?`,\n          `If you want to make the \"${focusLetter.englishSound}\" sound, which letter do you use?`\n        ];\n        const randomReversePattern = reverseQuestionPatterns[Math.floor(Math.random() * reverseQuestionPatterns.length)];\n\n        question = {\n          type: 'sound-to-letter',\n          question: randomReversePattern,\n          correctAnswer: focusLetter.koreanLetter,\n          options: [focusLetter, ...distractorLetters].map(l => l.koreanLetter).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'letter-matching':\n        const matchQuestionPatterns = [\n          `What is the romanization of \"${focusLetter.koreanLetter}\"?`,\n          `How do you write \"${focusLetter.koreanLetter}\" in English letters?`,\n          `What is the English spelling for \"${focusLetter.koreanLetter}\"?`\n        ];\n        const randomMatchQuestionPattern = matchQuestionPatterns[Math.floor(Math.random() * matchQuestionPatterns.length)];\n\n        question = {\n          type: 'letter-matching',\n          question: randomMatchQuestionPattern,\n          correctAnswer: focusLetter.romanization,\n          options: [focusLetter, ...distractorLetters].map(l => l.romanization).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'word-association':\n        const wordOptions = focusLetter.exampleWords.slice(0, 3);\n        const displayWord = wordOptions[Math.floor(Math.random() * wordOptions.length)];\n\n        const associationQuestionPatterns = [\n          `Which letter makes the \"${focusLetter.englishSound}\" sound found in \"${displayWord}\"?`,\n          `What letter would you use to start writing \"${displayWord}\" in Korean?`,\n          `Which Korean letter sounds like the beginning of \"${displayWord}\"?`\n        ];\n        const randomAssociationQuestionPattern = associationQuestionPatterns[Math.floor(Math.random() * associationQuestionPatterns.length)];\n\n        question = {\n          type: 'word-association',\n          question: randomAssociationQuestionPattern,\n          correctAnswer: focusLetter.name,\n          options: [focusLetter, ...distractorLetters].map(l => l.name).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      default:\n        return generateQuestion('multiple-choice', focusLetter);\n    }\n\n    return question;\n  }, [getAvailableLetters]);\n\n  const startExercise = (exerciseType) => {\n    setSelectedExerciseType(exerciseType);\n\n    // Generate first question\n    const firstQuestion = generateQuestion(exerciseType);\n    setCurrentQuestion(firstQuestion);\n\n    setSelectedAnswer(null);\n    setShowResult(false);\n    setQuestionNumber(1);\n    setScore(0);\n  };\n\n  const checkAnswer = () => {\n    if (!selectedAnswer) return;\n\n    setShowResult(true);\n    const isCorrect = selectedAnswer === currentQuestion.correctAnswer;\n\n    if (isCorrect) {\n      const points = Math.max(10, 20 - (questionNumber * 2));\n      setScore(prev => prev + points);\n\n      // Update score for the letter\n      if (currentQuestion.letter) {\n        updateScore(currentQuestion.letter.id, 100);\n      }\n    }\n  };\n\n  const nextQuestion = () => {\n    if (questionNumber >= 10) {\n      finishExercise();\n      return;\n    }\n\n    setQuestionNumber(prev => prev + 1);\n    const newQuestion = generateQuestion(selectedExerciseType);\n    setCurrentQuestion(newQuestion);\n    setSelectedAnswer(null);\n    setShowResult(false);\n  };\n\n  const finishExercise = () => {\n    setSelectedExerciseType(null);\n    setCurrentQuestion(null);\n    setScore(0);\n  };\n\n  const getOptionButtonClass = (option) => {\n    let baseClass = 'option-btn';\n    if (selectedAnswer === option) baseClass += ' selected';\n    if (showResult) {\n      if (option === currentQuestion.correctAnswer) {\n        baseClass += ' correct';\n      } else if (selectedAnswer === option) {\n        baseClass += ' incorrect';\n      }\n    }\n    return baseClass;\n  };\n\n  if (!selectedExerciseType) {\n    return (\n      <div className=\"practice-section\">\n        <div className=\"section-header\">\n          <h2>Practice Exercises</h2>\n          <p>Choose an exercise type to test your Korean alphabet knowledge.</p>\n\n          <div className=\"exercise-types\">\n            {Object.entries(EXERCISE_TYPES).map(([type, config]) => (\n              <button\n                key={type}\n                className=\"exercise-type-btn\"\n                onClick={() => startExercise(type)}\n              >\n                <div className=\"exercise-icon\">{config.icon}</div>\n                <div className=\"exercise-info\">\n                  <h3>{config.name}</h3>\n                  <p>{config.description}</p>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"practice-section\">\n      <div className=\"section-header\">\n        <div className=\"exercise-header\">\n          <h2>{EXERCISE_TYPES[selectedExerciseType].name}</h2>\n          <div className=\"exercise-progress\">\n            <span>Question {questionNumber}/10</span>\n            <span>Score: {score}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"exercise-container\">\n        <div className=\"exercise-question\">\n          <h3>{currentQuestion.question}</h3>\n          {currentQuestion.type === 'insufficient-letters' ? (\n            <div className=\"insufficient-letters\">\n              <p>📚 You need at least 2 unlocked letters to practice.</p>\n              <p>Complete some letters in the Learn section first!</p>\n            </div>\n          ) : (\n            currentQuestion.letter && (\n              <div className=\"question-letter\">\n                <span className=\"korean-letter-large\">{currentQuestion.letter.koreanLetter}</span>\n                <div className=\"letter-metadata\">\n                  <span className={`category-tag ${currentQuestion.letter.category}`}>\n                    {currentQuestion.letter.category}\n                  </span>\n                  <span className={`difficulty-tag difficulty-${currentQuestion.letter.difficulty}`}>\n                    Level {currentQuestion.letter.difficulty}\n                  </span>\n                </div>\n              </div>\n            )\n          )}\n\n          <div className=\"answer-options\">\n            {currentQuestion.options.map((option, index) => (\n              <button\n                key={index}\n                className={`option-btn ${getOptionButtonClass(option)}`}\n                onClick={() => !showResult && setSelectedAnswer(option)}\n                disabled={showResult}\n              >\n                <span className=\"option-letter\">{String.fromCharCode(65 + index)}</span>\n                <span className=\"option-text\">{option}</span>\n              </button>\n            ))}\n          </div>\n\n          {showResult && (\n            <div className=\"result-section\">\n              <div className={`feedback ${selectedAnswer === currentQuestion.correctAnswer ? 'correct' : 'incorrect'}`}>\n                <p>\n                  {selectedAnswer === currentQuestion.correctAnswer\n                    ? 'Correct! Well done!'\n                    : `Incorrect. The correct answer is \"${currentQuestion.correctAnswer}\".`\n                  }\n                </p>\n              </div>\n\n              <div className=\"letter-explanation\">\n                <h4>{currentQuestion.letter.name} ({currentQuestion.letter.koreanLetter})</h4>\n                <p><strong>Romanization:</strong> {currentQuestion.letter.romanization}</p>\n                <p><strong>Pronunciation:</strong> {currentQuestion.letter.englishComparison}</p>\n              </div>\n\n              <button className=\"next-btn\" onClick={nextQuestion}>\n                {questionNumber >= 10 ? 'Finish Exercise' : 'Next Question'}\n              </button>\n            </div>\n          )}\n\n          {!showResult && (\n            <button className=\"check-btn\" onClick={checkAnswer} disabled={!selectedAnswer}>\n              Check Answer\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PracticeSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}