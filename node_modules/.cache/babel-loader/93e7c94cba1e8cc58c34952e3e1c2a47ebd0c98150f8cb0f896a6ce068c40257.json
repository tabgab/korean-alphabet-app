{"ast":null,"code":"import _objectSpread from\"/Users/gabortabi/DEV/learnKorean/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{koreanAlphabet}from'../koreanAlphabetData';import{jsx as _jsx}from\"react/jsx-runtime\";const ProgressContext=/*#__PURE__*/createContext();export const useProgress=()=>{const context=useContext(ProgressContext);if(!context){throw new Error('useProgress must be used within a ProgressProvider');}return context;};export const ProgressProvider=_ref=>{let{children}=_ref;// Initialize state from localStorage or defaults\nconst[userProgress,setUserProgress]=useState(()=>{const saved=localStorage.getItem('korean-alphabet-progress');return saved?JSON.parse(saved):{completedLetters:[],scores:{},currentLevel:1,totalScore:0,streakCount:0,lastPracticeDate:null,achievements:[],unlockedLetters:[1,2,3,4,5,15,16,17,18,19],// Start with first 5 consonants and 5 vowels\nexerciseStats:{totalQuestions:0,correctAnswers:0,currentStreak:0,bestStreak:0,totalScore:0,averageScore:0,studyTimeMinutes:0,longestStreak:0},milestones:{lettersCompleted:0,perfectScores:0,weeklyGoal:false,monthlyGoal:false}};});// Save progress to localStorage whenever it changes\nuseEffect(()=>{localStorage.setItem('korean-alphabet-progress',JSON.stringify(userProgress));},[userProgress]);// Mark a letter as completed\nconst markLetterCompleted=letterId=>{setUserProgress(prev=>_objectSpread(_objectSpread({},prev),{},{completedLetters:[...new Set([...prev.completedLetters,letterId])]}));};// Update score for a letter\nconst updateScore=(letterId,score)=>{setUserProgress(prev=>{const newScores=_objectSpread(_objectSpread({},prev.scores),{},{[letterId]:Math.max(prev.scores[letterId]||0,score)});// Mark letter as completed if score is high enough (>= 80%)\nconst shouldMarkCompleted=score>=80&&!prev.completedLetters.includes(letterId);const newCompletedLetters=shouldMarkCompleted?[...new Set([...prev.completedLetters,letterId])]:prev.completedLetters;// Update exercise statistics\nconst newStats=_objectSpread(_objectSpread({},prev.exerciseStats),{},{totalQuestions:prev.exerciseStats.totalQuestions+1,correctAnswers:score>=70?prev.exerciseStats.correctAnswers+1:prev.exerciseStats.correctAnswers,totalScore:prev.exerciseStats.totalScore+score,averageScore:Math.round((prev.exerciseStats.totalScore+score)/(prev.exerciseStats.totalQuestions+1))});// Check if we should unlock new letters based on performance\nconst unlockedLetters=checkForUnlocks(newScores,prev.unlockedLetters);// Check for new achievements\nconst currentProgress=_objectSpread(_objectSpread({},prev),{},{scores:newScores,completedLetters:newCompletedLetters,unlockedLetters:unlockedLetters,exerciseStats:newStats});const newAchievements=checkAchievements(currentProgress);return _objectSpread(_objectSpread({},prev),{},{scores:newScores,completedLetters:newCompletedLetters,totalScore:prev.totalScore+score,lastPracticeDate:new Date().toISOString(),unlockedLetters:unlockedLetters,exerciseStats:newStats,achievements:[...prev.achievements,...newAchievements]});});};// Increment streak\nconst incrementStreak=()=>{setUserProgress(prev=>_objectSpread(_objectSpread({},prev),{},{streakCount:prev.streakCount+1}));};// Reset streak\nconst resetStreak=()=>{setUserProgress(prev=>_objectSpread(_objectSpread({},prev),{},{streakCount:0}));};// Add achievement\nconst addAchievement=achievement=>{setUserProgress(prev=>_objectSpread(_objectSpread({},prev),{},{achievements:[...new Set([...prev.achievements,achievement])]}));};// Get progress percentage\nconst getProgressPercentage=()=>{return Math.round(userProgress.completedLetters.length/24*100);};// Check if letter is completed\nconst isLetterCompleted=letterId=>{return userProgress.completedLetters.includes(letterId);};// Get best score for a letter\nconst getBestScore=letterId=>{return userProgress.scores[letterId]||0;};// Get average score across all letters\nconst getAverageScore=()=>{const scores=Object.values(userProgress.scores);return scores.length>0?Math.round(scores.reduce((a,b)=>a+b,0)/scores.length):0;};// Achievement definitions\nconst ACHIEVEMENTS={firstSteps:{id:'firstSteps',name:'First Steps',description:'Complete your first Korean letter',icon:'🎯',requirement:progress=>progress.completedLetters.length>=1,reward:'Unlocks letter practice'},basicConsonants:{id:'basicConsonants',name:'Basic Consonants',description:'Complete first 5 consonants',icon:'🔤',requirement:progress=>{const firstFiveConsonants=[1,2,3,4,5];return firstFiveConsonants.every(id=>progress.completedLetters.includes(id));},reward:'Unlocks basic vowels'},basicVowels:{id:'basicVowels',name:'Basic Vowels',description:'Complete first 5 vowels',icon:'📝',requirement:progress=>{const firstFiveVowels=[15,16,17,18,19];return firstFiveVowels.every(id=>progress.completedLetters.includes(id));},reward:'Unlocks compound vowels'},koreanScholar:{id:'koreanScholar',name:'Korean Scholar',description:'Complete 12 letters',icon:'🎓',requirement:progress=>progress.completedLetters.length>=12,reward:'Unlocks advanced exercises'},hangulMaster:{id:'hangulMaster',name:'Hangul Master',description:'Complete all 24 letters',icon:'👑',requirement:progress=>progress.completedLetters.length>=24,reward:'Complete alphabet mastery'},perfectionist:{id:'perfectionist',name:'Perfectionist',description:'Get 100% on an exercise',icon:'💎',requirement:progress=>Object.values(progress.scores).some(score=>score>=100),reward:'Shows exceptional understanding'},streakMaster:{id:'streakMaster',name:'Streak Master',description:'Achieve a 10-day streak',icon:'🔥',requirement:progress=>progress.streakCount>=10,reward:'Consistent dedication'},speedLearner:{id:'speedLearner',name:'Speed Learner',description:'Complete 10 letters in one session',icon:'⚡',requirement:progress=>progress.milestones.lettersCompleted>=10,reward:'Rapid progress recognition'},dedicated:{id:'dedicated',name:'Dedicated Student',description:'Study for 60 minutes total',icon:'📚',requirement:progress=>progress.exerciseStats.studyTimeMinutes>=60,reward:'Commitment to learning'}};// Check and unlock achievements\nconst checkAchievements=currentProgress=>{const newAchievements=[];const existingAchievementIds=currentProgress.achievements.map(a=>a.id);Object.values(ACHIEVEMENTS).forEach(achievement=>{if(!existingAchievementIds.includes(achievement.id)&&achievement.requirement(currentProgress)){newAchievements.push(_objectSpread(_objectSpread({},achievement),{},{unlockedAt:new Date().toISOString()}));}});return newAchievements;};// Check if letter is unlocked\nconst isLetterUnlocked=letterId=>{return userProgress.unlockedLetters.includes(letterId);};// Get next letters to unlock based on performance\nconst checkForUnlocks=(currentScores,currentlyUnlocked)=>{const unlocked=[...currentlyUnlocked];const currentLevel=Math.max(...koreanAlphabet.filter(letter=>currentlyUnlocked.includes(letter.id)).map(letter=>letter.difficulty),1);// Unlock letters of next difficulty level if performance is good\nconst currentLevelLetters=koreanAlphabet.filter(letter=>letter.difficulty===currentLevel&&currentlyUnlocked.includes(letter.id));const averageCurrentLevelScore=currentLevelLetters.length>0?currentLevelLetters.reduce((sum,letter)=>sum+(currentScores[letter.id]||0),0)/currentLevelLetters.length:0;// If average score for current level is > 70%, unlock next level\nif(averageCurrentLevelScore>70&&currentLevel<4){const nextLevelLetters=koreanAlphabet.filter(letter=>letter.difficulty===currentLevel+1);nextLevelLetters.forEach(letter=>{if(!unlocked.includes(letter.id)){unlocked.push(letter.id);}});}return unlocked;};// Get letters available for practice (unlocked letters)\nconst getAvailableLetters=()=>{return koreanAlphabet.filter(letter=>isLetterUnlocked(letter.id));};// Get locked letters count\nconst getLockedLettersCount=()=>{return 24-userProgress.unlockedLetters.length;};// Calculate overall progress percentage\nconst getOverallProgress=()=>{const unlockedCount=userProgress.unlockedLetters.length;return Math.round(unlockedCount/24*100);};// Get unlocked achievements\nconst getUnlockedAchievements=()=>{return userProgress.achievements;};// Get locked achievements\nconst getLockedAchievements=()=>{const unlockedIds=userProgress.achievements.map(a=>a.id);return Object.values(ACHIEVEMENTS).filter(achievement=>!unlockedIds.includes(achievement.id));};// Get exercise statistics\nconst getExerciseStats=()=>{return userProgress.exerciseStats;};// Get detailed progress metrics\nconst getProgressMetrics=()=>{const totalLetters=24;const unlockedLetters=userProgress.unlockedLetters.length;const completedLetters=userProgress.completedLetters.length;const totalScore=userProgress.totalScore;const averageScore=getAverageScore();return{totalLetters,unlockedLetters,completedLetters,totalScore,averageScore,unlockProgress:Math.round(unlockedLetters/totalLetters*100),completionProgress:Math.round(completedLetters/totalLetters*100),currentLevel:Math.max(...koreanAlphabet.filter(letter=>userProgress.unlockedLetters.includes(letter.id)).map(letter=>letter.difficulty),1)};};// Reset all progress (for testing purposes)\nconst resetAllProgress=()=>{const initialProgress={completedLetters:[],scores:{},currentLevel:1,totalScore:0,streakCount:0,lastPracticeDate:null,achievements:[],unlockedLetters:[1,2,3,4,5,15,16,17,18,19],// Start with first 5 consonants and 5 vowels\nexerciseStats:{totalQuestions:0,correctAnswers:0,currentStreak:0,bestStreak:0,totalScore:0,averageScore:0,studyTimeMinutes:0,longestStreak:0},milestones:{lettersCompleted:0,perfectScores:0,weeklyGoal:false,monthlyGoal:false}};setUserProgress(initialProgress);localStorage.setItem('korean-alphabet-progress',JSON.stringify(initialProgress));};const value={userProgress,markLetterCompleted,updateScore,incrementStreak,resetStreak,addAchievement,getProgressPercentage,isLetterCompleted,getBestScore,getAverageScore,isLetterUnlocked,getAvailableLetters,getLockedLettersCount,getOverallProgress,getUnlockedAchievements,getLockedAchievements,getExerciseStats,getProgressMetrics,resetAllProgress,ACHIEVEMENTS};return/*#__PURE__*/_jsx(ProgressContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","koreanAlphabet","jsx","_jsx","ProgressContext","useProgress","context","Error","ProgressProvider","_ref","children","userProgress","setUserProgress","saved","localStorage","getItem","JSON","parse","completedLetters","scores","currentLevel","totalScore","streakCount","lastPracticeDate","achievements","unlockedLetters","exerciseStats","totalQuestions","correctAnswers","currentStreak","bestStreak","averageScore","studyTimeMinutes","longestStreak","milestones","lettersCompleted","perfectScores","weeklyGoal","monthlyGoal","setItem","stringify","markLetterCompleted","letterId","prev","_objectSpread","Set","updateScore","score","newScores","Math","max","shouldMarkCompleted","includes","newCompletedLetters","newStats","round","checkForUnlocks","currentProgress","newAchievements","checkAchievements","Date","toISOString","incrementStreak","resetStreak","addAchievement","achievement","getProgressPercentage","length","isLetterCompleted","getBestScore","getAverageScore","Object","values","reduce","a","b","ACHIEVEMENTS","firstSteps","id","name","description","icon","requirement","progress","reward","basicConsonants","firstFiveConsonants","every","basicVowels","firstFiveVowels","koreanScholar","hangulMaster","perfectionist","some","streakMaster","speedLearner","dedicated","existingAchievementIds","map","forEach","push","unlockedAt","isLetterUnlocked","currentScores","currentlyUnlocked","unlocked","filter","letter","difficulty","currentLevelLetters","averageCurrentLevelScore","sum","nextLevelLetters","getAvailableLetters","getLockedLettersCount","getOverallProgress","unlockedCount","getUnlockedAchievements","getLockedAchievements","unlockedIds","getExerciseStats","getProgressMetrics","totalLetters","unlockProgress","completionProgress","resetAllProgress","initialProgress","value","Provider"],"sources":["/Users/gabortabi/DEV/learnKorean/src/context/ProgressContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { koreanAlphabet } from '../koreanAlphabetData';\n\nconst ProgressContext = createContext();\n\nexport const useProgress = () => {\n  const context = useContext(ProgressContext);\n  if (!context) {\n    throw new Error('useProgress must be used within a ProgressProvider');\n  }\n  return context;\n};\n\nexport const ProgressProvider = ({ children }) => {\n  // Initialize state from localStorage or defaults\n  const [userProgress, setUserProgress] = useState(() => {\n    const saved = localStorage.getItem('korean-alphabet-progress');\n    return saved ? JSON.parse(saved) : {\n      completedLetters: [],\n      scores: {},\n      currentLevel: 1,\n      totalScore: 0,\n      streakCount: 0,\n      lastPracticeDate: null,\n      achievements: [],\n      unlockedLetters: [1, 2, 3, 4, 5, 15, 16, 17, 18, 19], // Start with first 5 consonants and 5 vowels\n      exerciseStats: {\n        totalQuestions: 0,\n        correctAnswers: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        totalScore: 0,\n        averageScore: 0,\n        studyTimeMinutes: 0,\n        longestStreak: 0\n      },\n      milestones: {\n        lettersCompleted: 0,\n        perfectScores: 0,\n        weeklyGoal: false,\n        monthlyGoal: false\n      }\n    };\n  });\n\n  // Save progress to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('korean-alphabet-progress', JSON.stringify(userProgress));\n  }, [userProgress]);\n\n  // Mark a letter as completed\n  const markLetterCompleted = (letterId) => {\n    setUserProgress(prev => ({\n      ...prev,\n      completedLetters: [...new Set([...prev.completedLetters, letterId])]\n    }));\n  };\n\n  // Update score for a letter\n  const updateScore = (letterId, score) => {\n    setUserProgress(prev => {\n      const newScores = {\n        ...prev.scores,\n        [letterId]: Math.max(prev.scores[letterId] || 0, score)\n      };\n\n      // Mark letter as completed if score is high enough (>= 80%)\n      const shouldMarkCompleted = score >= 80 && !prev.completedLetters.includes(letterId);\n      const newCompletedLetters = shouldMarkCompleted\n        ? [...new Set([...prev.completedLetters, letterId])]\n        : prev.completedLetters;\n\n      // Update exercise statistics\n      const newStats = {\n        ...prev.exerciseStats,\n        totalQuestions: prev.exerciseStats.totalQuestions + 1,\n        correctAnswers: score >= 70 ? prev.exerciseStats.correctAnswers + 1 : prev.exerciseStats.correctAnswers,\n        totalScore: prev.exerciseStats.totalScore + score,\n        averageScore: Math.round((prev.exerciseStats.totalScore + score) / (prev.exerciseStats.totalQuestions + 1))\n      };\n\n      // Check if we should unlock new letters based on performance\n      const unlockedLetters = checkForUnlocks(newScores, prev.unlockedLetters);\n\n      // Check for new achievements\n      const currentProgress = {\n        ...prev,\n        scores: newScores,\n        completedLetters: newCompletedLetters,\n        unlockedLetters: unlockedLetters,\n        exerciseStats: newStats\n      };\n      const newAchievements = checkAchievements(currentProgress);\n\n      return {\n        ...prev,\n        scores: newScores,\n        completedLetters: newCompletedLetters,\n        totalScore: prev.totalScore + score,\n        lastPracticeDate: new Date().toISOString(),\n        unlockedLetters: unlockedLetters,\n        exerciseStats: newStats,\n        achievements: [...prev.achievements, ...newAchievements]\n      };\n    });\n  };\n\n  // Increment streak\n  const incrementStreak = () => {\n    setUserProgress(prev => ({\n      ...prev,\n      streakCount: prev.streakCount + 1\n    }));\n  };\n\n  // Reset streak\n  const resetStreak = () => {\n    setUserProgress(prev => ({\n      ...prev,\n      streakCount: 0\n    }));\n  };\n\n  // Add achievement\n  const addAchievement = (achievement) => {\n    setUserProgress(prev => ({\n      ...prev,\n      achievements: [...new Set([...prev.achievements, achievement])]\n    }));\n  };\n\n  // Get progress percentage\n  const getProgressPercentage = () => {\n    return Math.round((userProgress.completedLetters.length / 24) * 100);\n  };\n\n  // Check if letter is completed\n  const isLetterCompleted = (letterId) => {\n    return userProgress.completedLetters.includes(letterId);\n  };\n\n  // Get best score for a letter\n  const getBestScore = (letterId) => {\n    return userProgress.scores[letterId] || 0;\n  };\n\n  // Get average score across all letters\n  const getAverageScore = () => {\n    const scores = Object.values(userProgress.scores);\n    return scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0;\n  };\n\n  // Achievement definitions\n  const ACHIEVEMENTS = {\n    firstSteps: {\n      id: 'firstSteps',\n      name: 'First Steps',\n      description: 'Complete your first Korean letter',\n      icon: '🎯',\n      requirement: (progress) => progress.completedLetters.length >= 1,\n      reward: 'Unlocks letter practice'\n    },\n    basicConsonants: {\n      id: 'basicConsonants',\n      name: 'Basic Consonants',\n      description: 'Complete first 5 consonants',\n      icon: '🔤',\n      requirement: (progress) => {\n        const firstFiveConsonants = [1, 2, 3, 4, 5];\n        return firstFiveConsonants.every(id => progress.completedLetters.includes(id));\n      },\n      reward: 'Unlocks basic vowels'\n    },\n    basicVowels: {\n      id: 'basicVowels',\n      name: 'Basic Vowels',\n      description: 'Complete first 5 vowels',\n      icon: '📝',\n      requirement: (progress) => {\n        const firstFiveVowels = [15, 16, 17, 18, 19];\n        return firstFiveVowels.every(id => progress.completedLetters.includes(id));\n      },\n      reward: 'Unlocks compound vowels'\n    },\n    koreanScholar: {\n      id: 'koreanScholar',\n      name: 'Korean Scholar',\n      description: 'Complete 12 letters',\n      icon: '🎓',\n      requirement: (progress) => progress.completedLetters.length >= 12,\n      reward: 'Unlocks advanced exercises'\n    },\n    hangulMaster: {\n      id: 'hangulMaster',\n      name: 'Hangul Master',\n      description: 'Complete all 24 letters',\n      icon: '👑',\n      requirement: (progress) => progress.completedLetters.length >= 24,\n      reward: 'Complete alphabet mastery'\n    },\n    perfectionist: {\n      id: 'perfectionist',\n      name: 'Perfectionist',\n      description: 'Get 100% on an exercise',\n      icon: '💎',\n      requirement: (progress) => Object.values(progress.scores).some(score => score >= 100),\n      reward: 'Shows exceptional understanding'\n    },\n    streakMaster: {\n      id: 'streakMaster',\n      name: 'Streak Master',\n      description: 'Achieve a 10-day streak',\n      icon: '🔥',\n      requirement: (progress) => progress.streakCount >= 10,\n      reward: 'Consistent dedication'\n    },\n    speedLearner: {\n      id: 'speedLearner',\n      name: 'Speed Learner',\n      description: 'Complete 10 letters in one session',\n      icon: '⚡',\n      requirement: (progress) => progress.milestones.lettersCompleted >= 10,\n      reward: 'Rapid progress recognition'\n    },\n    dedicated: {\n      id: 'dedicated',\n      name: 'Dedicated Student',\n      description: 'Study for 60 minutes total',\n      icon: '📚',\n      requirement: (progress) => progress.exerciseStats.studyTimeMinutes >= 60,\n      reward: 'Commitment to learning'\n    }\n  };\n\n  // Check and unlock achievements\n  const checkAchievements = (currentProgress) => {\n    const newAchievements = [];\n    const existingAchievementIds = currentProgress.achievements.map(a => a.id);\n\n    Object.values(ACHIEVEMENTS).forEach(achievement => {\n      if (!existingAchievementIds.includes(achievement.id) && achievement.requirement(currentProgress)) {\n        newAchievements.push({\n          ...achievement,\n          unlockedAt: new Date().toISOString()\n        });\n      }\n    });\n\n    return newAchievements;\n  };\n\n  // Check if letter is unlocked\n  const isLetterUnlocked = (letterId) => {\n    return userProgress.unlockedLetters.includes(letterId);\n  };\n\n  // Get next letters to unlock based on performance\n  const checkForUnlocks = (currentScores, currentlyUnlocked) => {\n    const unlocked = [...currentlyUnlocked];\n    const currentLevel = Math.max(...koreanAlphabet\n      .filter(letter => currentlyUnlocked.includes(letter.id))\n      .map(letter => letter.difficulty), 1);\n\n    // Unlock letters of next difficulty level if performance is good\n    const currentLevelLetters = koreanAlphabet.filter(letter =>\n      letter.difficulty === currentLevel && currentlyUnlocked.includes(letter.id)\n    );\n\n    const averageCurrentLevelScore = currentLevelLetters.length > 0\n      ? currentLevelLetters.reduce((sum, letter) => sum + (currentScores[letter.id] || 0), 0) / currentLevelLetters.length\n      : 0;\n\n    // If average score for current level is > 70%, unlock next level\n    if (averageCurrentLevelScore > 70 && currentLevel < 4) {\n      const nextLevelLetters = koreanAlphabet.filter(letter => letter.difficulty === currentLevel + 1);\n      nextLevelLetters.forEach(letter => {\n        if (!unlocked.includes(letter.id)) {\n          unlocked.push(letter.id);\n        }\n      });\n    }\n\n    return unlocked;\n  };\n\n  // Get letters available for practice (unlocked letters)\n  const getAvailableLetters = () => {\n    return koreanAlphabet.filter(letter => isLetterUnlocked(letter.id));\n  };\n\n  // Get locked letters count\n  const getLockedLettersCount = () => {\n    return 24 - userProgress.unlockedLetters.length;\n  };\n\n  // Calculate overall progress percentage\n  const getOverallProgress = () => {\n    const unlockedCount = userProgress.unlockedLetters.length;\n    return Math.round((unlockedCount / 24) * 100);\n  };\n\n  // Get unlocked achievements\n  const getUnlockedAchievements = () => {\n    return userProgress.achievements;\n  };\n\n  // Get locked achievements\n  const getLockedAchievements = () => {\n    const unlockedIds = userProgress.achievements.map(a => a.id);\n    return Object.values(ACHIEVEMENTS).filter(achievement => !unlockedIds.includes(achievement.id));\n  };\n\n  // Get exercise statistics\n  const getExerciseStats = () => {\n    return userProgress.exerciseStats;\n  };\n\n  // Get detailed progress metrics\n  const getProgressMetrics = () => {\n    const totalLetters = 24;\n    const unlockedLetters = userProgress.unlockedLetters.length;\n    const completedLetters = userProgress.completedLetters.length;\n    const totalScore = userProgress.totalScore;\n    const averageScore = getAverageScore();\n\n    return {\n      totalLetters,\n      unlockedLetters,\n      completedLetters,\n      totalScore,\n      averageScore,\n      unlockProgress: Math.round((unlockedLetters / totalLetters) * 100),\n      completionProgress: Math.round((completedLetters / totalLetters) * 100),\n      currentLevel: Math.max(...koreanAlphabet\n        .filter(letter => userProgress.unlockedLetters.includes(letter.id))\n        .map(letter => letter.difficulty), 1)\n    };\n  };\n\n  // Reset all progress (for testing purposes)\n  const resetAllProgress = () => {\n    const initialProgress = {\n      completedLetters: [],\n      scores: {},\n      currentLevel: 1,\n      totalScore: 0,\n      streakCount: 0,\n      lastPracticeDate: null,\n      achievements: [],\n      unlockedLetters: [1, 2, 3, 4, 5, 15, 16, 17, 18, 19], // Start with first 5 consonants and 5 vowels\n      exerciseStats: {\n        totalQuestions: 0,\n        correctAnswers: 0,\n        currentStreak: 0,\n        bestStreak: 0,\n        totalScore: 0,\n        averageScore: 0,\n        studyTimeMinutes: 0,\n        longestStreak: 0\n      },\n      milestones: {\n        lettersCompleted: 0,\n        perfectScores: 0,\n        weeklyGoal: false,\n        monthlyGoal: false\n      }\n    };\n\n    setUserProgress(initialProgress);\n    localStorage.setItem('korean-alphabet-progress', JSON.stringify(initialProgress));\n  };\n\n  const value = {\n    userProgress,\n    markLetterCompleted,\n    updateScore,\n    incrementStreak,\n    resetStreak,\n    addAchievement,\n    getProgressPercentage,\n    isLetterCompleted,\n    getBestScore,\n    getAverageScore,\n    isLetterUnlocked,\n    getAvailableLetters,\n    getLockedLettersCount,\n    getOverallProgress,\n    getUnlockedAchievements,\n    getLockedAchievements,\n    getExerciseStats,\n    getProgressMetrics,\n    resetAllProgress,\n    ACHIEVEMENTS\n  };\n\n  return (\n    <ProgressContext.Provider value={value}>\n      {children}\n    </ProgressContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}