{"ast":null,"code":"var _jsxFileName = \"/Users/gabortabi/DEV/learnKorean/src/components/PracticeSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useProgress } from '../context/ProgressContext';\nimport { playLetterSound, preloadVoices, testKoreanCharacter, speakKorean, getKoreanCharacterSupport } from '../utils/audioUtils';\n\n// Exercise configuration with multiple question patterns\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EXERCISE_TYPES = {\n  'multiple-choice': {\n    name: 'Multiple Choice',\n    description: 'Choose the correct answer from options',\n    icon: '🔘',\n    questionCount: 3\n  },\n  'letter-to-sound': {\n    name: 'Letter to Sound',\n    description: 'Match Korean letters to their English sounds',\n    icon: '🔊',\n    questionCount: 2\n  },\n  'sound-to-letter': {\n    name: 'Sound to Letter',\n    description: 'Find the Korean letter that makes a specific sound',\n    icon: '📝',\n    questionCount: 3\n  },\n  'letter-matching': {\n    name: 'Letter Matching',\n    description: 'Match letters to their pronunciations',\n    icon: '🔗',\n    questionCount: 2\n  },\n  'word-association': {\n    name: 'Sound Association',\n    description: 'Match letters to words containing their sounds',\n    icon: '🌐',\n    questionCount: 3\n  }\n};\nconst PracticeSection = () => {\n  _s();\n  const {\n    updateScore,\n    getAvailableLetters\n  } = useProgress();\n  const [selectedExerciseType, setSelectedExerciseType] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  const [questionNumber, setQuestionNumber] = useState(1);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [showDebugPanel, setShowDebugPanel] = useState(false);\n\n  // Preload voices when component mounts\n  useEffect(() => {\n    preloadVoices();\n  }, []);\n\n  // Debug function for testing Korean characters\n  const debugKoreanCharacter = async character => {\n    console.log('=== DEBUGGING KOREAN CHARACTER ===');\n    console.log('Character:', character);\n    console.log('Unicode code point:', character.charCodeAt(0).toString(16));\n    try {\n      await testKoreanCharacter(character);\n      console.log('✅ Successfully played character');\n    } catch (error) {\n      console.error('❌ Failed to play character:', error);\n    }\n  };\n\n  // Generate focused questions about a specific letter with multiple variations\n  const generateQuestion = useCallback((exerciseType, targetLetter = null) => {\n    const availableLetters = getAvailableLetters();\n    if (availableLetters.length < 2) {\n      return {\n        type: 'insufficient-letters',\n        question: 'Complete more letters to unlock practice exercises!',\n        correctAnswer: null,\n        options: []\n      };\n    }\n\n    // Select a target letter to focus questions on\n    let focusLetter;\n    if (targetLetter && availableLetters.some(l => l.id === targetLetter.id)) {\n      focusLetter = targetLetter;\n    } else {\n      focusLetter = availableLetters[Math.floor(Math.random() * availableLetters.length)];\n    }\n\n    // Get other letters for options (excluding the focus letter)\n    const otherLetters = availableLetters.filter(l => l.id !== focusLetter.id);\n    const distractorLetters = otherLetters.sort(() => Math.random() - 0.5).slice(0, 3);\n    let question = {};\n    switch (exerciseType) {\n      case 'multiple-choice':\n        const letterQuestionPatterns = [`What is the name of this Korean letter: \"${focusLetter.koreanLetter}\"?`, `Which letter makes the \"${focusLetter.englishSound}\" sound?`, `What letter should you use for the \"${focusLetter.englishSound}\" sound?`];\n        const randomLetterPattern = letterQuestionPatterns[Math.floor(Math.random() * letterQuestionPatterns.length)];\n        question = {\n          type: 'multiple-choice',\n          question: randomLetterPattern,\n          correctAnswer: focusLetter.name,\n          options: [focusLetter, ...distractorLetters].map(l => l.name).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n      case 'letter-to-sound':\n        const soundQuestionPatterns = [`What sound does \"${focusLetter.koreanLetter}\" make?`, `How do you pronounce \"${focusLetter.koreanLetter}\"?`, `What is the English sound for \"${focusLetter.koreanLetter}\"?`];\n        const randomSoundQuestionPattern = soundQuestionPatterns[Math.floor(Math.random() * soundQuestionPatterns.length)];\n        question = {\n          type: 'letter-to-sound',\n          question: randomSoundQuestionPattern,\n          correctAnswer: focusLetter.englishSound,\n          options: [focusLetter, ...distractorLetters].map(l => l.englishSound).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n      case 'sound-to-letter':\n        const reverseQuestionPatterns = [`Which Korean letter makes the \"${focusLetter.englishSound}\" sound?`, `What letter should you use for the \"${focusLetter.englishSound}\" sound?`, `If you want to make the \"${focusLetter.englishSound}\" sound, which letter do you use?`];\n        const randomReversePattern = reverseQuestionPatterns[Math.floor(Math.random() * reverseQuestionPatterns.length)];\n        question = {\n          type: 'sound-to-letter',\n          question: randomReversePattern,\n          correctAnswer: focusLetter.koreanLetter,\n          options: [focusLetter, ...distractorLetters].map(l => l.koreanLetter).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n      case 'letter-matching':\n        const matchQuestionPatterns = [`What is the romanization of \"${focusLetter.koreanLetter}\"?`, `How do you write \"${focusLetter.koreanLetter}\" in English letters?`, `What is the English spelling for \"${focusLetter.koreanLetter}\"?`];\n        const randomMatchQuestionPattern = matchQuestionPatterns[Math.floor(Math.random() * matchQuestionPatterns.length)];\n        question = {\n          type: 'letter-matching',\n          question: randomMatchQuestionPattern,\n          correctAnswer: focusLetter.romanization,\n          options: [focusLetter, ...distractorLetters].map(l => l.romanization).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n      case 'word-association':\n        const wordOptions = focusLetter.exampleWords.slice(0, 3);\n        const displayWord = wordOptions[Math.floor(Math.random() * wordOptions.length)];\n        const associationQuestionPatterns = [`Which letter makes the \"${focusLetter.englishSound}\" sound found in \"${displayWord}\"?`, `What letter would you use to start writing \"${displayWord}\" in Korean?`, `Which Korean letter sounds like the beginning of \"${displayWord}\"?`];\n        const randomAssociationQuestionPattern = associationQuestionPatterns[Math.floor(Math.random() * associationQuestionPatterns.length)];\n        question = {\n          type: 'word-association',\n          question: randomAssociationQuestionPattern,\n          correctAnswer: focusLetter.name,\n          options: [focusLetter, ...distractorLetters].map(l => l.name).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n      default:\n        return generateQuestion('multiple-choice', focusLetter);\n    }\n    return question;\n  }, [getAvailableLetters]);\n  const startExercise = exerciseType => {\n    setSelectedExerciseType(exerciseType);\n\n    // Generate first question\n    const firstQuestion = generateQuestion(exerciseType);\n    setCurrentQuestion(firstQuestion);\n    setSelectedAnswer(null);\n    setShowResult(false);\n    setQuestionNumber(1);\n    setScore(0);\n  };\n  const checkAnswer = () => {\n    if (!selectedAnswer) return;\n    setShowResult(true);\n    const isCorrect = selectedAnswer === currentQuestion.correctAnswer;\n    if (isCorrect) {\n      const points = Math.max(10, 20 - questionNumber * 2);\n      setScore(prev => prev + points);\n\n      // Update score for the letter\n      if (currentQuestion.letter) {\n        updateScore(currentQuestion.letter.id, 100);\n      }\n    }\n  };\n  const nextQuestion = () => {\n    if (questionNumber >= 10) {\n      finishExercise();\n      return;\n    }\n    setQuestionNumber(prev => prev + 1);\n    const newQuestion = generateQuestion(selectedExerciseType);\n    setCurrentQuestion(newQuestion);\n    setSelectedAnswer(null);\n    setShowResult(false);\n  };\n  const finishExercise = () => {\n    setSelectedExerciseType(null);\n    setCurrentQuestion(null);\n    setScore(0);\n  };\n  const getOptionButtonClass = option => {\n    let baseClass = 'option-btn';\n    if (selectedAnswer === option) baseClass += ' selected';\n    if (showResult) {\n      if (option === currentQuestion.correctAnswer) {\n        baseClass += ' correct';\n      } else if (selectedAnswer === option) {\n        baseClass += ' incorrect';\n      }\n    }\n    return baseClass;\n  };\n\n  // Audio playback handler\n  const handlePlayLetterSound = async letter => {\n    if (isPlaying) return;\n    setIsPlaying(true);\n    try {\n      var _letter$koreanLetter, _letter$koreanLetter$;\n      console.log('Attempting to play sound for letter:', letter);\n      console.log('Letter Korean character:', letter === null || letter === void 0 ? void 0 : letter.koreanLetter, 'Unicode:', letter === null || letter === void 0 ? void 0 : (_letter$koreanLetter = letter.koreanLetter) === null || _letter$koreanLetter === void 0 ? void 0 : (_letter$koreanLetter$ = _letter$koreanLetter.charCodeAt(0)) === null || _letter$koreanLetter$ === void 0 ? void 0 : _letter$koreanLetter$.toString(16));\n      await playLetterSound(letter);\n      console.log('Successfully played sound for letter:', letter.name);\n    } catch (error) {\n      console.error('Error playing letter sound for', letter === null || letter === void 0 ? void 0 : letter.name, ':', error);\n      console.error('Letter data:', letter);\n\n      // Enhanced debugging for Korean characters\n      if (letter !== null && letter !== void 0 && letter.koreanLetter) {\n        console.log('Debugging Korean character:', letter.koreanLetter);\n        console.log('Character analysis:', {\n          character: letter.koreanLetter,\n          charCode: letter.koreanLetter.charCodeAt(0),\n          hexCode: letter.koreanLetter.charCodeAt(0).toString(16),\n          isInKoreanRange: letter.koreanLetter.charCodeAt(0) >= 0xAC00 && letter.koreanLetter.charCodeAt(0) <= 0xD7AF,\n          isJamo: letter.koreanLetter.charCodeAt(0) >= 0x1100 && letter.koreanLetter.charCodeAt(0) <= 0x11FF\n        });\n      }\n\n      // Enhanced fallback using example words\n      const isVowel = (letter === null || letter === void 0 ? void 0 : letter.category) === 'vowel';\n      const charName = (letter === null || letter === void 0 ? void 0 : letter.koreanLetter) || 'unknown character';\n      if (isVowel && letter !== null && letter !== void 0 && letter.englishSound) {\n        // For vowels, we can try to speak the English sound description\n        console.log('Attempting to speak English sound description as fallback');\n        try {\n          await speakKorean(letter.englishSound, {\n            rate: 0.8\n          });\n          console.log('Successfully played English sound description');\n          return;\n        } catch (englishError) {\n          console.error('English fallback also failed:', englishError);\n        }\n      }\n\n      // Try using example words if available\n      if (letter !== null && letter !== void 0 && letter.exampleWords && letter.exampleWords.length > 0) {\n        console.log('Attempting to use example words for fallback');\n        for (const exampleWord of letter.exampleWords.slice(0, 2)) {\n          // Try first 2 examples\n          try {\n            await speakKorean(exampleWord, {\n              rate: 0.7\n            });\n            console.log(`Successfully played example word: ${exampleWord}`);\n            return;\n          } catch (wordError) {\n            console.error(`Example word \"${exampleWord}\" also failed:`, wordError);\n          }\n        }\n      }\n\n      // Show comprehensive user-friendly error message\n      const message = `Unable to play pronunciation for \"${charName}\" (${(letter === null || letter === void 0 ? void 0 : letter.name) || 'unknown'}).\\n\\n` + `Troubleshooting steps:\\n` + `1. Try a different browser (Chrome often works best for Korean)\\n` + `2. Check if Korean language support is installed in your OS\\n` + `3. The sound \"${(letter === null || letter === void 0 ? void 0 : letter.englishSound) || 'N/A'}\" can help you learn the pronunciation\\n` + `4. This is a known limitation with some Korean characters in certain browsers\\n\\n` + `Technical details have been logged to the browser console for debugging.`;\n      alert(message);\n    } finally {\n      setIsPlaying(false);\n    }\n  };\n  if (!selectedExerciseType) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"practice-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Practice Exercises\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Choose an exercise type to test your Korean alphabet knowledge.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"debug-panel\",\n          style: {\n            backgroundColor: '#fff3cd',\n            border: '1px solid #ffeaa7',\n            borderRadius: '8px',\n            padding: '1rem',\n            marginBottom: '1rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              color: '#856404',\n              marginBottom: '0.5rem'\n            },\n            children: \"\\uD83D\\uDD27 Debug Panel (Development Only)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: '#856404',\n              fontSize: '0.9rem',\n              marginBottom: '0.5rem'\n            },\n            children: \"Test Korean character pronunciation:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              gap: '0.5rem',\n              flexWrap: 'wrap'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => debugKoreanCharacter('ㅑ'),\n              style: {\n                backgroundColor: '#dc3545',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                padding: '0.25rem 0.5rem',\n                fontSize: '0.8rem',\n                cursor: 'pointer',\n                fontWeight: 'bold'\n              },\n              title: \"This character has known issues - testing enhanced fallback system\",\n              children: \"\\uD83D\\uDEA8 Test \\u3151 (ya) - Problematic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => debugKoreanCharacter('ㄱ'),\n              style: {\n                backgroundColor: '#28a745',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                padding: '0.25rem 0.5rem',\n                fontSize: '0.8rem',\n                cursor: 'pointer'\n              },\n              title: \"This character usually works well\",\n              children: \"\\u2705 Test \\u3131 (g/k) - Working\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => debugKoreanCharacter('ㅏ'),\n              style: {\n                backgroundColor: '#ffc107',\n                color: '#212529',\n                border: 'none',\n                borderRadius: '4px',\n                padding: '0.25rem 0.5rem',\n                fontSize: '0.8rem',\n                cursor: 'pointer'\n              },\n              children: \"Test \\u314F (a)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: '#856404',\n              fontSize: '0.8rem',\n              marginTop: '0.5rem'\n            },\n            children: \"Check browser console for detailed debugging information.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exercise-types\",\n          children: Object.entries(EXERCISE_TYPES).map(([type, config]) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"exercise-type-btn\",\n            onClick: () => startExercise(type),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"exercise-icon\",\n              children: config.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"exercise-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: config.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: config.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 17\n            }, this)]\n          }, type, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"practice-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: EXERCISE_TYPES[selectedExerciseType].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exercise-progress\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Question \", questionNumber, \"/10\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Score: \", score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this), currentQuestion.type === 'insufficient-letters' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"insufficient-letters\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uD83D\\uDCDA You need at least 2 unlocked letters to practice.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Complete some letters in the Learn section first!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 13\n        }, this) : currentQuestion.letter && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-letter\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"letter-with-sound\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"korean-letter-large\",\n              children: currentQuestion.letter.koreanLetter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `letter-sound-btn ${isPlaying ? 'playing' : ''} ${getKoreanCharacterSupport(currentQuestion.letter.koreanLetter).support === 'limited' ? 'limited-support' : ''}`,\n              onClick: () => handlePlayLetterSound(currentQuestion.letter),\n              disabled: isPlaying,\n              \"aria-label\": `Play sound for ${currentQuestion.letter.name}`,\n              title: `${getKoreanCharacterSupport(currentQuestion.letter.koreanLetter).support === 'limited' ? 'Limited browser support - ' : ''}Hear pronunciation of ${currentQuestion.letter.name}`,\n              children: \"\\uD83D\\uDD0A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"letter-metadata\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `category-tag ${currentQuestion.letter.category}`,\n              children: currentQuestion.letter.category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `difficulty-tag difficulty-${currentQuestion.letter.difficulty}`,\n              children: [\"Level \", currentQuestion.letter.difficulty]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answer-options\",\n          children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `option-btn ${getOptionButtonClass(option)}`,\n            onClick: () => !showResult && setSelectedAnswer(option),\n            disabled: showResult,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"option-letter\",\n              children: String.fromCharCode(65 + index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"option-text\",\n              children: option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), showResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `feedback ${selectedAnswer === currentQuestion.correctAnswer ? 'correct' : 'incorrect'}`,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: selectedAnswer === currentQuestion.correctAnswer ? 'Correct! Well done!' : `Incorrect. The correct answer is \"${currentQuestion.correctAnswer}\".`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"letter-explanation\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [currentQuestion.letter.name, \" (\", currentQuestion.letter.koreanLetter, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Romanization:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 20\n              }, this), \" \", currentQuestion.letter.romanization]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Pronunciation:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 20\n              }, this), \" \", currentQuestion.letter.englishComparison]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"next-btn\",\n            onClick: nextQuestion,\n            children: questionNumber >= 10 ? 'Finish Exercise' : 'Next Question'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this), !showResult && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"check-btn\",\n          onClick: checkAnswer,\n          disabled: !selectedAnswer,\n          children: \"Check Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 5\n  }, this);\n};\n_s(PracticeSection, \"Pqne/Q9pESQLlZeYf0iUPqcpdog=\", false, function () {\n  return [useProgress];\n});\n_c = PracticeSection;\nexport default PracticeSection;\nvar _c;\n$RefreshReg$(_c, \"PracticeSection\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useProgress","playLetterSound","preloadVoices","testKoreanCharacter","speakKorean","getKoreanCharacterSupport","jsxDEV","_jsxDEV","EXERCISE_TYPES","name","description","icon","questionCount","PracticeSection","_s","updateScore","getAvailableLetters","selectedExerciseType","setSelectedExerciseType","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","showResult","setShowResult","questionNumber","setQuestionNumber","score","setScore","isPlaying","setIsPlaying","showDebugPanel","setShowDebugPanel","debugKoreanCharacter","character","console","log","charCodeAt","toString","error","generateQuestion","exerciseType","targetLetter","availableLetters","length","type","question","correctAnswer","options","focusLetter","some","l","id","Math","floor","random","otherLetters","filter","distractorLetters","sort","slice","letterQuestionPatterns","koreanLetter","englishSound","randomLetterPattern","map","letter","soundQuestionPatterns","randomSoundQuestionPattern","reverseQuestionPatterns","randomReversePattern","matchQuestionPatterns","randomMatchQuestionPattern","romanization","wordOptions","exampleWords","displayWord","associationQuestionPatterns","randomAssociationQuestionPattern","startExercise","firstQuestion","checkAnswer","isCorrect","points","max","prev","nextQuestion","finishExercise","newQuestion","getOptionButtonClass","option","baseClass","handlePlayLetterSound","_letter$koreanLetter","_letter$koreanLetter$","charCode","hexCode","isInKoreanRange","isJamo","isVowel","category","charName","rate","englishError","exampleWord","wordError","message","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","process","env","NODE_ENV","style","backgroundColor","border","borderRadius","padding","marginBottom","color","fontSize","display","gap","flexWrap","onClick","cursor","fontWeight","title","marginTop","Object","entries","config","support","disabled","difficulty","index","String","fromCharCode","englishComparison","_c","$RefreshReg$"],"sources":["/Users/gabortabi/DEV/learnKorean/src/components/PracticeSection.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { useProgress } from '../context/ProgressContext';\nimport { playLetterSound, preloadVoices, testKoreanCharacter, speakKorean, getKoreanCharacterSupport } from '../utils/audioUtils';\n\n// Exercise configuration with multiple question patterns\nconst EXERCISE_TYPES = {\n  'multiple-choice': {\n    name: 'Multiple Choice',\n    description: 'Choose the correct answer from options',\n    icon: '🔘',\n    questionCount: 3\n  },\n  'letter-to-sound': {\n    name: 'Letter to Sound',\n    description: 'Match Korean letters to their English sounds',\n    icon: '🔊',\n    questionCount: 2\n  },\n  'sound-to-letter': {\n    name: 'Sound to Letter',\n    description: 'Find the Korean letter that makes a specific sound',\n    icon: '📝',\n    questionCount: 3\n  },\n  'letter-matching': {\n    name: 'Letter Matching',\n    description: 'Match letters to their pronunciations',\n    icon: '🔗',\n    questionCount: 2\n  },\n  'word-association': {\n    name: 'Sound Association',\n    description: 'Match letters to words containing their sounds',\n    icon: '🌐',\n    questionCount: 3\n  }\n};\n\nconst PracticeSection = () => {\n  const { updateScore, getAvailableLetters } = useProgress();\n  const [selectedExerciseType, setSelectedExerciseType] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  const [questionNumber, setQuestionNumber] = useState(1);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [showDebugPanel, setShowDebugPanel] = useState(false);\n\n  // Preload voices when component mounts\n  useEffect(() => {\n    preloadVoices();\n  }, []);\n\n  // Debug function for testing Korean characters\n  const debugKoreanCharacter = async (character) => {\n    console.log('=== DEBUGGING KOREAN CHARACTER ===');\n    console.log('Character:', character);\n    console.log('Unicode code point:', character.charCodeAt(0).toString(16));\n\n    try {\n      await testKoreanCharacter(character);\n      console.log('✅ Successfully played character');\n    } catch (error) {\n      console.error('❌ Failed to play character:', error);\n    }\n  };\n\n  // Generate focused questions about a specific letter with multiple variations\n  const generateQuestion = useCallback((exerciseType, targetLetter = null) => {\n    const availableLetters = getAvailableLetters();\n\n    if (availableLetters.length < 2) {\n      return {\n        type: 'insufficient-letters',\n        question: 'Complete more letters to unlock practice exercises!',\n        correctAnswer: null,\n        options: []\n      };\n    }\n\n    // Select a target letter to focus questions on\n    let focusLetter;\n    if (targetLetter && availableLetters.some(l => l.id === targetLetter.id)) {\n      focusLetter = targetLetter;\n    } else {\n      focusLetter = availableLetters[Math.floor(Math.random() * availableLetters.length)];\n    }\n\n    // Get other letters for options (excluding the focus letter)\n    const otherLetters = availableLetters.filter(l => l.id !== focusLetter.id);\n    const distractorLetters = otherLetters.sort(() => Math.random() - 0.5).slice(0, 3);\n\n    let question = {};\n\n    switch (exerciseType) {\n      case 'multiple-choice':\n        const letterQuestionPatterns = [\n          `What is the name of this Korean letter: \"${focusLetter.koreanLetter}\"?`,\n          `Which letter makes the \"${focusLetter.englishSound}\" sound?`,\n          `What letter should you use for the \"${focusLetter.englishSound}\" sound?`\n        ];\n        const randomLetterPattern = letterQuestionPatterns[Math.floor(Math.random() * letterQuestionPatterns.length)];\n\n        question = {\n          type: 'multiple-choice',\n          question: randomLetterPattern,\n          correctAnswer: focusLetter.name,\n          options: [focusLetter, ...distractorLetters].map(l => l.name).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'letter-to-sound':\n        const soundQuestionPatterns = [\n          `What sound does \"${focusLetter.koreanLetter}\" make?`,\n          `How do you pronounce \"${focusLetter.koreanLetter}\"?`,\n          `What is the English sound for \"${focusLetter.koreanLetter}\"?`\n        ];\n        const randomSoundQuestionPattern = soundQuestionPatterns[Math.floor(Math.random() * soundQuestionPatterns.length)];\n\n        question = {\n          type: 'letter-to-sound',\n          question: randomSoundQuestionPattern,\n          correctAnswer: focusLetter.englishSound,\n          options: [focusLetter, ...distractorLetters].map(l => l.englishSound).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'sound-to-letter':\n        const reverseQuestionPatterns = [\n          `Which Korean letter makes the \"${focusLetter.englishSound}\" sound?`,\n          `What letter should you use for the \"${focusLetter.englishSound}\" sound?`,\n          `If you want to make the \"${focusLetter.englishSound}\" sound, which letter do you use?`\n        ];\n        const randomReversePattern = reverseQuestionPatterns[Math.floor(Math.random() * reverseQuestionPatterns.length)];\n\n        question = {\n          type: 'sound-to-letter',\n          question: randomReversePattern,\n          correctAnswer: focusLetter.koreanLetter,\n          options: [focusLetter, ...distractorLetters].map(l => l.koreanLetter).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'letter-matching':\n        const matchQuestionPatterns = [\n          `What is the romanization of \"${focusLetter.koreanLetter}\"?`,\n          `How do you write \"${focusLetter.koreanLetter}\" in English letters?`,\n          `What is the English spelling for \"${focusLetter.koreanLetter}\"?`\n        ];\n        const randomMatchQuestionPattern = matchQuestionPatterns[Math.floor(Math.random() * matchQuestionPatterns.length)];\n\n        question = {\n          type: 'letter-matching',\n          question: randomMatchQuestionPattern,\n          correctAnswer: focusLetter.romanization,\n          options: [focusLetter, ...distractorLetters].map(l => l.romanization).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'word-association':\n        const wordOptions = focusLetter.exampleWords.slice(0, 3);\n        const displayWord = wordOptions[Math.floor(Math.random() * wordOptions.length)];\n\n        const associationQuestionPatterns = [\n          `Which letter makes the \"${focusLetter.englishSound}\" sound found in \"${displayWord}\"?`,\n          `What letter would you use to start writing \"${displayWord}\" in Korean?`,\n          `Which Korean letter sounds like the beginning of \"${displayWord}\"?`\n        ];\n        const randomAssociationQuestionPattern = associationQuestionPatterns[Math.floor(Math.random() * associationQuestionPatterns.length)];\n\n        question = {\n          type: 'word-association',\n          question: randomAssociationQuestionPattern,\n          correctAnswer: focusLetter.name,\n          options: [focusLetter, ...distractorLetters].map(l => l.name).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      default:\n        return generateQuestion('multiple-choice', focusLetter);\n    }\n\n    return question;\n  }, [getAvailableLetters]);\n\n  const startExercise = (exerciseType) => {\n    setSelectedExerciseType(exerciseType);\n\n    // Generate first question\n    const firstQuestion = generateQuestion(exerciseType);\n    setCurrentQuestion(firstQuestion);\n\n    setSelectedAnswer(null);\n    setShowResult(false);\n    setQuestionNumber(1);\n    setScore(0);\n  };\n\n  const checkAnswer = () => {\n    if (!selectedAnswer) return;\n\n    setShowResult(true);\n    const isCorrect = selectedAnswer === currentQuestion.correctAnswer;\n\n    if (isCorrect) {\n      const points = Math.max(10, 20 - (questionNumber * 2));\n      setScore(prev => prev + points);\n\n      // Update score for the letter\n      if (currentQuestion.letter) {\n        updateScore(currentQuestion.letter.id, 100);\n      }\n    }\n  };\n\n  const nextQuestion = () => {\n    if (questionNumber >= 10) {\n      finishExercise();\n      return;\n    }\n\n    setQuestionNumber(prev => prev + 1);\n    const newQuestion = generateQuestion(selectedExerciseType);\n    setCurrentQuestion(newQuestion);\n    setSelectedAnswer(null);\n    setShowResult(false);\n  };\n\n  const finishExercise = () => {\n    setSelectedExerciseType(null);\n    setCurrentQuestion(null);\n    setScore(0);\n  };\n\n  const getOptionButtonClass = (option) => {\n    let baseClass = 'option-btn';\n    if (selectedAnswer === option) baseClass += ' selected';\n    if (showResult) {\n      if (option === currentQuestion.correctAnswer) {\n        baseClass += ' correct';\n      } else if (selectedAnswer === option) {\n        baseClass += ' incorrect';\n      }\n    }\n    return baseClass;\n  };\n\n  // Audio playback handler\n  const handlePlayLetterSound = async (letter) => {\n    if (isPlaying) return;\n\n    setIsPlaying(true);\n    try {\n      console.log('Attempting to play sound for letter:', letter);\n      console.log('Letter Korean character:', letter?.koreanLetter, 'Unicode:', letter?.koreanLetter?.charCodeAt(0)?.toString(16));\n\n      await playLetterSound(letter);\n      console.log('Successfully played sound for letter:', letter.name);\n    } catch (error) {\n      console.error('Error playing letter sound for', letter?.name, ':', error);\n      console.error('Letter data:', letter);\n\n      // Enhanced debugging for Korean characters\n      if (letter?.koreanLetter) {\n        console.log('Debugging Korean character:', letter.koreanLetter);\n        console.log('Character analysis:', {\n          character: letter.koreanLetter,\n          charCode: letter.koreanLetter.charCodeAt(0),\n          hexCode: letter.koreanLetter.charCodeAt(0).toString(16),\n          isInKoreanRange: letter.koreanLetter.charCodeAt(0) >= 0xAC00 && letter.koreanLetter.charCodeAt(0) <= 0xD7AF,\n          isJamo: letter.koreanLetter.charCodeAt(0) >= 0x1100 && letter.koreanLetter.charCodeAt(0) <= 0x11FF\n        });\n      }\n\n      // Enhanced fallback using example words\n      const isVowel = letter?.category === 'vowel';\n      const charName = letter?.koreanLetter || 'unknown character';\n\n      if (isVowel && letter?.englishSound) {\n        // For vowels, we can try to speak the English sound description\n        console.log('Attempting to speak English sound description as fallback');\n        try {\n          await speakKorean(letter.englishSound, { rate: 0.8 });\n          console.log('Successfully played English sound description');\n          return;\n        } catch (englishError) {\n          console.error('English fallback also failed:', englishError);\n        }\n      }\n\n      // Try using example words if available\n      if (letter?.exampleWords && letter.exampleWords.length > 0) {\n        console.log('Attempting to use example words for fallback');\n        for (const exampleWord of letter.exampleWords.slice(0, 2)) { // Try first 2 examples\n          try {\n            await speakKorean(exampleWord, { rate: 0.7 });\n            console.log(`Successfully played example word: ${exampleWord}`);\n            return;\n          } catch (wordError) {\n            console.error(`Example word \"${exampleWord}\" also failed:`, wordError);\n          }\n        }\n      }\n\n      // Show comprehensive user-friendly error message\n      const message = `Unable to play pronunciation for \"${charName}\" (${letter?.name || 'unknown'}).\\n\\n` +\n        `Troubleshooting steps:\\n` +\n        `1. Try a different browser (Chrome often works best for Korean)\\n` +\n        `2. Check if Korean language support is installed in your OS\\n` +\n        `3. The sound \"${letter?.englishSound || 'N/A'}\" can help you learn the pronunciation\\n` +\n        `4. This is a known limitation with some Korean characters in certain browsers\\n\\n` +\n        `Technical details have been logged to the browser console for debugging.`;\n\n      alert(message);\n    } finally {\n      setIsPlaying(false);\n    }\n  };\n\n  if (!selectedExerciseType) {\n    return (\n      <div className=\"practice-section\">\n        <div className=\"section-header\">\n          <h2>Practice Exercises</h2>\n          <p>Choose an exercise type to test your Korean alphabet knowledge.</p>\n\n          {/* Debug panel for development */}\n          {process.env.NODE_ENV === 'development' && (\n            <div className=\"debug-panel\" style={{\n              backgroundColor: '#fff3cd',\n              border: '1px solid #ffeaa7',\n              borderRadius: '8px',\n              padding: '1rem',\n              marginBottom: '1rem'\n            }}>\n              <h4 style={{ color: '#856404', marginBottom: '0.5rem' }}>🔧 Debug Panel (Development Only)</h4>\n              <p style={{ color: '#856404', fontSize: '0.9rem', marginBottom: '0.5rem' }}>\n                Test Korean character pronunciation:\n              </p>\n              <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\n                <button\n                  onClick={() => debugKoreanCharacter('ㅑ')}\n                  style={{\n                    backgroundColor: '#dc3545',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    padding: '0.25rem 0.5rem',\n                    fontSize: '0.8rem',\n                    cursor: 'pointer',\n                    fontWeight: 'bold'\n                  }}\n                  title=\"This character has known issues - testing enhanced fallback system\"\n                >\n                  🚨 Test ㅑ (ya) - Problematic\n                </button>\n                <button\n                  onClick={() => debugKoreanCharacter('ㄱ')}\n                  style={{\n                    backgroundColor: '#28a745',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    padding: '0.25rem 0.5rem',\n                    fontSize: '0.8rem',\n                    cursor: 'pointer'\n                  }}\n                  title=\"This character usually works well\"\n                >\n                  ✅ Test ㄱ (g/k) - Working\n                </button>\n                <button\n                  onClick={() => debugKoreanCharacter('ㅏ')}\n                  style={{\n                    backgroundColor: '#ffc107',\n                    color: '#212529',\n                    border: 'none',\n                    borderRadius: '4px',\n                    padding: '0.25rem 0.5rem',\n                    fontSize: '0.8rem',\n                    cursor: 'pointer'\n                  }}\n                >\n                  Test ㅏ (a)\n                </button>\n              </div>\n              <p style={{ color: '#856404', fontSize: '0.8rem', marginTop: '0.5rem' }}>\n                Check browser console for detailed debugging information.\n              </p>\n            </div>\n          )}\n\n          <div className=\"exercise-types\">\n            {Object.entries(EXERCISE_TYPES).map(([type, config]) => (\n              <button\n                key={type}\n                className=\"exercise-type-btn\"\n                onClick={() => startExercise(type)}\n              >\n                <div className=\"exercise-icon\">{config.icon}</div>\n                <div className=\"exercise-info\">\n                  <h3>{config.name}</h3>\n                  <p>{config.description}</p>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"practice-section\">\n      <div className=\"section-header\">\n        <div className=\"exercise-header\">\n          <h2>{EXERCISE_TYPES[selectedExerciseType].name}</h2>\n          <div className=\"exercise-progress\">\n            <span>Question {questionNumber}/10</span>\n            <span>Score: {score}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"exercise-container\">\n        <div className=\"exercise-question\">\n          <h3>{currentQuestion.question}</h3>\n          {currentQuestion.type === 'insufficient-letters' ? (\n            <div className=\"insufficient-letters\">\n              <p>📚 You need at least 2 unlocked letters to practice.</p>\n              <p>Complete some letters in the Learn section first!</p>\n            </div>\n          ) : (\n            currentQuestion.letter && (\n              <div className=\"question-letter\">\n                <div className=\"letter-with-sound\">\n                  <span className=\"korean-letter-large\">{currentQuestion.letter.koreanLetter}</span>\n                  <button\n                    className={`letter-sound-btn ${isPlaying ? 'playing' : ''} ${getKoreanCharacterSupport(currentQuestion.letter.koreanLetter).support === 'limited' ? 'limited-support' : ''}`}\n                    onClick={() => handlePlayLetterSound(currentQuestion.letter)}\n                    disabled={isPlaying}\n                    aria-label={`Play sound for ${currentQuestion.letter.name}`}\n                    title={`${getKoreanCharacterSupport(currentQuestion.letter.koreanLetter).support === 'limited' ? 'Limited browser support - ' : ''}Hear pronunciation of ${currentQuestion.letter.name}`}\n                  >\n                    🔊\n                  </button>\n                </div>\n                <div className=\"letter-metadata\">\n                  <span className={`category-tag ${currentQuestion.letter.category}`}>\n                    {currentQuestion.letter.category}\n                  </span>\n                  <span className={`difficulty-tag difficulty-${currentQuestion.letter.difficulty}`}>\n                    Level {currentQuestion.letter.difficulty}\n                  </span>\n                </div>\n              </div>\n            )\n          )}\n\n          <div className=\"answer-options\">\n            {currentQuestion.options.map((option, index) => (\n              <button\n                key={index}\n                className={`option-btn ${getOptionButtonClass(option)}`}\n                onClick={() => !showResult && setSelectedAnswer(option)}\n                disabled={showResult}\n              >\n                <span className=\"option-letter\">{String.fromCharCode(65 + index)}</span>\n                <span className=\"option-text\">{option}</span>\n              </button>\n            ))}\n          </div>\n\n          {showResult && (\n            <div className=\"result-section\">\n              <div className={`feedback ${selectedAnswer === currentQuestion.correctAnswer ? 'correct' : 'incorrect'}`}>\n                <p>\n                  {selectedAnswer === currentQuestion.correctAnswer\n                    ? 'Correct! Well done!'\n                    : `Incorrect. The correct answer is \"${currentQuestion.correctAnswer}\".`\n                  }\n                </p>\n              </div>\n\n              <div className=\"letter-explanation\">\n                <h4>{currentQuestion.letter.name} ({currentQuestion.letter.koreanLetter})</h4>\n                <p><strong>Romanization:</strong> {currentQuestion.letter.romanization}</p>\n                <p><strong>Pronunciation:</strong> {currentQuestion.letter.englishComparison}</p>\n              </div>\n\n              <button className=\"next-btn\" onClick={nextQuestion}>\n                {questionNumber >= 10 ? 'Finish Exercise' : 'Next Question'}\n              </button>\n            </div>\n          )}\n\n          {!showResult && (\n            <button className=\"check-btn\" onClick={checkAnswer} disabled={!selectedAnswer}>\n              Check Answer\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PracticeSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}