{"ast":null,"code":"var _jsxFileName = \"/Users/gabortabi/DEV/learnKorean/src/components/PracticeSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useProgress } from '../context/ProgressContext';\nimport { playLetterSound, preloadVoices } from '../utils/audioUtils';\n\n// Exercise configuration with multiple question patterns\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EXERCISE_TYPES = {\n  'multiple-choice': {\n    name: 'Multiple Choice',\n    description: 'Choose the correct answer from options',\n    icon: '🔘',\n    questionCount: 3\n  },\n  'letter-to-sound': {\n    name: 'Letter to Sound',\n    description: 'Match Korean letters to their English sounds',\n    icon: '🔊',\n    questionCount: 2\n  },\n  'sound-to-letter': {\n    name: 'Sound to Letter',\n    description: 'Find the Korean letter that makes a specific sound',\n    icon: '📝',\n    questionCount: 3\n  },\n  'letter-matching': {\n    name: 'Letter Matching',\n    description: 'Match letters to their pronunciations',\n    icon: '🔗',\n    questionCount: 2\n  },\n  'word-association': {\n    name: 'Sound Association',\n    description: 'Match letters to words containing their sounds',\n    icon: '🌐',\n    questionCount: 3\n  }\n};\nconst PracticeSection = () => {\n  _s();\n  const {\n    updateScore,\n    getAvailableLetters\n  } = useProgress();\n  const [selectedExerciseType, setSelectedExerciseType] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  const [questionNumber, setQuestionNumber] = useState(1);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Preload voices when component mounts\n  useEffect(() => {\n    preloadVoices();\n  }, []);\n\n  // Generate focused questions about a specific letter with multiple variations\n  const generateQuestion = useCallback((exerciseType, targetLetter = null) => {\n    const availableLetters = getAvailableLetters();\n    if (availableLetters.length < 2) {\n      return {\n        type: 'insufficient-letters',\n        question: 'Complete more letters to unlock practice exercises!',\n        correctAnswer: null,\n        options: []\n      };\n    }\n\n    // Select a target letter to focus questions on\n    let focusLetter;\n    if (targetLetter && availableLetters.some(l => l.id === targetLetter.id)) {\n      focusLetter = targetLetter;\n    } else {\n      focusLetter = availableLetters[Math.floor(Math.random() * availableLetters.length)];\n    }\n\n    // Get other letters for options (excluding the focus letter)\n    const otherLetters = availableLetters.filter(l => l.id !== focusLetter.id);\n    const distractorLetters = otherLetters.sort(() => Math.random() - 0.5).slice(0, 3);\n    let question = {};\n    switch (exerciseType) {\n      case 'multiple-choice':\n        const letterQuestionPatterns = [`What is the name of this Korean letter: \"${focusLetter.koreanLetter}\"?`, `Which letter makes the \"${focusLetter.englishSound}\" sound?`, `What letter should you use for the \"${focusLetter.englishSound}\" sound?`];\n        const randomLetterPattern = letterQuestionPatterns[Math.floor(Math.random() * letterQuestionPatterns.length)];\n        question = {\n          type: 'multiple-choice',\n          question: randomLetterPattern,\n          correctAnswer: focusLetter.name,\n          options: [focusLetter, ...distractorLetters].map(l => l.name).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n      case 'letter-to-sound':\n        const soundQuestionPatterns = [`What sound does \"${focusLetter.koreanLetter}\" make?`, `How do you pronounce \"${focusLetter.koreanLetter}\"?`, `What is the English sound for \"${focusLetter.koreanLetter}\"?`];\n        const randomSoundQuestionPattern = soundQuestionPatterns[Math.floor(Math.random() * soundQuestionPatterns.length)];\n        question = {\n          type: 'letter-to-sound',\n          question: randomSoundQuestionPattern,\n          correctAnswer: focusLetter.englishSound,\n          options: [focusLetter, ...distractorLetters].map(l => l.englishSound).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n      case 'sound-to-letter':\n        const reverseQuestionPatterns = [`Which Korean letter makes the \"${focusLetter.englishSound}\" sound?`, `What letter should you use for the \"${focusLetter.englishSound}\" sound?`, `If you want to make the \"${focusLetter.englishSound}\" sound, which letter do you use?`];\n        const randomReversePattern = reverseQuestionPatterns[Math.floor(Math.random() * reverseQuestionPatterns.length)];\n        question = {\n          type: 'sound-to-letter',\n          question: randomReversePattern,\n          correctAnswer: focusLetter.koreanLetter,\n          options: [focusLetter, ...distractorLetters].map(l => l.koreanLetter).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n      case 'letter-matching':\n        const matchQuestionPatterns = [`What is the romanization of \"${focusLetter.koreanLetter}\"?`, `How do you write \"${focusLetter.koreanLetter}\" in English letters?`, `What is the English spelling for \"${focusLetter.koreanLetter}\"?`];\n        const randomMatchQuestionPattern = matchQuestionPatterns[Math.floor(Math.random() * matchQuestionPatterns.length)];\n        question = {\n          type: 'letter-matching',\n          question: randomMatchQuestionPattern,\n          correctAnswer: focusLetter.romanization,\n          options: [focusLetter, ...distractorLetters].map(l => l.romanization).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n      case 'word-association':\n        const wordOptions = focusLetter.exampleWords.slice(0, 3);\n        const displayWord = wordOptions[Math.floor(Math.random() * wordOptions.length)];\n        const associationQuestionPatterns = [`Which letter makes the \"${focusLetter.englishSound}\" sound found in \"${displayWord}\"?`, `What letter would you use to start writing \"${displayWord}\" in Korean?`, `Which Korean letter sounds like the beginning of \"${displayWord}\"?`];\n        const randomAssociationQuestionPattern = associationQuestionPatterns[Math.floor(Math.random() * associationQuestionPatterns.length)];\n        question = {\n          type: 'word-association',\n          question: randomAssociationQuestionPattern,\n          correctAnswer: focusLetter.name,\n          options: [focusLetter, ...distractorLetters].map(l => l.name).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n      default:\n        return generateQuestion('multiple-choice', focusLetter);\n    }\n    return question;\n  }, [getAvailableLetters]);\n  const startExercise = exerciseType => {\n    setSelectedExerciseType(exerciseType);\n\n    // Generate first question\n    const firstQuestion = generateQuestion(exerciseType);\n    setCurrentQuestion(firstQuestion);\n    setSelectedAnswer(null);\n    setShowResult(false);\n    setQuestionNumber(1);\n    setScore(0);\n  };\n  const checkAnswer = () => {\n    if (!selectedAnswer) return;\n    setShowResult(true);\n    const isCorrect = selectedAnswer === currentQuestion.correctAnswer;\n    if (isCorrect) {\n      const points = Math.max(10, 20 - questionNumber * 2);\n      setScore(prev => prev + points);\n\n      // Update score for the letter\n      if (currentQuestion.letter) {\n        updateScore(currentQuestion.letter.id, 100);\n      }\n    }\n  };\n  const nextQuestion = () => {\n    if (questionNumber >= 10) {\n      finishExercise();\n      return;\n    }\n    setQuestionNumber(prev => prev + 1);\n    const newQuestion = generateQuestion(selectedExerciseType);\n    setCurrentQuestion(newQuestion);\n    setSelectedAnswer(null);\n    setShowResult(false);\n  };\n  const finishExercise = () => {\n    setSelectedExerciseType(null);\n    setCurrentQuestion(null);\n    setScore(0);\n  };\n  const getOptionButtonClass = option => {\n    let baseClass = 'option-btn';\n    if (selectedAnswer === option) baseClass += ' selected';\n    if (showResult) {\n      if (option === currentQuestion.correctAnswer) {\n        baseClass += ' correct';\n      } else if (selectedAnswer === option) {\n        baseClass += ' incorrect';\n      }\n    }\n    return baseClass;\n  };\n\n  // Audio playback handler\n  const handlePlayLetterSound = async letter => {\n    if (isPlaying) return;\n    setIsPlaying(true);\n    try {\n      console.log('Attempting to play sound for letter:', letter);\n      await playLetterSound(letter);\n      console.log('Successfully played sound for letter:', letter.name);\n    } catch (error) {\n      console.error('Error playing letter sound for', letter === null || letter === void 0 ? void 0 : letter.name, ':', error);\n      console.error('Letter data:', letter);\n      // Try to show user-friendly error message or fallback\n      alert(`Unable to play sound for \"${letter === null || letter === void 0 ? void 0 : letter.koreanLetter}\" (${letter === null || letter === void 0 ? void 0 : letter.name}). This might be due to browser limitations with Korean character pronunciation.`);\n    } finally {\n      setIsPlaying(false);\n    }\n  };\n  if (!selectedExerciseType) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"practice-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Practice Exercises\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Choose an exercise type to test your Korean alphabet knowledge.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exercise-types\",\n          children: Object.entries(EXERCISE_TYPES).map(([type, config]) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"exercise-type-btn\",\n            onClick: () => startExercise(type),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"exercise-icon\",\n              children: config.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"exercise-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: config.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: config.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 17\n            }, this)]\n          }, type, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"practice-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: EXERCISE_TYPES[selectedExerciseType].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exercise-progress\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Question \", questionNumber, \"/10\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Score: \", score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), currentQuestion.type === 'insufficient-letters' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"insufficient-letters\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uD83D\\uDCDA You need at least 2 unlocked letters to practice.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Complete some letters in the Learn section first!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this) : currentQuestion.letter && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-letter\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"letter-with-sound\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"korean-letter-large\",\n              children: currentQuestion.letter.koreanLetter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `letter-sound-btn ${isPlaying ? 'playing' : ''}`,\n              onClick: () => handlePlayLetterSound(currentQuestion.letter),\n              disabled: isPlaying,\n              \"aria-label\": `Play sound for ${currentQuestion.letter.name}`,\n              title: `Hear pronunciation of ${currentQuestion.letter.name}`,\n              children: \"\\uD83D\\uDD0A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"letter-metadata\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `category-tag ${currentQuestion.letter.category}`,\n              children: currentQuestion.letter.category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `difficulty-tag difficulty-${currentQuestion.letter.difficulty}`,\n              children: [\"Level \", currentQuestion.letter.difficulty]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answer-options\",\n          children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `option-btn ${getOptionButtonClass(option)}`,\n            onClick: () => !showResult && setSelectedAnswer(option),\n            disabled: showResult,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"option-letter\",\n              children: String.fromCharCode(65 + index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"option-text\",\n              children: option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), showResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `feedback ${selectedAnswer === currentQuestion.correctAnswer ? 'correct' : 'incorrect'}`,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: selectedAnswer === currentQuestion.correctAnswer ? 'Correct! Well done!' : `Incorrect. The correct answer is \"${currentQuestion.correctAnswer}\".`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"letter-explanation\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [currentQuestion.letter.name, \" (\", currentQuestion.letter.koreanLetter, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Romanization:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 20\n              }, this), \" \", currentQuestion.letter.romanization]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Pronunciation:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 20\n              }, this), \" \", currentQuestion.letter.englishComparison]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"next-btn\",\n            onClick: nextQuestion,\n            children: questionNumber >= 10 ? 'Finish Exercise' : 'Next Question'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this), !showResult && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"check-btn\",\n          onClick: checkAnswer,\n          disabled: !selectedAnswer,\n          children: \"Check Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n};\n_s(PracticeSection, \"kkSLywF7/Gq2N4E+7JIfc2GCOS8=\", false, function () {\n  return [useProgress];\n});\n_c = PracticeSection;\nexport default PracticeSection;\nvar _c;\n$RefreshReg$(_c, \"PracticeSection\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useProgress","playLetterSound","preloadVoices","jsxDEV","_jsxDEV","EXERCISE_TYPES","name","description","icon","questionCount","PracticeSection","_s","updateScore","getAvailableLetters","selectedExerciseType","setSelectedExerciseType","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","showResult","setShowResult","questionNumber","setQuestionNumber","score","setScore","isPlaying","setIsPlaying","generateQuestion","exerciseType","targetLetter","availableLetters","length","type","question","correctAnswer","options","focusLetter","some","l","id","Math","floor","random","otherLetters","filter","distractorLetters","sort","slice","letterQuestionPatterns","koreanLetter","englishSound","randomLetterPattern","map","letter","soundQuestionPatterns","randomSoundQuestionPattern","reverseQuestionPatterns","randomReversePattern","matchQuestionPatterns","randomMatchQuestionPattern","romanization","wordOptions","exampleWords","displayWord","associationQuestionPatterns","randomAssociationQuestionPattern","startExercise","firstQuestion","checkAnswer","isCorrect","points","max","prev","nextQuestion","finishExercise","newQuestion","getOptionButtonClass","option","baseClass","handlePlayLetterSound","console","log","error","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","config","onClick","disabled","title","category","difficulty","index","String","fromCharCode","englishComparison","_c","$RefreshReg$"],"sources":["/Users/gabortabi/DEV/learnKorean/src/components/PracticeSection.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { useProgress } from '../context/ProgressContext';\nimport { playLetterSound, preloadVoices } from '../utils/audioUtils';\n\n// Exercise configuration with multiple question patterns\nconst EXERCISE_TYPES = {\n  'multiple-choice': {\n    name: 'Multiple Choice',\n    description: 'Choose the correct answer from options',\n    icon: '🔘',\n    questionCount: 3\n  },\n  'letter-to-sound': {\n    name: 'Letter to Sound',\n    description: 'Match Korean letters to their English sounds',\n    icon: '🔊',\n    questionCount: 2\n  },\n  'sound-to-letter': {\n    name: 'Sound to Letter',\n    description: 'Find the Korean letter that makes a specific sound',\n    icon: '📝',\n    questionCount: 3\n  },\n  'letter-matching': {\n    name: 'Letter Matching',\n    description: 'Match letters to their pronunciations',\n    icon: '🔗',\n    questionCount: 2\n  },\n  'word-association': {\n    name: 'Sound Association',\n    description: 'Match letters to words containing their sounds',\n    icon: '🌐',\n    questionCount: 3\n  }\n};\n\nconst PracticeSection = () => {\n  const { updateScore, getAvailableLetters } = useProgress();\n  const [selectedExerciseType, setSelectedExerciseType] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  const [questionNumber, setQuestionNumber] = useState(1);\n  const [score, setScore] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Preload voices when component mounts\n  useEffect(() => {\n    preloadVoices();\n  }, []);\n\n  // Generate focused questions about a specific letter with multiple variations\n  const generateQuestion = useCallback((exerciseType, targetLetter = null) => {\n    const availableLetters = getAvailableLetters();\n\n    if (availableLetters.length < 2) {\n      return {\n        type: 'insufficient-letters',\n        question: 'Complete more letters to unlock practice exercises!',\n        correctAnswer: null,\n        options: []\n      };\n    }\n\n    // Select a target letter to focus questions on\n    let focusLetter;\n    if (targetLetter && availableLetters.some(l => l.id === targetLetter.id)) {\n      focusLetter = targetLetter;\n    } else {\n      focusLetter = availableLetters[Math.floor(Math.random() * availableLetters.length)];\n    }\n\n    // Get other letters for options (excluding the focus letter)\n    const otherLetters = availableLetters.filter(l => l.id !== focusLetter.id);\n    const distractorLetters = otherLetters.sort(() => Math.random() - 0.5).slice(0, 3);\n\n    let question = {};\n\n    switch (exerciseType) {\n      case 'multiple-choice':\n        const letterQuestionPatterns = [\n          `What is the name of this Korean letter: \"${focusLetter.koreanLetter}\"?`,\n          `Which letter makes the \"${focusLetter.englishSound}\" sound?`,\n          `What letter should you use for the \"${focusLetter.englishSound}\" sound?`\n        ];\n        const randomLetterPattern = letterQuestionPatterns[Math.floor(Math.random() * letterQuestionPatterns.length)];\n\n        question = {\n          type: 'multiple-choice',\n          question: randomLetterPattern,\n          correctAnswer: focusLetter.name,\n          options: [focusLetter, ...distractorLetters].map(l => l.name).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'letter-to-sound':\n        const soundQuestionPatterns = [\n          `What sound does \"${focusLetter.koreanLetter}\" make?`,\n          `How do you pronounce \"${focusLetter.koreanLetter}\"?`,\n          `What is the English sound for \"${focusLetter.koreanLetter}\"?`\n        ];\n        const randomSoundQuestionPattern = soundQuestionPatterns[Math.floor(Math.random() * soundQuestionPatterns.length)];\n\n        question = {\n          type: 'letter-to-sound',\n          question: randomSoundQuestionPattern,\n          correctAnswer: focusLetter.englishSound,\n          options: [focusLetter, ...distractorLetters].map(l => l.englishSound).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'sound-to-letter':\n        const reverseQuestionPatterns = [\n          `Which Korean letter makes the \"${focusLetter.englishSound}\" sound?`,\n          `What letter should you use for the \"${focusLetter.englishSound}\" sound?`,\n          `If you want to make the \"${focusLetter.englishSound}\" sound, which letter do you use?`\n        ];\n        const randomReversePattern = reverseQuestionPatterns[Math.floor(Math.random() * reverseQuestionPatterns.length)];\n\n        question = {\n          type: 'sound-to-letter',\n          question: randomReversePattern,\n          correctAnswer: focusLetter.koreanLetter,\n          options: [focusLetter, ...distractorLetters].map(l => l.koreanLetter).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'letter-matching':\n        const matchQuestionPatterns = [\n          `What is the romanization of \"${focusLetter.koreanLetter}\"?`,\n          `How do you write \"${focusLetter.koreanLetter}\" in English letters?`,\n          `What is the English spelling for \"${focusLetter.koreanLetter}\"?`\n        ];\n        const randomMatchQuestionPattern = matchQuestionPatterns[Math.floor(Math.random() * matchQuestionPatterns.length)];\n\n        question = {\n          type: 'letter-matching',\n          question: randomMatchQuestionPattern,\n          correctAnswer: focusLetter.romanization,\n          options: [focusLetter, ...distractorLetters].map(l => l.romanization).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      case 'word-association':\n        const wordOptions = focusLetter.exampleWords.slice(0, 3);\n        const displayWord = wordOptions[Math.floor(Math.random() * wordOptions.length)];\n\n        const associationQuestionPatterns = [\n          `Which letter makes the \"${focusLetter.englishSound}\" sound found in \"${displayWord}\"?`,\n          `What letter would you use to start writing \"${displayWord}\" in Korean?`,\n          `Which Korean letter sounds like the beginning of \"${displayWord}\"?`\n        ];\n        const randomAssociationQuestionPattern = associationQuestionPatterns[Math.floor(Math.random() * associationQuestionPatterns.length)];\n\n        question = {\n          type: 'word-association',\n          question: randomAssociationQuestionPattern,\n          correctAnswer: focusLetter.name,\n          options: [focusLetter, ...distractorLetters].map(l => l.name).sort(() => Math.random() - 0.5),\n          letter: focusLetter\n        };\n        break;\n\n      default:\n        return generateQuestion('multiple-choice', focusLetter);\n    }\n\n    return question;\n  }, [getAvailableLetters]);\n\n  const startExercise = (exerciseType) => {\n    setSelectedExerciseType(exerciseType);\n\n    // Generate first question\n    const firstQuestion = generateQuestion(exerciseType);\n    setCurrentQuestion(firstQuestion);\n\n    setSelectedAnswer(null);\n    setShowResult(false);\n    setQuestionNumber(1);\n    setScore(0);\n  };\n\n  const checkAnswer = () => {\n    if (!selectedAnswer) return;\n\n    setShowResult(true);\n    const isCorrect = selectedAnswer === currentQuestion.correctAnswer;\n\n    if (isCorrect) {\n      const points = Math.max(10, 20 - (questionNumber * 2));\n      setScore(prev => prev + points);\n\n      // Update score for the letter\n      if (currentQuestion.letter) {\n        updateScore(currentQuestion.letter.id, 100);\n      }\n    }\n  };\n\n  const nextQuestion = () => {\n    if (questionNumber >= 10) {\n      finishExercise();\n      return;\n    }\n\n    setQuestionNumber(prev => prev + 1);\n    const newQuestion = generateQuestion(selectedExerciseType);\n    setCurrentQuestion(newQuestion);\n    setSelectedAnswer(null);\n    setShowResult(false);\n  };\n\n  const finishExercise = () => {\n    setSelectedExerciseType(null);\n    setCurrentQuestion(null);\n    setScore(0);\n  };\n\n  const getOptionButtonClass = (option) => {\n    let baseClass = 'option-btn';\n    if (selectedAnswer === option) baseClass += ' selected';\n    if (showResult) {\n      if (option === currentQuestion.correctAnswer) {\n        baseClass += ' correct';\n      } else if (selectedAnswer === option) {\n        baseClass += ' incorrect';\n      }\n    }\n    return baseClass;\n  };\n\n  // Audio playback handler\n  const handlePlayLetterSound = async (letter) => {\n    if (isPlaying) return;\n\n    setIsPlaying(true);\n    try {\n      console.log('Attempting to play sound for letter:', letter);\n      await playLetterSound(letter);\n      console.log('Successfully played sound for letter:', letter.name);\n    } catch (error) {\n      console.error('Error playing letter sound for', letter?.name, ':', error);\n      console.error('Letter data:', letter);\n      // Try to show user-friendly error message or fallback\n      alert(`Unable to play sound for \"${letter?.koreanLetter}\" (${letter?.name}). This might be due to browser limitations with Korean character pronunciation.`);\n    } finally {\n      setIsPlaying(false);\n    }\n  };\n\n  if (!selectedExerciseType) {\n    return (\n      <div className=\"practice-section\">\n        <div className=\"section-header\">\n          <h2>Practice Exercises</h2>\n          <p>Choose an exercise type to test your Korean alphabet knowledge.</p>\n\n          <div className=\"exercise-types\">\n            {Object.entries(EXERCISE_TYPES).map(([type, config]) => (\n              <button\n                key={type}\n                className=\"exercise-type-btn\"\n                onClick={() => startExercise(type)}\n              >\n                <div className=\"exercise-icon\">{config.icon}</div>\n                <div className=\"exercise-info\">\n                  <h3>{config.name}</h3>\n                  <p>{config.description}</p>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"practice-section\">\n      <div className=\"section-header\">\n        <div className=\"exercise-header\">\n          <h2>{EXERCISE_TYPES[selectedExerciseType].name}</h2>\n          <div className=\"exercise-progress\">\n            <span>Question {questionNumber}/10</span>\n            <span>Score: {score}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"exercise-container\">\n        <div className=\"exercise-question\">\n          <h3>{currentQuestion.question}</h3>\n          {currentQuestion.type === 'insufficient-letters' ? (\n            <div className=\"insufficient-letters\">\n              <p>📚 You need at least 2 unlocked letters to practice.</p>\n              <p>Complete some letters in the Learn section first!</p>\n            </div>\n          ) : (\n            currentQuestion.letter && (\n              <div className=\"question-letter\">\n                <div className=\"letter-with-sound\">\n                  <span className=\"korean-letter-large\">{currentQuestion.letter.koreanLetter}</span>\n                  <button\n                    className={`letter-sound-btn ${isPlaying ? 'playing' : ''}`}\n                    onClick={() => handlePlayLetterSound(currentQuestion.letter)}\n                    disabled={isPlaying}\n                    aria-label={`Play sound for ${currentQuestion.letter.name}`}\n                    title={`Hear pronunciation of ${currentQuestion.letter.name}`}\n                  >\n                    🔊\n                  </button>\n                </div>\n                <div className=\"letter-metadata\">\n                  <span className={`category-tag ${currentQuestion.letter.category}`}>\n                    {currentQuestion.letter.category}\n                  </span>\n                  <span className={`difficulty-tag difficulty-${currentQuestion.letter.difficulty}`}>\n                    Level {currentQuestion.letter.difficulty}\n                  </span>\n                </div>\n              </div>\n            )\n          )}\n\n          <div className=\"answer-options\">\n            {currentQuestion.options.map((option, index) => (\n              <button\n                key={index}\n                className={`option-btn ${getOptionButtonClass(option)}`}\n                onClick={() => !showResult && setSelectedAnswer(option)}\n                disabled={showResult}\n              >\n                <span className=\"option-letter\">{String.fromCharCode(65 + index)}</span>\n                <span className=\"option-text\">{option}</span>\n              </button>\n            ))}\n          </div>\n\n          {showResult && (\n            <div className=\"result-section\">\n              <div className={`feedback ${selectedAnswer === currentQuestion.correctAnswer ? 'correct' : 'incorrect'}`}>\n                <p>\n                  {selectedAnswer === currentQuestion.correctAnswer\n                    ? 'Correct! Well done!'\n                    : `Incorrect. The correct answer is \"${currentQuestion.correctAnswer}\".`\n                  }\n                </p>\n              </div>\n\n              <div className=\"letter-explanation\">\n                <h4>{currentQuestion.letter.name} ({currentQuestion.letter.koreanLetter})</h4>\n                <p><strong>Romanization:</strong> {currentQuestion.letter.romanization}</p>\n                <p><strong>Pronunciation:</strong> {currentQuestion.letter.englishComparison}</p>\n              </div>\n\n              <button className=\"next-btn\" onClick={nextQuestion}>\n                {questionNumber >= 10 ? 'Finish Exercise' : 'Next Question'}\n              </button>\n            </div>\n          )}\n\n          {!showResult && (\n            <button className=\"check-btn\" onClick={checkAnswer} disabled={!selectedAnswer}>\n              Check Answer\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PracticeSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}