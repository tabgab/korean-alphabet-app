{"ast":null,"code":"var _jsxFileName = \"/Users/gabortabi/DEV/learnKorean/src/components/WordBuilderSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { exampleWords, koreanConsonants, koreanVowels } from '../koreanAlphabetData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordBuilderSection = () => {\n  _s();\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [currentStage, setCurrentStage] = useState(1); // 1: jamo, 2: syllables, 3: word\n  const [selectedJamo, setSelectedJamo] = useState({\n    consonants: [],\n    // Array of selected consonants (can include duplicates for different positions)\n    vowels: [] // Array of selected vowels\n  });\n  const [builtSyllables, setBuiltSyllables] = useState([]);\n  const [userWord, setUserWord] = useState([]);\n  const [showHint, setShowHint] = useState(false);\n  const [currentHint, setCurrentHint] = useState('');\n  const selectWord = useCallback(word => {\n    setSelectedWord(word);\n    setCurrentStage(1);\n    setSelectedJamo({\n      consonants: [],\n      vowels: []\n    });\n    setBuiltSyllables([]);\n    setUserWord([]);\n    setShowHint(false);\n  }, []);\n  const getRequiredJamo = useCallback(() => {\n    if (!selectedWord) return {\n      consonants: [],\n      vowels: []\n    };\n    const required = {\n      consonants: [],\n      vowels: []\n    };\n    selectedWord.syllables.forEach(syllable => {\n      // Add initial consonant\n      if (syllable.consonant) {\n        const consonant = koreanConsonants.find(c => c.koreanLetter === syllable.consonant);\n        if (consonant && !required.consonants.find(c => c.id === consonant.id)) {\n          required.consonants.push(consonant);\n        }\n      }\n\n      // Add vowel\n      if (syllable.vowel) {\n        const vowel = koreanVowels.find(v => v.koreanLetter === syllable.vowel);\n        if (vowel && !required.vowels.find(v => v.id === vowel.id)) {\n          required.vowels.push(vowel);\n        }\n      }\n\n      // Add final consonant (for CVC syllables)\n      if (syllable.final) {\n        const finalConsonant = koreanConsonants.find(c => c.koreanLetter === syllable.final);\n        if (finalConsonant && !required.consonants.find(c => c.id === finalConsonant.id)) {\n          required.consonants.push(finalConsonant);\n        }\n      }\n    });\n    return required;\n  }, [selectedWord]);\n  const getHints = useCallback(() => {\n    if (!selectedWord) return [];\n    const hints = [];\n    if (currentStage === 1) {\n      const required = getRequiredJamo();\n      const missingConsonants = required.consonants.filter(reqC => {\n        var _selectedJamo$consona;\n        return !((_selectedJamo$consona = selectedJamo.consonants) !== null && _selectedJamo$consona !== void 0 && _selectedJamo$consona.some(selC => selC.id === reqC.id));\n      });\n      const missingVowels = required.vowels.filter(reqV => {\n        var _selectedJamo$vowels;\n        return !((_selectedJamo$vowels = selectedJamo.vowels) !== null && _selectedJamo$vowels !== void 0 && _selectedJamo$vowels.some(selV => selV.id === reqV.id));\n      });\n      if (missingConsonants.length > 0) {\n        hints.push(`Select the consonant: ${missingConsonants[0].koreanLetter} (${missingConsonants[0].name})`);\n      } else if (missingVowels.length > 0) {\n        hints.push(`Select the vowel: ${missingVowels[0].koreanLetter} (${missingVowels[0].name})`);\n      } else {\n        hints.push(\"Great! You've selected all required letters. Click 'Next' to build syllables.\");\n      }\n    }\n    if (currentStage === 2) {\n      const currentSyllableIndex = builtSyllables.length;\n      if (currentSyllableIndex < selectedWord.syllables.length) {\n        const targetSyllable = selectedWord.syllables[currentSyllableIndex];\n        if (!selectedJamo.initial && !selectedJamo.vowel) {\n          if (targetSyllable.structure === 'CVC') {\n            hints.push(`Build \"${targetSyllable.syllable}\" (CVC): Select ${targetSyllable.consonant} (initial) + ${targetSyllable.vowel} + ${targetSyllable.final} (final)`);\n          } else {\n            hints.push(`Build \"${targetSyllable.syllable}\" (CV): Select ${targetSyllable.consonant} + ${targetSyllable.vowel}`);\n          }\n        } else if (selectedJamo.initial && !selectedJamo.vowel) {\n          hints.push(`Now select ${targetSyllable.vowel}${targetSyllable.final ? ' (and optionally ' + targetSyllable.final + ' for final consonant)' : ''}`);\n        } else if (!selectedJamo.initial && selectedJamo.vowel) {\n          hints.push(`Select ${targetSyllable.consonant} as initial consonant`);\n        } else if (selectedJamo.initial && selectedJamo.vowel && !selectedJamo.final) {\n          if (targetSyllable.final) {\n            // Check if we can reuse the same consonant for final position\n            const availableConsonants = requiredJamo.consonants.filter(c => c.koreanLetter === targetSyllable.final || c.koreanLetter === targetSyllable.consonant);\n            if (availableConsonants.length > 0) {\n              hints.push(`Add ${targetSyllable.final} as final consonant (you can reuse ${targetSyllable.consonant} if it's the same letter)`);\n            } else {\n              hints.push(`Add ${targetSyllable.final} as final consonant`);\n            }\n          } else {\n            hints.push(`Click \"Build Syllable\" to create \"${targetSyllable.syllable}\" (CV structure)`);\n          }\n        } else if (selectedJamo.initial && selectedJamo.vowel && selectedJamo.final) {\n          hints.push(`Click \"Build Syllable\" to create \"${targetSyllable.syllable}\" (CVC structure)`);\n        }\n      }\n    }\n    if (currentStage === 3) {\n      if (userWord.length < selectedWord.syllables.length) {\n        const nextSyllable = selectedWord.syllables[userWord.length];\n        const availableSyllable = builtSyllables.find(bs => bs.syllable === nextSyllable.syllable);\n        if (availableSyllable) {\n          hints.push(`Drag \"${availableSyllable.syllable}\" to the next empty slot`);\n        } else {\n          hints.push(`Build \"${nextSyllable.syllable}\" first in Stage 2`);\n        }\n      } else {\n        hints.push(`Click \"Check Word\" to verify your word construction`);\n      }\n    }\n    return hints;\n  }, [selectedWord, currentStage, selectedJamo, builtSyllables, userWord, getRequiredJamo]);\n  const requiredJamo = getRequiredJamo();\n  const stageHints = getHints();\n  const showHintForCurrentStage = useCallback(() => {\n    const hints = getHints();\n    if (hints.length > 0) {\n      setCurrentHint(hints[0]);\n      setShowHint(true);\n    }\n  }, [getHints]);\n  const handleJamoSelection = useCallback((jamo, type) => {\n    console.log('Jamo selected:', jamo, type);\n    setSelectedJamo(prev => {\n      if (type === 'consonant') {\n        // Check if this exact jamo (same id and letter) is already selected\n        const isAlreadySelected = prev.consonants.some(c => c.id === jamo.id);\n        if (isAlreadySelected) {\n          // If already selected, remove it (toggle behavior for now)\n          console.log('Toggling consonant selection');\n          return {\n            ...prev,\n            consonants: prev.consonants.filter(c => c.id !== jamo.id)\n          };\n        } else {\n          // If not selected, add it (allow multiple selections of same jamo for different positions)\n          console.log('Adding consonant selection');\n          return {\n            ...prev,\n            consonants: [...prev.consonants, jamo]\n          };\n        }\n      } else if (type === 'vowel') {\n        const isAlreadySelected = prev.vowels.some(v => v.id === jamo.id);\n        if (isAlreadySelected) {\n          console.log('Toggling vowel selection');\n          return {\n            ...prev,\n            vowels: prev.vowels.filter(v => v.id !== jamo.id)\n          };\n        } else {\n          console.log('Adding vowel selection');\n          return {\n            ...prev,\n            vowels: [...prev.vowels, jamo]\n          };\n        }\n      }\n      return prev;\n    });\n  }, []);\n  const canBuildSyllable = useCallback(() => {\n    // Need at least 1 consonant and 1 vowel to build a syllable\n    // For CVC syllables, we'll need 2 consonants and 1 vowel\n    const hasConsonant = selectedJamo.consonants.length >= 1;\n    const hasVowel = selectedJamo.vowels.length >= 1;\n    return hasConsonant && hasVowel;\n  }, [selectedJamo]);\n  const buildSyllable = useCallback(() => {\n    if (!canBuildSyllable()) return;\n    console.log('Building syllable with:', selectedJamo);\n    const initialConsonant = selectedJamo.consonants[0];\n    const vowel = selectedJamo.vowels[0];\n    const finalConsonant = selectedJamo.consonants.length > 1 ? selectedJamo.consonants[1] : null;\n\n    // Create syllable text based on structure\n    let syllableText = initialConsonant.koreanLetter + vowel.koreanLetter;\n    if (finalConsonant) {\n      syllableText += finalConsonant.koreanLetter;\n    }\n    console.log('Looking for target syllable with:', {\n      consonant: initialConsonant.koreanLetter,\n      vowel: vowel.koreanLetter,\n      final: finalConsonant ? finalConsonant.koreanLetter : null\n    });\n\n    // Find the matching syllable in the target word to get complete structure\n    const targetSyllable = selectedWord.syllables.find(ts => {\n      const consonantMatch = ts.consonant === initialConsonant.koreanLetter;\n      const vowelMatch = ts.vowel === vowel.koreanLetter;\n      const finalMatch = finalConsonant ? ts.final === finalConsonant.koreanLetter : !ts.final; // No final consonant expected\n\n      console.log('Checking syllable:', ts, {\n        consonantMatch,\n        vowelMatch,\n        finalMatch\n      });\n      return consonantMatch && vowelMatch && finalMatch;\n    });\n    console.log('Found target syllable:', targetSyllable);\n    const newSyllable = {\n      syllable: targetSyllable ? targetSyllable.syllable : syllableText,\n      consonant: initialConsonant.koreanLetter,\n      vowel: vowel.koreanLetter,\n      final: finalConsonant ? finalConsonant.koreanLetter : targetSyllable ? targetSyllable.final : null,\n      structure: targetSyllable ? targetSyllable.structure : finalConsonant ? 'CVC' : 'CV',\n      completed: true\n    };\n    console.log('Created new syllable:', newSyllable);\n    setBuiltSyllables(prev => {\n      const updated = [...prev, newSyllable];\n      console.log('Updated builtSyllables:', updated);\n      return updated;\n    });\n\n    // Clear selections after building\n    setSelectedJamo({\n      consonants: [],\n      vowels: []\n    });\n  }, [canBuildSyllable, selectedJamo, selectedWord]);\n  const handleSyllableDrop = useCallback(syllable => {\n    console.log('Dropping syllable:', syllable);\n    if (!selectedWord) {\n      console.error('selectedWord is undefined');\n      return;\n    }\n    if (userWord.length >= selectedWord.syllables.length) {\n      console.log('Word is already complete');\n      return;\n    }\n    if (userWord.some(userSyl => userSyl.syllable === syllable.syllable)) {\n      console.log('Syllable already used');\n      return;\n    }\n    setUserWord(prev => {\n      const newWord = [...prev, syllable];\n      console.log('New userWord:', newWord);\n      return newWord;\n    });\n  }, [selectedWord, userWord]);\n  const removeSyllable = useCallback(index => {\n    console.log('Removing syllable at index:', index);\n    setUserWord(prev => {\n      const newWord = prev.filter((_, i) => i !== index);\n      console.log('New userWord after removal:', newWord);\n      return newWord;\n    });\n  }, []);\n  const checkStageCompletion = useCallback(() => {\n    console.log('Checking stage completion:', {\n      currentStage,\n      userWord,\n      selectedWord\n    });\n    if (currentStage === 1) {\n      // For Stage 1, we need to check if all required jamo have been collected\n      // But since we're now using the old array-based structure for Stage 1,\n      // we need to maintain backward compatibility\n      const required = getRequiredJamo();\n      console.log('Stage 1 validation:', {\n        required,\n        selectedJamo\n      });\n\n      // Check if all required consonants are in the collected jamo\n      const hasAllConsonants = required.consonants.every(reqC => {\n        var _selectedJamo$consona2;\n        return (_selectedJamo$consona2 = selectedJamo.consonants) === null || _selectedJamo$consona2 === void 0 ? void 0 : _selectedJamo$consona2.some(selC => selC.id === reqC.id);\n      });\n\n      // Check if all required vowels are in the collected jamo\n      const hasAllVowels = required.vowels.every(reqV => {\n        var _selectedJamo$vowels2;\n        return (_selectedJamo$vowels2 = selectedJamo.vowels) === null || _selectedJamo$vowels2 === void 0 ? void 0 : _selectedJamo$vowels2.some(selV => selV.id === reqV.id);\n      });\n      console.log('Stage 1 completion check:', {\n        hasAllConsonants,\n        hasAllVowels\n      });\n      return hasAllConsonants && hasAllVowels;\n    }\n    if (currentStage === 2) {\n      return builtSyllables.length === selectedWord.syllables.length && builtSyllables.every(bs => bs.completed);\n    }\n    if (currentStage === 3) {\n      console.log('Stage 3 validation:', {\n        userWord,\n        selectedWord\n      });\n      if (!selectedWord || !selectedWord.syllables) {\n        console.error('selectedWord or syllables is undefined');\n        return false;\n      }\n      if (userWord.length !== selectedWord.syllables.length) {\n        console.log('User word length mismatch:', userWord.length, selectedWord.syllables.length);\n        return false;\n      }\n\n      // Check each syllable with proper error handling\n      for (let index = 0; index < userWord.length; index++) {\n        const userSyl = userWord[index];\n        const targetSyllable = selectedWord.syllables[index];\n        console.log(`Checking index ${index}:`, {\n          userSyl,\n          targetSyllable\n        });\n        if (!userSyl) {\n          console.error('userSyl is undefined at index:', index);\n          return false;\n        }\n        if (!targetSyllable) {\n          console.error('targetSyllable is undefined at index:', index);\n          return false;\n        }\n        if (!userSyl.syllable || !targetSyllable.syllable) {\n          console.error('Syllable text is undefined:', {\n            userSyl,\n            targetSyllable\n          });\n          return false;\n        }\n        const isCorrect = userSyl.syllable === targetSyllable.syllable;\n        console.log(`Comparing: \"${userSyl.syllable}\" vs \"${targetSyllable.syllable}\" = ${isCorrect}`);\n        if (!isCorrect) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }, [currentStage, selectedJamo, builtSyllables, userWord, selectedWord, getRequiredJamo]);\n  const advanceToNextStage = useCallback(() => {\n    if (currentStage < 3) {\n      setCurrentStage(prev => prev + 1);\n      setShowHint(false);\n    }\n  }, [currentStage]);\n  const resetExercise = useCallback(() => {\n    setCurrentStage(1);\n    setSelectedJamo({\n      consonants: [],\n      vowels: []\n    });\n    setBuiltSyllables([]);\n    setUserWord([]);\n    setShowHint(false);\n  }, []);\n  const getJamoButtonClass = (jamo, type) => {\n    let isSelected = false;\n    if (type === 'consonant') {\n      var _selectedJamo$initial, _selectedJamo$final;\n      isSelected = ((_selectedJamo$initial = selectedJamo.initial) === null || _selectedJamo$initial === void 0 ? void 0 : _selectedJamo$initial.id) === jamo.id || ((_selectedJamo$final = selectedJamo.final) === null || _selectedJamo$final === void 0 ? void 0 : _selectedJamo$final.id) === jamo.id;\n    } else if (type === 'vowel') {\n      var _selectedJamo$vowel;\n      isSelected = ((_selectedJamo$vowel = selectedJamo.vowel) === null || _selectedJamo$vowel === void 0 ? void 0 : _selectedJamo$vowel.id) === jamo.id;\n    }\n    return `jamo-btn ${isSelected ? 'selected' : 'available'}`;\n  };\n  const getSyllableButtonClass = syllable => {\n    const isUsed = userWord.some(userSyl => userSyl.syllable === syllable.syllable);\n    return `syllable-btn ${isUsed ? 'used' : 'available'}`;\n  };\n  if (!selectedWord) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-builder-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Progressive Word Builder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Learn Korean writing step by step: from individual letters to complete words.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a word to build:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-cards\",\n          children: exampleWords.map(word => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"word-card\",\n            onClick: () => selectWord(word),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-korean\",\n              children: word.korean\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-romanization\",\n              children: word.romanization\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-english\",\n              children: [\"\\\"\", word.english, \"\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"syllable-count\",\n              children: [word.syllables.length, \" syllables\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 17\n            }, this)]\n          }, word.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-builder-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-btn\",\n          onClick: () => setSelectedWord(null),\n          children: \"\\u2190 Back to Word Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Build: \", selectedWord.english]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"target-word\",\n            children: selectedWord.korean\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"romanization\",\n            children: [\"(\", selectedWord.romanization, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stage-progress\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stage ${currentStage === 1 ? 'active' : ''} ${currentStage > 1 ? 'completed' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-number\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-label\",\n            children: \"Jamo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stage ${currentStage === 2 ? 'active' : ''} ${currentStage > 2 ? 'completed' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-number\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-label\",\n            children: \"Syllables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stage ${currentStage === 3 ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-number\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stage-label\",\n            children: \"Word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-builder-container\",\n      children: [currentStage === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stage-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Stage 1: Select Required Letters (Jamo)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Choose all the consonants and vowels needed to build this word.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jamo-selection\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jamo-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Required Consonants:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"jamo-grid\",\n              children: requiredJamo.consonants.map(consonant => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: getJamoButtonClass(consonant, 'consonant'),\n                onClick: () => handleJamoSelection(consonant, 'consonant'),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-letter\",\n                  children: consonant.koreanLetter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-name\",\n                  children: consonant.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-sound\",\n                  children: [\"(\", consonant.romanization, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 23\n                }, this)]\n              }, consonant.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jamo-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Required Vowels:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"jamo-grid\",\n              children: requiredJamo.vowels.map(vowel => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: getJamoButtonClass(vowel, 'vowel'),\n                onClick: () => handleJamoSelection(vowel, 'vowel'),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-letter\",\n                  children: vowel.koreanLetter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 498,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-name\",\n                  children: vowel.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 499,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-sound\",\n                  children: [\"(\", vowel.romanization, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 500,\n                  columnNumber: 23\n                }, this)]\n              }, vowel.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"hint-btn\",\n            onClick: showHintForCurrentStage,\n            disabled: stageHints.length === 0,\n            children: \"\\uD83D\\uDCA1 Show Hint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 15\n          }, this), showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint-text\",\n            children: currentHint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-navigation\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"next-stage-btn\",\n            onClick: advanceToNextStage,\n            disabled: !checkStageCompletion(),\n            children: \"Next: Build Syllables \\u2192\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this), currentStage === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stage-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Stage 2: Build Syllable Blocks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Combine consonants and vowels to create syllable blocks. Build them one at a time.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"syllable-building\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jamo-pool-stage2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Available Letters:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Select consonants and vowels to build the next syllable. You can reuse consonants for different positions.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"jamo-pool-grid\",\n              children: [requiredJamo.consonants.map(consonant => {\n                const isSelectedForInitial = selectedJamo.consonants.filter((_, index) => index === 0).some(c => c.id === consonant.id);\n                const isSelectedForFinal = selectedJamo.consonants.filter((_, index) => index > 0).some(c => c.id === consonant.id);\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `jamo-btn ${isSelectedForInitial || isSelectedForFinal ? 'selected' : 'available'}`,\n                  onClick: () => handleJamoSelection(consonant, 'consonant'),\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"jamo-letter\",\n                    children: consonant.koreanLetter\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 558,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"jamo-name\",\n                    children: consonant.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 559,\n                    columnNumber: 25\n                  }, this), isSelectedForInitial && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"position-indicator initial\",\n                    children: \"\\uCD08\\uC131\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 560,\n                    columnNumber: 50\n                  }, this), isSelectedForFinal && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"position-indicator final\",\n                    children: \"\\uC885\\uC131\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 561,\n                    columnNumber: 48\n                  }, this)]\n                }, `${consonant.id}-${consonant.koreanLetter}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 553,\n                  columnNumber: 23\n                }, this);\n              }), requiredJamo.vowels.map(vowel => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: getJamoButtonClass(vowel, 'vowel'),\n                onClick: () => handleJamoSelection(vowel, 'vowel'),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-letter\",\n                  children: vowel.koreanLetter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 571,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"jamo-name\",\n                  children: vowel.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 23\n                }, this)]\n              }, vowel.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jamo-workspace\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Selected for Current Syllable:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selected-jamo\",\n              children: [selectedJamo.consonants.map((c, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `selected-jamo-item ${index === 0 ? 'consonant' : 'final-consonant'}`,\n                children: [c.koreanLetter, \" (\", c.name, \")\", index === 0 ? ' (initial)' : ' (final)']\n              }, `${c.id}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 582,\n                columnNumber: 21\n              }, this)), selectedJamo.vowels.map(v => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"selected-jamo-item vowel\",\n                children: [v.koreanLetter, \" (\", v.name, \")\"]\n              }, v.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 588,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selection-summary\",\n              children: selectedJamo.consonants.length > 0 && selectedJamo.vowels.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"structure-info\",\n                children: [selectedJamo.consonants.length === 1 && selectedJamo.vowels.length === 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"structure-badge cv\",\n                  children: \"CV Structure\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 598,\n                  columnNumber: 25\n                }, this), selectedJamo.consonants.length === 2 && selectedJamo.vowels.length === 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"structure-badge cvc\",\n                  children: \"CVC Structure\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 601,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 596,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"syllable-preview\",\n              children: selectedJamo.consonants.length > 0 && selectedJamo.vowels.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"preview-syllable\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"preview-text\",\n                  children: [\"Preview: \", selectedJamo.consonants[0].koreanLetter + selectedJamo.vowels[0].koreanLetter, selectedJamo.consonants.length > 1 && selectedJamo.consonants[1].koreanLetter]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 610,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"preview-structure\",\n                  children: [\"(\", selectedJamo.consonants.length > 1 ? 'CVC' : 'CV', \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 614,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 609,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 607,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"workspace-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"build-syllable-btn\",\n                onClick: () => {\n                  console.log('Build Syllable clicked');\n                  console.log('Selected Jamo:', selectedJamo);\n                  console.log('Can build:', canBuildSyllable());\n                  buildSyllable();\n                },\n                disabled: !canBuildSyllable(),\n                children: canBuildSyllable() ? `Build Syllable (${selectedJamo.consonants.length > 1 ? 'CVC' : 'CV'}) →` : 'Select 1 consonant + 1 vowel (+ optional final consonant)'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"clear-selection-btn\",\n                onClick: () => setSelectedJamo({\n                  consonants: [],\n                  vowels: []\n                }),\n                children: \"Clear Selection\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 638,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"built-syllables\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Built Syllables (\", builtSyllables.length, \"/\", selectedWord.syllables.length, \"):\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"syllables-display\",\n              children: builtSyllables.map((syllable, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"built-syllable\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"syllable-text\",\n                  children: syllable.syllable\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 652,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"syllable-components\",\n                  children: [syllable.consonant, \" + \", syllable.vowel, syllable.final && ` + ${syllable.final}`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 653,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"syllable-structure\",\n                  children: syllable.structure\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 657,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 651,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 17\n            }, this), builtSyllables.length < selectedWord.syllables.length && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"next-syllable-hint\",\n              children: [\"Next: Build \\\"\", selectedWord.syllables[builtSyllables.length].syllable, \"\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"hint-btn\",\n            onClick: showHintForCurrentStage,\n            children: \"\\uD83D\\uDCA1 Show Hint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 15\n          }, this), showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint-text\",\n            children: currentHint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-navigation\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"prev-stage-btn\",\n            onClick: () => setCurrentStage(1),\n            children: \"\\u2190 Back to Jamo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"next-stage-btn\",\n            onClick: advanceToNextStage,\n            disabled: !checkStageCompletion(),\n            children: \"Next: Build Word \\u2192\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 11\n      }, this), currentStage === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stage-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Stage 3: Build the Complete Word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Arrange the syllable blocks to form the complete word.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-building\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"target-word-area\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Word Structure:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-slots\",\n              children: selectedWord.syllables.map((targetSyllable, index) => {\n                console.log(`Rendering word slot ${index}:`, {\n                  targetSyllable,\n                  userSyllable: userWord[index]\n                });\n                if (!targetSyllable) {\n                  console.error('targetSyllable is undefined at index:', index);\n                  return null;\n                }\n                const isCorrect = userWord[index] && userWord[index].syllable === targetSyllable.syllable;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `word-slot ${isCorrect ? 'correct' : ''}`,\n                  children: userWord[index] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `syllable-in-word ${isCorrect ? 'correct' : ''}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"syllable-text\",\n                      children: userWord[index].syllable\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 717,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"remove-syllable\",\n                      onClick: () => removeSyllable(index),\n                      children: \"\\xD7\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 718,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 716,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"empty-word-slot\",\n                    children: \"Drop syllable here\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 726,\n                    columnNumber: 27\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 714,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 17\n            }, this), userWord.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"current-word\",\n              children: [\"Current: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"current-word-display\",\n                children: userWord.map(s => s.syllable).join('')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 736,\n                columnNumber: 30\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 19\n            }, this), checkStageCompletion() && currentStage === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"success-message\",\n              children: [\"\\uD83C\\uDF89 Congratulations! You successfully built \\\"\", selectedWord.korean, \"\\\" (\", selectedWord.english, \")!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"available-syllables\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Available Syllables:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 750,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"syllables-pool\",\n              children: builtSyllables.map((syllable, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: getSyllableButtonClass(syllable),\n                draggable: !userWord.some(userSyl => userSyl.syllable === syllable.syllable),\n                onDragStart: e => {\n                  e.dataTransfer.setData('text/plain', syllable.syllable);\n                },\n                onClick: () => handleSyllableDrop(syllable),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"syllable-display\",\n                  children: syllable.syllable\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 762,\n                  columnNumber: 23\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 753,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 751,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 700,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"hint-btn\",\n            onClick: showHintForCurrentStage,\n            children: \"\\uD83D\\uDCA1 Show Hint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 15\n          }, this), showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint-text\",\n            children: currentHint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stage-navigation\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"prev-stage-btn\",\n            onClick: () => setCurrentStage(2),\n            children: \"\\u2190 Back to Syllables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 777,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"check-word-btn\",\n            onClick: () => {\n              try {\n                console.log('Check Word button clicked');\n                console.log('userWord:', userWord);\n                console.log('selectedWord:', selectedWord);\n                if (checkStageCompletion()) {\n                  setShowHint(false);\n                  setCurrentHint(`Perfect! You successfully built \"${selectedWord.korean}\" (${selectedWord.english})!`);\n                  setShowHint(true);\n                } else {\n                  // Find the first incorrect syllable\n                  let errorMessage = 'Check your syllable placement and try again.';\n                  if (userWord.length > 0 && selectedWord && selectedWord.syllables) {\n                    const firstIncorrect = userWord.findIndex((userSyl, index) => {\n                      if (!userSyl || !selectedWord.syllables[index]) return true;\n                      return userSyl.syllable !== selectedWord.syllables[index].syllable;\n                    });\n                    if (firstIncorrect >= 0) {\n                      errorMessage = `Check position ${firstIncorrect + 1}. Make sure \"${selectedWord.syllables[firstIncorrect].syllable}\" is in the correct place.`;\n                    }\n                  }\n                  setShowHint(false);\n                  setCurrentHint(errorMessage);\n                  setShowHint(true);\n                }\n              } catch (error) {\n                console.error('Error in Check Word:', error);\n                setShowHint(false);\n                setCurrentHint('An error occurred. Please try again or refresh the page.');\n                setShowHint(true);\n              }\n            },\n            children: \"Check Word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 780,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-btn\",\n          onClick: resetExercise,\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-word-btn\",\n          onClick: () => setSelectedWord(null),\n          children: \"Try Another Word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 9\n      }, this), showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hint-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hint-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"hint-icon\",\n            children: \"\\uD83D\\uDCA1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 835,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"hint-text\",\n            children: currentHint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 836,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-hint\",\n            onClick: () => setShowHint(false),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 834,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 5\n  }, this);\n};\n_s(WordBuilderSection, \"cheShHoaO0Jd7iBoT44P7vCyO0I=\");\n_c = WordBuilderSection;\nexport default WordBuilderSection;\nvar _c;\n$RefreshReg$(_c, \"WordBuilderSection\");","map":{"version":3,"names":["React","useState","useCallback","exampleWords","koreanConsonants","koreanVowels","jsxDEV","_jsxDEV","WordBuilderSection","_s","selectedWord","setSelectedWord","currentStage","setCurrentStage","selectedJamo","setSelectedJamo","consonants","vowels","builtSyllables","setBuiltSyllables","userWord","setUserWord","showHint","setShowHint","currentHint","setCurrentHint","selectWord","word","getRequiredJamo","required","syllables","forEach","syllable","consonant","find","c","koreanLetter","id","push","vowel","v","final","finalConsonant","getHints","hints","missingConsonants","filter","reqC","_selectedJamo$consona","some","selC","missingVowels","reqV","_selectedJamo$vowels","selV","length","name","currentSyllableIndex","targetSyllable","initial","structure","availableConsonants","requiredJamo","nextSyllable","availableSyllable","bs","stageHints","showHintForCurrentStage","handleJamoSelection","jamo","type","console","log","prev","isAlreadySelected","canBuildSyllable","hasConsonant","hasVowel","buildSyllable","initialConsonant","syllableText","ts","consonantMatch","vowelMatch","finalMatch","newSyllable","completed","updated","handleSyllableDrop","error","userSyl","newWord","removeSyllable","index","_","i","checkStageCompletion","hasAllConsonants","every","_selectedJamo$consona2","hasAllVowels","_selectedJamo$vowels2","isCorrect","advanceToNextStage","resetExercise","getJamoButtonClass","isSelected","_selectedJamo$initial","_selectedJamo$final","_selectedJamo$vowel","getSyllableButtonClass","isUsed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","korean","romanization","english","disabled","isSelectedForInitial","isSelectedForFinal","userSyllable","s","join","draggable","onDragStart","e","dataTransfer","setData","errorMessage","firstIncorrect","findIndex","_c","$RefreshReg$"],"sources":["/Users/gabortabi/DEV/learnKorean/src/components/WordBuilderSection.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { exampleWords, koreanConsonants, koreanVowels } from '../koreanAlphabetData';\n\nconst WordBuilderSection = () => {\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [currentStage, setCurrentStage] = useState(1); // 1: jamo, 2: syllables, 3: word\n  const [selectedJamo, setSelectedJamo] = useState({\n    consonants: [],   // Array of selected consonants (can include duplicates for different positions)\n    vowels: []        // Array of selected vowels\n  });\n  const [builtSyllables, setBuiltSyllables] = useState([]);\n  const [userWord, setUserWord] = useState([]);\n  const [showHint, setShowHint] = useState(false);\n  const [currentHint, setCurrentHint] = useState('');\n\n  const selectWord = useCallback((word) => {\n    setSelectedWord(word);\n    setCurrentStage(1);\n    setSelectedJamo({ consonants: [], vowels: [] });\n    setBuiltSyllables([]);\n    setUserWord([]);\n    setShowHint(false);\n  }, []);\n\n  const getRequiredJamo = useCallback(() => {\n    if (!selectedWord) return { consonants: [], vowels: [] };\n\n    const required = { consonants: [], vowels: [] };\n\n    selectedWord.syllables.forEach(syllable => {\n      // Add initial consonant\n      if (syllable.consonant) {\n        const consonant = koreanConsonants.find(c => c.koreanLetter === syllable.consonant);\n        if (consonant && !required.consonants.find(c => c.id === consonant.id)) {\n          required.consonants.push(consonant);\n        }\n      }\n\n      // Add vowel\n      if (syllable.vowel) {\n        const vowel = koreanVowels.find(v => v.koreanLetter === syllable.vowel);\n        if (vowel && !required.vowels.find(v => v.id === vowel.id)) {\n          required.vowels.push(vowel);\n        }\n      }\n\n      // Add final consonant (for CVC syllables)\n      if (syllable.final) {\n        const finalConsonant = koreanConsonants.find(c => c.koreanLetter === syllable.final);\n        if (finalConsonant && !required.consonants.find(c => c.id === finalConsonant.id)) {\n          required.consonants.push(finalConsonant);\n        }\n      }\n    });\n\n    return required;\n  }, [selectedWord]);\n\n  const getHints = useCallback(() => {\n    if (!selectedWord) return [];\n\n    const hints = [];\n\n    if (currentStage === 1) {\n      const required = getRequiredJamo();\n      const missingConsonants = required.consonants.filter(reqC =>\n        !selectedJamo.consonants?.some(selC => selC.id === reqC.id)\n      );\n      const missingVowels = required.vowels.filter(reqV =>\n        !selectedJamo.vowels?.some(selV => selV.id === reqV.id)\n      );\n\n      if (missingConsonants.length > 0) {\n        hints.push(`Select the consonant: ${missingConsonants[0].koreanLetter} (${missingConsonants[0].name})`);\n      } else if (missingVowels.length > 0) {\n        hints.push(`Select the vowel: ${missingVowels[0].koreanLetter} (${missingVowels[0].name})`);\n      } else {\n        hints.push(\"Great! You've selected all required letters. Click 'Next' to build syllables.\");\n      }\n    }\n\n    if (currentStage === 2) {\n      const currentSyllableIndex = builtSyllables.length;\n      if (currentSyllableIndex < selectedWord.syllables.length) {\n        const targetSyllable = selectedWord.syllables[currentSyllableIndex];\n\n        if (!selectedJamo.initial && !selectedJamo.vowel) {\n          if (targetSyllable.structure === 'CVC') {\n            hints.push(`Build \"${targetSyllable.syllable}\" (CVC): Select ${targetSyllable.consonant} (initial) + ${targetSyllable.vowel} + ${targetSyllable.final} (final)`);\n          } else {\n            hints.push(`Build \"${targetSyllable.syllable}\" (CV): Select ${targetSyllable.consonant} + ${targetSyllable.vowel}`);\n          }\n        } else if (selectedJamo.initial && !selectedJamo.vowel) {\n          hints.push(`Now select ${targetSyllable.vowel}${targetSyllable.final ? ' (and optionally ' + targetSyllable.final + ' for final consonant)' : ''}`);\n        } else if (!selectedJamo.initial && selectedJamo.vowel) {\n          hints.push(`Select ${targetSyllable.consonant} as initial consonant`);\n        } else if (selectedJamo.initial && selectedJamo.vowel && !selectedJamo.final) {\n          if (targetSyllable.final) {\n            // Check if we can reuse the same consonant for final position\n            const availableConsonants = requiredJamo.consonants.filter(c =>\n              c.koreanLetter === targetSyllable.final ||\n              c.koreanLetter === targetSyllable.consonant\n            );\n            if (availableConsonants.length > 0) {\n              hints.push(`Add ${targetSyllable.final} as final consonant (you can reuse ${targetSyllable.consonant} if it's the same letter)`);\n            } else {\n              hints.push(`Add ${targetSyllable.final} as final consonant`);\n            }\n          } else {\n            hints.push(`Click \"Build Syllable\" to create \"${targetSyllable.syllable}\" (CV structure)`);\n          }\n        } else if (selectedJamo.initial && selectedJamo.vowel && selectedJamo.final) {\n          hints.push(`Click \"Build Syllable\" to create \"${targetSyllable.syllable}\" (CVC structure)`);\n        }\n      }\n    }\n\n    if (currentStage === 3) {\n      if (userWord.length < selectedWord.syllables.length) {\n        const nextSyllable = selectedWord.syllables[userWord.length];\n        const availableSyllable = builtSyllables.find(bs => bs.syllable === nextSyllable.syllable);\n        if (availableSyllable) {\n          hints.push(`Drag \"${availableSyllable.syllable}\" to the next empty slot`);\n        } else {\n          hints.push(`Build \"${nextSyllable.syllable}\" first in Stage 2`);\n        }\n      } else {\n        hints.push(`Click \"Check Word\" to verify your word construction`);\n      }\n    }\n\n    return hints;\n  }, [selectedWord, currentStage, selectedJamo, builtSyllables, userWord, getRequiredJamo]);\n\n  const requiredJamo = getRequiredJamo();\n  const stageHints = getHints();\n\n  const showHintForCurrentStage = useCallback(() => {\n    const hints = getHints();\n    if (hints.length > 0) {\n      setCurrentHint(hints[0]);\n      setShowHint(true);\n    }\n  }, [getHints]);\n\n  const handleJamoSelection = useCallback((jamo, type) => {\n    console.log('Jamo selected:', jamo, type);\n\n    setSelectedJamo(prev => {\n      if (type === 'consonant') {\n        // Check if this exact jamo (same id and letter) is already selected\n        const isAlreadySelected = prev.consonants.some(c => c.id === jamo.id);\n\n        if (isAlreadySelected) {\n          // If already selected, remove it (toggle behavior for now)\n          console.log('Toggling consonant selection');\n          return {\n            ...prev,\n            consonants: prev.consonants.filter(c => c.id !== jamo.id)\n          };\n        } else {\n          // If not selected, add it (allow multiple selections of same jamo for different positions)\n          console.log('Adding consonant selection');\n          return {\n            ...prev,\n            consonants: [...prev.consonants, jamo]\n          };\n        }\n      } else if (type === 'vowel') {\n        const isAlreadySelected = prev.vowels.some(v => v.id === jamo.id);\n\n        if (isAlreadySelected) {\n          console.log('Toggling vowel selection');\n          return {\n            ...prev,\n            vowels: prev.vowels.filter(v => v.id !== jamo.id)\n          };\n        } else {\n          console.log('Adding vowel selection');\n          return {\n            ...prev,\n            vowels: [...prev.vowels, jamo]\n          };\n        }\n      }\n\n      return prev;\n    });\n  }, []);\n\n  const canBuildSyllable = useCallback(() => {\n    // Need at least 1 consonant and 1 vowel to build a syllable\n    // For CVC syllables, we'll need 2 consonants and 1 vowel\n    const hasConsonant = selectedJamo.consonants.length >= 1;\n    const hasVowel = selectedJamo.vowels.length >= 1;\n\n    return hasConsonant && hasVowel;\n  }, [selectedJamo]);\n\n\n  const buildSyllable = useCallback(() => {\n    if (!canBuildSyllable()) return;\n\n    console.log('Building syllable with:', selectedJamo);\n\n    const initialConsonant = selectedJamo.consonants[0];\n    const vowel = selectedJamo.vowels[0];\n    const finalConsonant = selectedJamo.consonants.length > 1 ? selectedJamo.consonants[1] : null;\n\n    // Create syllable text based on structure\n    let syllableText = initialConsonant.koreanLetter + vowel.koreanLetter;\n    if (finalConsonant) {\n      syllableText += finalConsonant.koreanLetter;\n    }\n\n    console.log('Looking for target syllable with:', {\n      consonant: initialConsonant.koreanLetter,\n      vowel: vowel.koreanLetter,\n      final: finalConsonant ? finalConsonant.koreanLetter : null\n    });\n\n    // Find the matching syllable in the target word to get complete structure\n    const targetSyllable = selectedWord.syllables.find(ts => {\n      const consonantMatch = ts.consonant === initialConsonant.koreanLetter;\n      const vowelMatch = ts.vowel === vowel.koreanLetter;\n      const finalMatch = finalConsonant\n        ? ts.final === finalConsonant.koreanLetter\n        : !ts.final; // No final consonant expected\n\n      console.log('Checking syllable:', ts, { consonantMatch, vowelMatch, finalMatch });\n      return consonantMatch && vowelMatch && finalMatch;\n    });\n\n    console.log('Found target syllable:', targetSyllable);\n\n    const newSyllable = {\n      syllable: targetSyllable ? targetSyllable.syllable : syllableText,\n      consonant: initialConsonant.koreanLetter,\n      vowel: vowel.koreanLetter,\n      final: finalConsonant ? finalConsonant.koreanLetter : (targetSyllable ? targetSyllable.final : null),\n      structure: targetSyllable ? targetSyllable.structure : (finalConsonant ? 'CVC' : 'CV'),\n      completed: true\n    };\n\n    console.log('Created new syllable:', newSyllable);\n\n    setBuiltSyllables(prev => {\n      const updated = [...prev, newSyllable];\n      console.log('Updated builtSyllables:', updated);\n      return updated;\n    });\n\n    // Clear selections after building\n    setSelectedJamo({ consonants: [], vowels: [] });\n  }, [canBuildSyllable, selectedJamo, selectedWord]);\n\n  const handleSyllableDrop = useCallback((syllable) => {\n    console.log('Dropping syllable:', syllable);\n\n    if (!selectedWord) {\n      console.error('selectedWord is undefined');\n      return;\n    }\n\n    if (userWord.length >= selectedWord.syllables.length) {\n      console.log('Word is already complete');\n      return;\n    }\n\n    if (userWord.some(userSyl => userSyl.syllable === syllable.syllable)) {\n      console.log('Syllable already used');\n      return;\n    }\n\n    setUserWord(prev => {\n      const newWord = [...prev, syllable];\n      console.log('New userWord:', newWord);\n      return newWord;\n    });\n  }, [selectedWord, userWord]);\n\n  const removeSyllable = useCallback((index) => {\n    console.log('Removing syllable at index:', index);\n    setUserWord(prev => {\n      const newWord = prev.filter((_, i) => i !== index);\n      console.log('New userWord after removal:', newWord);\n      return newWord;\n    });\n  }, []);\n\n  const checkStageCompletion = useCallback(() => {\n    console.log('Checking stage completion:', { currentStage, userWord, selectedWord });\n\n    if (currentStage === 1) {\n      // For Stage 1, we need to check if all required jamo have been collected\n      // But since we're now using the old array-based structure for Stage 1,\n      // we need to maintain backward compatibility\n      const required = getRequiredJamo();\n      console.log('Stage 1 validation:', { required, selectedJamo });\n\n      // Check if all required consonants are in the collected jamo\n      const hasAllConsonants = required.consonants.every(reqC =>\n        selectedJamo.consonants?.some(selC => selC.id === reqC.id)\n      );\n\n      // Check if all required vowels are in the collected jamo\n      const hasAllVowels = required.vowels.every(reqV =>\n        selectedJamo.vowels?.some(selV => selV.id === reqV.id)\n      );\n\n      console.log('Stage 1 completion check:', { hasAllConsonants, hasAllVowels });\n      return hasAllConsonants && hasAllVowels;\n    }\n\n    if (currentStage === 2) {\n      return builtSyllables.length === selectedWord.syllables.length &&\n             builtSyllables.every(bs => bs.completed);\n    }\n\n    if (currentStage === 3) {\n      console.log('Stage 3 validation:', { userWord, selectedWord });\n\n      if (!selectedWord || !selectedWord.syllables) {\n        console.error('selectedWord or syllables is undefined');\n        return false;\n      }\n\n      if (userWord.length !== selectedWord.syllables.length) {\n        console.log('User word length mismatch:', userWord.length, selectedWord.syllables.length);\n        return false;\n      }\n\n      // Check each syllable with proper error handling\n      for (let index = 0; index < userWord.length; index++) {\n        const userSyl = userWord[index];\n        const targetSyllable = selectedWord.syllables[index];\n\n        console.log(`Checking index ${index}:`, { userSyl, targetSyllable });\n\n        if (!userSyl) {\n          console.error('userSyl is undefined at index:', index);\n          return false;\n        }\n\n        if (!targetSyllable) {\n          console.error('targetSyllable is undefined at index:', index);\n          return false;\n        }\n\n        if (!userSyl.syllable || !targetSyllable.syllable) {\n          console.error('Syllable text is undefined:', { userSyl, targetSyllable });\n          return false;\n        }\n\n        const isCorrect = userSyl.syllable === targetSyllable.syllable;\n        console.log(`Comparing: \"${userSyl.syllable}\" vs \"${targetSyllable.syllable}\" = ${isCorrect}`);\n\n        if (!isCorrect) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }, [currentStage, selectedJamo, builtSyllables, userWord, selectedWord, getRequiredJamo]);\n\n  const advanceToNextStage = useCallback(() => {\n    if (currentStage < 3) {\n      setCurrentStage(prev => prev + 1);\n      setShowHint(false);\n    }\n  }, [currentStage]);\n\n  const resetExercise = useCallback(() => {\n    setCurrentStage(1);\n    setSelectedJamo({ consonants: [], vowels: [] });\n    setBuiltSyllables([]);\n    setUserWord([]);\n    setShowHint(false);\n  }, []);\n\n  const getJamoButtonClass = (jamo, type) => {\n    let isSelected = false;\n\n    if (type === 'consonant') {\n      isSelected = selectedJamo.initial?.id === jamo.id || selectedJamo.final?.id === jamo.id;\n    } else if (type === 'vowel') {\n      isSelected = selectedJamo.vowel?.id === jamo.id;\n    }\n\n    return `jamo-btn ${isSelected ? 'selected' : 'available'}`;\n  };\n\n  const getSyllableButtonClass = (syllable) => {\n    const isUsed = userWord.some(userSyl => userSyl.syllable === syllable.syllable);\n    return `syllable-btn ${isUsed ? 'used' : 'available'}`;\n  };\n\n\n  if (!selectedWord) {\n    return (\n      <div className=\"word-builder-section\">\n        <div className=\"section-header\">\n          <h2>Progressive Word Builder</h2>\n          <p>Learn Korean writing step by step: from individual letters to complete words.</p>\n        </div>\n\n        <div className=\"word-selection\">\n          <h3>Select a word to build:</h3>\n          <div className=\"word-cards\">\n            {exampleWords.map(word => (\n              <button\n                key={word.id}\n                className=\"word-card\"\n                onClick={() => selectWord(word)}\n              >\n                <div className=\"word-korean\">{word.korean}</div>\n                <div className=\"word-romanization\">{word.romanization}</div>\n                <div className=\"word-english\">\"{word.english}\"</div>\n                <div className=\"syllable-count\">{word.syllables.length} syllables</div>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"word-builder-section\">\n      <div className=\"section-header\">\n        <div className=\"exercise-header\">\n          <button className=\"back-btn\" onClick={() => setSelectedWord(null)}>\n            ← Back to Word Selection\n          </button>\n          <h2>Build: {selectedWord.english}</h2>\n          <div className=\"word-info\">\n            <span className=\"target-word\">{selectedWord.korean}</span>\n            <span className=\"romanization\">({selectedWord.romanization})</span>\n          </div>\n        </div>\n\n        {/* Progress indicator */}\n        <div className=\"stage-progress\">\n          <div className={`stage ${currentStage === 1 ? 'active' : ''} ${currentStage > 1 ? 'completed' : ''}`}>\n            <span className=\"stage-number\">1</span>\n            <span className=\"stage-label\">Jamo</span>\n          </div>\n          <div className={`stage ${currentStage === 2 ? 'active' : ''} ${currentStage > 2 ? 'completed' : ''}`}>\n            <span className=\"stage-number\">2</span>\n            <span className=\"stage-label\">Syllables</span>\n          </div>\n          <div className={`stage ${currentStage === 3 ? 'active' : ''}`}>\n            <span className=\"stage-number\">3</span>\n            <span className=\"stage-label\">Word</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"word-builder-container\">\n        {/* Stage 1: Jamo Selection */}\n        {currentStage === 1 && (\n          <div className=\"stage-container\">\n            <div className=\"stage-header\">\n              <h3>Stage 1: Select Required Letters (Jamo)</h3>\n              <p>Choose all the consonants and vowels needed to build this word.</p>\n            </div>\n\n            <div className=\"jamo-selection\">\n              <div className=\"jamo-section\">\n                <h4>Required Consonants:</h4>\n                <div className=\"jamo-grid\">\n                  {requiredJamo.consonants.map(consonant => (\n                    <div\n                      key={consonant.id}\n                      className={getJamoButtonClass(consonant, 'consonant')}\n                      onClick={() => handleJamoSelection(consonant, 'consonant')}\n                    >\n                      <span className=\"jamo-letter\">{consonant.koreanLetter}</span>\n                      <span className=\"jamo-name\">{consonant.name}</span>\n                      <span className=\"jamo-sound\">({consonant.romanization})</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"jamo-section\">\n                <h4>Required Vowels:</h4>\n                <div className=\"jamo-grid\">\n                  {requiredJamo.vowels.map(vowel => (\n                    <div\n                      key={vowel.id}\n                      className={getJamoButtonClass(vowel, 'vowel')}\n                      onClick={() => handleJamoSelection(vowel, 'vowel')}\n                    >\n                      <span className=\"jamo-letter\">{vowel.koreanLetter}</span>\n                      <span className=\"jamo-name\">{vowel.name}</span>\n                      <span className=\"jamo-sound\">({vowel.romanization})</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"stage-controls\">\n              <button\n                className=\"hint-btn\"\n                onClick={showHintForCurrentStage}\n                disabled={stageHints.length === 0}\n              >\n                💡 Show Hint\n              </button>\n              {showHint && <div className=\"hint-text\">{currentHint}</div>}\n            </div>\n\n            <div className=\"stage-navigation\">\n              <button\n                className=\"next-stage-btn\"\n                onClick={advanceToNextStage}\n                disabled={!checkStageCompletion()}\n              >\n                Next: Build Syllables →\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Stage 2: Syllable Building */}\n        {currentStage === 2 && (\n          <div className=\"stage-container\">\n            <div className=\"stage-header\">\n              <h3>Stage 2: Build Syllable Blocks</h3>\n              <p>Combine consonants and vowels to create syllable blocks. Build them one at a time.</p>\n            </div>\n\n            <div className=\"syllable-building\">\n              {/* Available Jamo Pool for Syllable Building */}\n              <div className=\"jamo-pool-stage2\">\n                <h4>Available Letters:</h4>\n                <p>Select consonants and vowels to build the next syllable. You can reuse consonants for different positions.</p>\n                <div className=\"jamo-pool-grid\">\n                  {requiredJamo.consonants.map(consonant => {\n                    const isSelectedForInitial = selectedJamo.consonants\n                      .filter((_, index) => index === 0)\n                      .some(c => c.id === consonant.id);\n                    const isSelectedForFinal = selectedJamo.consonants\n                      .filter((_, index) => index > 0)\n                      .some(c => c.id === consonant.id);\n\n                    return (\n                      <button\n                        key={`${consonant.id}-${consonant.koreanLetter}`}\n                        className={`jamo-btn ${isSelectedForInitial || isSelectedForFinal ? 'selected' : 'available'}`}\n                        onClick={() => handleJamoSelection(consonant, 'consonant')}\n                      >\n                        <span className=\"jamo-letter\">{consonant.koreanLetter}</span>\n                        <span className=\"jamo-name\">{consonant.name}</span>\n                        {isSelectedForInitial && <span className=\"position-indicator initial\">초성</span>}\n                        {isSelectedForFinal && <span className=\"position-indicator final\">종성</span>}\n                      </button>\n                    );\n                  })}\n                  {requiredJamo.vowels.map(vowel => (\n                    <button\n                      key={vowel.id}\n                      className={getJamoButtonClass(vowel, 'vowel')}\n                      onClick={() => handleJamoSelection(vowel, 'vowel')}\n                    >\n                      <span className=\"jamo-letter\">{vowel.koreanLetter}</span>\n                      <span className=\"jamo-name\">{vowel.name}</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"jamo-workspace\">\n                <h4>Selected for Current Syllable:</h4>\n                <div className=\"selected-jamo\">\n                  {selectedJamo.consonants.map((c, index) => (\n                    <span key={`${c.id}-${index}`} className={`selected-jamo-item ${index === 0 ? 'consonant' : 'final-consonant'}`}>\n                      {c.koreanLetter} ({c.name})\n                      {index === 0 ? ' (initial)' : ' (final)'}\n                    </span>\n                  ))}\n                  {selectedJamo.vowels.map(v => (\n                    <span key={v.id} className=\"selected-jamo-item vowel\">\n                      {v.koreanLetter} ({v.name})\n                    </span>\n                  ))}\n                </div>\n\n                <div className=\"selection-summary\">\n                  {selectedJamo.consonants.length > 0 && selectedJamo.vowels.length > 0 && (\n                    <div className=\"structure-info\">\n                      {selectedJamo.consonants.length === 1 && selectedJamo.vowels.length === 1 && (\n                        <span className=\"structure-badge cv\">CV Structure</span>\n                      )}\n                      {selectedJamo.consonants.length === 2 && selectedJamo.vowels.length === 1 && (\n                        <span className=\"structure-badge cvc\">CVC Structure</span>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"syllable-preview\">\n                  {selectedJamo.consonants.length > 0 && selectedJamo.vowels.length > 0 && (\n                    <div className=\"preview-syllable\">\n                      <span className=\"preview-text\">\n                        Preview: {selectedJamo.consonants[0].koreanLetter + selectedJamo.vowels[0].koreanLetter}\n                        {selectedJamo.consonants.length > 1 && selectedJamo.consonants[1].koreanLetter}\n                      </span>\n                      <span className=\"preview-structure\">\n                        ({selectedJamo.consonants.length > 1 ? 'CVC' : 'CV'})\n                      </span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"workspace-buttons\">\n                  <button\n                    className=\"build-syllable-btn\"\n                    onClick={() => {\n                      console.log('Build Syllable clicked');\n                      console.log('Selected Jamo:', selectedJamo);\n                      console.log('Can build:', canBuildSyllable());\n                      buildSyllable();\n                    }}\n                    disabled={!canBuildSyllable()}\n                  >\n                    {canBuildSyllable()\n                      ? `Build Syllable (${selectedJamo.consonants.length > 1 ? 'CVC' : 'CV'}) →`\n                      : 'Select 1 consonant + 1 vowel (+ optional final consonant)'\n                    }\n                  </button>\n\n                  <button\n                    className=\"clear-selection-btn\"\n                    onClick={() => setSelectedJamo({ consonants: [], vowels: [] })}\n                  >\n                    Clear Selection\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"built-syllables\">\n                <h4>Built Syllables ({builtSyllables.length}/{selectedWord.syllables.length}):</h4>\n                <div className=\"syllables-display\">\n                  {builtSyllables.map((syllable, index) => (\n                    <div key={index} className=\"built-syllable\">\n                      <span className=\"syllable-text\">{syllable.syllable}</span>\n                      <div className=\"syllable-components\">\n                        {syllable.consonant} + {syllable.vowel}\n                        {syllable.final && ` + ${syllable.final}`}\n                      </div>\n                      <div className=\"syllable-structure\">{syllable.structure}</div>\n                    </div>\n                  ))}\n                </div>\n\n                {builtSyllables.length < selectedWord.syllables.length && (\n                  <div className=\"next-syllable-hint\">\n                    Next: Build \"{selectedWord.syllables[builtSyllables.length].syllable}\"\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"stage-controls\">\n              <button className=\"hint-btn\" onClick={showHintForCurrentStage}>\n                💡 Show Hint\n              </button>\n              {showHint && <div className=\"hint-text\">{currentHint}</div>}\n            </div>\n\n            <div className=\"stage-navigation\">\n              <button className=\"prev-stage-btn\" onClick={() => setCurrentStage(1)}>\n                ← Back to Jamo\n              </button>\n              <button\n                className=\"next-stage-btn\"\n                onClick={advanceToNextStage}\n                disabled={!checkStageCompletion()}\n              >\n                Next: Build Word →\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Stage 3: Word Building */}\n        {currentStage === 3 && (\n          <div className=\"stage-container\">\n            <div className=\"stage-header\">\n              <h3>Stage 3: Build the Complete Word</h3>\n              <p>Arrange the syllable blocks to form the complete word.</p>\n            </div>\n\n            <div className=\"word-building\">\n              <div className=\"target-word-area\">\n                <h4>Word Structure:</h4>\n                <div className=\"word-slots\">\n                  {selectedWord.syllables.map((targetSyllable, index) => {\n                    console.log(`Rendering word slot ${index}:`, { targetSyllable, userSyllable: userWord[index] });\n\n                    if (!targetSyllable) {\n                      console.error('targetSyllable is undefined at index:', index);\n                      return null;\n                    }\n\n                    const isCorrect = userWord[index] && userWord[index].syllable === targetSyllable.syllable;\n                    return (\n                      <div key={index} className={`word-slot ${isCorrect ? 'correct' : ''}`}>\n                        {userWord[index] ? (\n                          <div className={`syllable-in-word ${isCorrect ? 'correct' : ''}`}>\n                            <span className=\"syllable-text\">{userWord[index].syllable}</span>\n                            <button\n                              className=\"remove-syllable\"\n                              onClick={() => removeSyllable(index)}\n                            >\n                              ×\n                            </button>\n                          </div>\n                        ) : (\n                          <div className=\"empty-word-slot\">\n                            Drop syllable here\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n                {userWord.length > 0 && (\n                  <div className=\"current-word\">\n                    Current: <span className=\"current-word-display\">\n                      {userWord.map(s => s.syllable).join('')}\n                    </span>\n                  </div>\n                )}\n\n                {checkStageCompletion() && currentStage === 3 && (\n                  <div className=\"success-message\">\n                    🎉 Congratulations! You successfully built \"{selectedWord.korean}\" ({selectedWord.english})!\n                  </div>\n                )}\n              </div>\n\n              <div className=\"available-syllables\">\n                <h4>Available Syllables:</h4>\n                <div className=\"syllables-pool\">\n                  {builtSyllables.map((syllable, index) => (\n                    <div\n                      key={index}\n                      className={getSyllableButtonClass(syllable)}\n                      draggable={!userWord.some(userSyl => userSyl.syllable === syllable.syllable)}\n                      onDragStart={(e) => {\n                        e.dataTransfer.setData('text/plain', syllable.syllable);\n                      }}\n                      onClick={() => handleSyllableDrop(syllable)}\n                    >\n                      <span className=\"syllable-display\">{syllable.syllable}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"stage-controls\">\n              <button className=\"hint-btn\" onClick={showHintForCurrentStage}>\n                💡 Show Hint\n              </button>\n              {showHint && <div className=\"hint-text\">{currentHint}</div>}\n            </div>\n\n            <div className=\"stage-navigation\">\n              <button className=\"prev-stage-btn\" onClick={() => setCurrentStage(2)}>\n                ← Back to Syllables\n              </button>\n              <button className=\"check-word-btn\" onClick={() => {\n                try {\n                  console.log('Check Word button clicked');\n                  console.log('userWord:', userWord);\n                  console.log('selectedWord:', selectedWord);\n\n                  if (checkStageCompletion()) {\n                    setShowHint(false);\n                    setCurrentHint(`Perfect! You successfully built \"${selectedWord.korean}\" (${selectedWord.english})!`);\n                    setShowHint(true);\n                  } else {\n                    // Find the first incorrect syllable\n                    let errorMessage = 'Check your syllable placement and try again.';\n                    if (userWord.length > 0 && selectedWord && selectedWord.syllables) {\n                      const firstIncorrect = userWord.findIndex((userSyl, index) => {\n                        if (!userSyl || !selectedWord.syllables[index]) return true;\n                        return userSyl.syllable !== selectedWord.syllables[index].syllable;\n                      });\n\n                      if (firstIncorrect >= 0) {\n                        errorMessage = `Check position ${firstIncorrect + 1}. Make sure \"${selectedWord.syllables[firstIncorrect].syllable}\" is in the correct place.`;\n                      }\n                    }\n\n                    setShowHint(false);\n                    setCurrentHint(errorMessage);\n                    setShowHint(true);\n                  }\n                } catch (error) {\n                  console.error('Error in Check Word:', error);\n                  setShowHint(false);\n                  setCurrentHint('An error occurred. Please try again or refresh the page.');\n                  setShowHint(true);\n                }\n              }}>\n                Check Word\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Overall Controls */}\n        <div className=\"exercise-controls\">\n          <button className=\"reset-btn\" onClick={resetExercise}>\n            Start Over\n          </button>\n          <button className=\"new-word-btn\" onClick={() => setSelectedWord(null)}>\n            Try Another Word\n          </button>\n        </div>\n\n        {/* Hints */}\n        {showHint && (\n          <div className=\"hint-section\">\n            <div className=\"hint-content\">\n              <span className=\"hint-icon\">💡</span>\n              <span className=\"hint-text\">{currentHint}</span>\n              <button className=\"close-hint\" onClick={() => setShowHint(false)}>×</button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WordBuilderSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}