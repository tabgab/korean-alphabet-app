{"ast":null,"code":"import _objectSpread from\"/Users/gabortabi/DEV/learnKorean/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useCallback}from'react';import{exampleWords,koreanConsonants,koreanVowels}from'../koreanAlphabetData';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const WordBuilderSection=()=>{const[selectedWord,setSelectedWord]=useState(null);const[currentStage,setCurrentStage]=useState(1);// 1: jamo, 2: syllables, 3: word\nconst[selectedJamo,setSelectedJamo]=useState({consonants:[],// Array of selected consonants (can include duplicates for different positions)\nvowels:[]// Array of selected vowels\n});const[builtSyllables,setBuiltSyllables]=useState([]);const[userWord,setUserWord]=useState([]);const[showHint,setShowHint]=useState(false);const[currentHint,setCurrentHint]=useState('');const selectWord=useCallback(word=>{setSelectedWord(word);setCurrentStage(1);setSelectedJamo({consonants:[],vowels:[]});setBuiltSyllables([]);setUserWord([]);setShowHint(false);},[]);const getRequiredJamo=useCallback(()=>{if(!selectedWord)return{consonants:[],vowels:[]};const required={consonants:[],vowels:[]};selectedWord.syllables.forEach(syllable=>{// Add initial consonant\nif(syllable.consonant){const consonant=koreanConsonants.find(c=>c.koreanLetter===syllable.consonant);if(consonant&&!required.consonants.find(c=>c.id===consonant.id)){required.consonants.push(consonant);}}// Add vowel\nif(syllable.vowel){const vowel=koreanVowels.find(v=>v.koreanLetter===syllable.vowel);if(vowel&&!required.vowels.find(v=>v.id===vowel.id)){required.vowels.push(vowel);}}// Add final consonant (for CVC syllables)\nif(syllable.final){const finalConsonant=koreanConsonants.find(c=>c.koreanLetter===syllable.final);if(finalConsonant&&!required.consonants.find(c=>c.id===finalConsonant.id)){required.consonants.push(finalConsonant);}}});return required;},[selectedWord]);const getHints=useCallback(()=>{if(!selectedWord)return[];const hints=[];if(currentStage===1){const required=getRequiredJamo();const missingConsonants=required.consonants.filter(reqC=>{var _selectedJamo$consona;return!((_selectedJamo$consona=selectedJamo.consonants)!==null&&_selectedJamo$consona!==void 0&&_selectedJamo$consona.some(selC=>selC.id===reqC.id));});const missingVowels=required.vowels.filter(reqV=>{var _selectedJamo$vowels;return!((_selectedJamo$vowels=selectedJamo.vowels)!==null&&_selectedJamo$vowels!==void 0&&_selectedJamo$vowels.some(selV=>selV.id===reqV.id));});if(missingConsonants.length>0){hints.push(\"Select the consonant: \".concat(missingConsonants[0].koreanLetter,\" (\").concat(missingConsonants[0].name,\")\"));}else if(missingVowels.length>0){hints.push(\"Select the vowel: \".concat(missingVowels[0].koreanLetter,\" (\").concat(missingVowels[0].name,\")\"));}else{hints.push(\"Great! You've selected all required letters. Click 'Next' to build syllables.\");}}if(currentStage===2){const currentSyllableIndex=builtSyllables.length;if(currentSyllableIndex<selectedWord.syllables.length){const targetSyllable=selectedWord.syllables[currentSyllableIndex];if(!selectedJamo.initial&&!selectedJamo.vowel){if(targetSyllable.structure==='CVC'){hints.push(\"Build \\\"\".concat(targetSyllable.syllable,\"\\\" (CVC): Select \").concat(targetSyllable.consonant,\" (initial) + \").concat(targetSyllable.vowel,\" + \").concat(targetSyllable.final,\" (final)\"));}else{hints.push(\"Build \\\"\".concat(targetSyllable.syllable,\"\\\" (CV): Select \").concat(targetSyllable.consonant,\" + \").concat(targetSyllable.vowel));}}else if(selectedJamo.initial&&!selectedJamo.vowel){hints.push(\"Now select \".concat(targetSyllable.vowel).concat(targetSyllable.final?' (and optionally '+targetSyllable.final+' for final consonant)':''));}else if(!selectedJamo.initial&&selectedJamo.vowel){hints.push(\"Select \".concat(targetSyllable.consonant,\" as initial consonant\"));}else if(selectedJamo.initial&&selectedJamo.vowel&&!selectedJamo.final){if(targetSyllable.final){// Check if we can reuse the same consonant for final position\nconst required=getRequiredJamo();const availableConsonants=required.consonants.filter(c=>c.koreanLetter===targetSyllable.final||c.koreanLetter===targetSyllable.consonant);if(availableConsonants.length>0){hints.push(\"Add \".concat(targetSyllable.final,\" as final consonant (you can reuse \").concat(targetSyllable.consonant,\" if it's the same letter)\"));}else{hints.push(\"Add \".concat(targetSyllable.final,\" as final consonant\"));}}else{hints.push(\"Click \\\"Build Syllable\\\" to create \\\"\".concat(targetSyllable.syllable,\"\\\" (CV structure)\"));}}else if(selectedJamo.initial&&selectedJamo.vowel&&selectedJamo.final){hints.push(\"Click \\\"Build Syllable\\\" to create \\\"\".concat(targetSyllable.syllable,\"\\\" (CVC structure)\"));}}}if(currentStage===3){if(userWord.length<selectedWord.syllables.length){const nextSyllable=selectedWord.syllables[userWord.length];const availableSyllable=builtSyllables.find(bs=>bs.syllable===nextSyllable.syllable);if(availableSyllable){hints.push(\"Drag \\\"\".concat(availableSyllable.syllable,\"\\\" to the next empty slot\"));}else{hints.push(\"Build \\\"\".concat(nextSyllable.syllable,\"\\\" first in Stage 2\"));}}else{hints.push(\"Click \\\"Check Word\\\" to verify your word construction\");}}return hints;},[selectedWord,currentStage,selectedJamo,builtSyllables,userWord,getRequiredJamo]);const showHintForCurrentStage=useCallback(()=>{const hints=getHints();if(hints.length>0){setCurrentHint(hints[0]);setShowHint(true);}},[getHints]);const handleJamoSelection=useCallback((jamo,type)=>{console.log('Jamo selected:',jamo,type);setSelectedJamo(prev=>{if(type==='consonant'){// For consonants, allow multiple selections of the same jamo for different positions\n// Check if this exact jamo is already selected\nconst isAlreadySelected=prev.consonants.some(c=>c.id===jamo.id);if(isAlreadySelected){// If already selected, we can still add it again for reuse\n// This allows the same consonant to be used in multiple positions\nconsole.log('Adding another instance of consonant for reuse');return _objectSpread(_objectSpread({},prev),{},{consonants:[...prev.consonants,jamo]});}else{// If not selected, add it\nconsole.log('Adding new consonant selection');return _objectSpread(_objectSpread({},prev),{},{consonants:[...prev.consonants,jamo]});}}else if(type==='vowel'){// For vowels, toggle behavior (usually only need one vowel per syllable)\nconst isAlreadySelected=prev.vowels.some(v=>v.id===jamo.id);if(isAlreadySelected){console.log('Toggling vowel selection');return _objectSpread(_objectSpread({},prev),{},{vowels:prev.vowels.filter(v=>v.id!==jamo.id)});}else{console.log('Adding vowel selection');return _objectSpread(_objectSpread({},prev),{},{vowels:[...prev.vowels,jamo]});}}return prev;});},[]);const canBuildSyllable=useCallback(()=>{// Need at least 1 consonant and 1 vowel to build a syllable\n// For CVC syllables, we'll need 2 consonants and 1 vowel\nconst hasConsonant=selectedJamo.consonants.length>=1;const hasVowel=selectedJamo.vowels.length>=1;return hasConsonant&&hasVowel;},[selectedJamo]);const buildSyllable=useCallback(()=>{if(!canBuildSyllable())return;console.log('Building syllable with:',selectedJamo);const initialConsonant=selectedJamo.consonants[0];const vowel=selectedJamo.vowels[0];const finalConsonant=selectedJamo.consonants.length>1?selectedJamo.consonants[1]:null;// Create syllable text based on structure\nlet syllableText=initialConsonant.koreanLetter+vowel.koreanLetter;if(finalConsonant){syllableText+=finalConsonant.koreanLetter;}console.log('Looking for target syllable with:',{consonant:initialConsonant.koreanLetter,vowel:vowel.koreanLetter,final:finalConsonant?finalConsonant.koreanLetter:null});// Find the matching syllable in the target word to get complete structure\nconst targetSyllable=selectedWord.syllables.find(ts=>{const consonantMatch=ts.consonant===initialConsonant.koreanLetter;const vowelMatch=ts.vowel===vowel.koreanLetter;const finalMatch=finalConsonant?ts.final===finalConsonant.koreanLetter:!ts.final;// No final consonant expected\nconsole.log('Checking syllable:',ts,{consonantMatch,vowelMatch,finalMatch});return consonantMatch&&vowelMatch&&finalMatch;});console.log('Found target syllable:',targetSyllable);const newSyllable={syllable:targetSyllable?targetSyllable.syllable:syllableText,consonant:initialConsonant.koreanLetter,vowel:vowel.koreanLetter,final:finalConsonant?finalConsonant.koreanLetter:targetSyllable?targetSyllable.final:null,structure:targetSyllable?targetSyllable.structure:finalConsonant?'CVC':'CV',completed:true};console.log('Created new syllable:',newSyllable);setBuiltSyllables(prev=>{const updated=[...prev,newSyllable];console.log('Updated builtSyllables:',updated);return updated;});// Clear selections after building\nsetSelectedJamo({consonants:[],vowels:[]});},[canBuildSyllable,selectedJamo,selectedWord]);const handleSyllableDrop=useCallback(syllable=>{console.log('Dropping syllable:',syllable);if(!selectedWord){console.error('selectedWord is undefined');return;}if(userWord.length>=selectedWord.syllables.length){console.log('Word is already complete');return;}if(userWord.some(userSyl=>userSyl.syllable===syllable.syllable)){console.log('Syllable already used');return;}setUserWord(prev=>{const newWord=[...prev,syllable];console.log('New userWord:',newWord);return newWord;});},[selectedWord,userWord]);const removeSyllable=useCallback(index=>{console.log('Removing syllable at index:',index);setUserWord(prev=>{const newWord=prev.filter((_,i)=>i!==index);console.log('New userWord after removal:',newWord);return newWord;});},[]);const checkStageCompletion=useCallback(()=>{console.log('Checking stage completion:',{currentStage,userWord,selectedWord});if(currentStage===1){// For Stage 1, we need to check if all required jamo have been collected\n// But since we're now using the old array-based structure for Stage 1,\n// we need to maintain backward compatibility\nconst required=getRequiredJamo();console.log('Stage 1 validation:',{required,selectedJamo});// Check if all required consonants are in the collected jamo\nconst hasAllConsonants=required.consonants.every(reqC=>{var _selectedJamo$consona2;return(_selectedJamo$consona2=selectedJamo.consonants)===null||_selectedJamo$consona2===void 0?void 0:_selectedJamo$consona2.some(selC=>selC.id===reqC.id);});// Check if all required vowels are in the collected jamo\nconst hasAllVowels=required.vowels.every(reqV=>{var _selectedJamo$vowels2;return(_selectedJamo$vowels2=selectedJamo.vowels)===null||_selectedJamo$vowels2===void 0?void 0:_selectedJamo$vowels2.some(selV=>selV.id===reqV.id);});console.log('Stage 1 completion check:',{hasAllConsonants,hasAllVowels});return hasAllConsonants&&hasAllVowels;}if(currentStage===2){return builtSyllables.length===selectedWord.syllables.length&&builtSyllables.every(bs=>bs.completed);}if(currentStage===3){console.log('Stage 3 validation:',{userWord,selectedWord});if(!selectedWord||!selectedWord.syllables){console.error('selectedWord or syllables is undefined');return false;}if(userWord.length!==selectedWord.syllables.length){console.log('User word length mismatch:',userWord.length,selectedWord.syllables.length);return false;}// Check each syllable with proper error handling\nfor(let index=0;index<userWord.length;index++){const userSyl=userWord[index];const targetSyllable=selectedWord.syllables[index];console.log(\"Checking index \".concat(index,\":\"),{userSyl,targetSyllable});if(!userSyl){console.error('userSyl is undefined at index:',index);return false;}if(!targetSyllable){console.error('targetSyllable is undefined at index:',index);return false;}if(!userSyl.syllable||!targetSyllable.syllable){console.error('Syllable text is undefined:',{userSyl,targetSyllable});return false;}const isCorrect=userSyl.syllable===targetSyllable.syllable;console.log(\"Comparing: \\\"\".concat(userSyl.syllable,\"\\\" vs \\\"\").concat(targetSyllable.syllable,\"\\\" = \").concat(isCorrect));if(!isCorrect){return false;}}return true;}return false;},[currentStage,selectedJamo,builtSyllables,userWord,selectedWord,getRequiredJamo]);const advanceToNextStage=useCallback(()=>{if(currentStage<3){setCurrentStage(prev=>prev+1);setShowHint(false);}},[currentStage]);const resetExercise=useCallback(()=>{setCurrentStage(1);setSelectedJamo({consonants:[],vowels:[]});setBuiltSyllables([]);setUserWord([]);setShowHint(false);},[]);const getJamoButtonClass=(jamo,type)=>{let isSelected=false;if(type==='consonant'){isSelected=selectedJamo.consonants.some(c=>c.id===jamo.id);}else if(type==='vowel'){isSelected=selectedJamo.vowels.some(v=>v.id===jamo.id);}return\"jamo-btn \".concat(isSelected?'selected':'available');};const getSyllableButtonClass=syllable=>{const isUsed=userWord.some(userSyl=>userSyl.syllable===syllable.syllable);return\"syllable-btn \".concat(isUsed?'used':'available');};if(!selectedWord){return/*#__PURE__*/_jsxs(\"div\",{className:\"word-builder-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"section-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Progressive Word Builder\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Learn Korean writing step by step: from individual letters to complete words.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"word-selection\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Select a word to build:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"word-cards\",children:exampleWords.map(word=>/*#__PURE__*/_jsxs(\"button\",{className:\"word-card\",onClick:()=>selectWord(word),children:[/*#__PURE__*/_jsx(\"div\",{className:\"word-korean\",children:word.korean}),/*#__PURE__*/_jsx(\"div\",{className:\"word-romanization\",children:word.romanization}),/*#__PURE__*/_jsxs(\"div\",{className:\"word-english\",children:[\"\\\"\",word.english,\"\\\"\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"syllable-count\",children:[word.syllables.length,\" syllables\"]})]},word.id))})]})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"word-builder-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"section-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-header\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"back-btn\",onClick:()=>setSelectedWord(null),children:\"\\u2190 Back to Word Selection\"}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"Build: \",selectedWord.english]}),/*#__PURE__*/_jsxs(\"div\",{className:\"word-info\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"target-word\",children:selectedWord.korean}),/*#__PURE__*/_jsxs(\"span\",{className:\"romanization\",children:[\"(\",selectedWord.romanization,\")\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stage-progress\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stage \".concat(currentStage===1?'active':'',\" \").concat(currentStage>1?'completed':''),children:[/*#__PURE__*/_jsx(\"span\",{className:\"stage-number\",children:\"1\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stage-label\",children:\"Jamo\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stage \".concat(currentStage===2?'active':'',\" \").concat(currentStage>2?'completed':''),children:[/*#__PURE__*/_jsx(\"span\",{className:\"stage-number\",children:\"2\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stage-label\",children:\"Syllables\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stage \".concat(currentStage===3?'active':''),children:[/*#__PURE__*/_jsx(\"span\",{className:\"stage-number\",children:\"3\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stage-label\",children:\"Word\"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"word-builder-container\",children:[currentStage===1&&/*#__PURE__*/_jsxs(\"div\",{className:\"stage-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stage-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Stage 1: Select Required Letters (Jamo)\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Choose all the consonants and vowels needed to build this word.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"jamo-selection\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"jamo-section\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Required Consonants:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"jamo-grid\",children:getRequiredJamo().consonants.map(consonant=>/*#__PURE__*/_jsxs(\"div\",{className:getJamoButtonClass(consonant,'consonant'),onClick:()=>handleJamoSelection(consonant,'consonant'),children:[/*#__PURE__*/_jsx(\"span\",{className:\"jamo-letter\",children:consonant.koreanLetter}),/*#__PURE__*/_jsx(\"span\",{className:\"jamo-name\",children:consonant.name}),/*#__PURE__*/_jsxs(\"span\",{className:\"jamo-sound\",children:[\"(\",consonant.romanization,\")\"]})]},consonant.id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"jamo-section\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Required Vowels:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"jamo-grid\",children:getRequiredJamo().vowels.map(vowel=>/*#__PURE__*/_jsxs(\"div\",{className:getJamoButtonClass(vowel,'vowel'),onClick:()=>handleJamoSelection(vowel,'vowel'),children:[/*#__PURE__*/_jsx(\"span\",{className:\"jamo-letter\",children:vowel.koreanLetter}),/*#__PURE__*/_jsx(\"span\",{className:\"jamo-name\",children:vowel.name}),/*#__PURE__*/_jsxs(\"span\",{className:\"jamo-sound\",children:[\"(\",vowel.romanization,\")\"]})]},vowel.id))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stage-controls\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"hint-btn\",onClick:showHintForCurrentStage,disabled:stageHints.length===0,children:\"\\uD83D\\uDCA1 Show Hint\"}),showHint&&/*#__PURE__*/_jsx(\"div\",{className:\"hint-text\",children:currentHint})]}),/*#__PURE__*/_jsx(\"div\",{className:\"stage-navigation\",children:/*#__PURE__*/_jsx(\"button\",{className:\"next-stage-btn\",onClick:advanceToNextStage,disabled:!checkStageCompletion(),children:\"Next: Build Syllables \\u2192\"})})]}),currentStage===2&&/*#__PURE__*/_jsxs(\"div\",{className:\"stage-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stage-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Stage 2: Build Syllable Blocks\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Combine consonants and vowels to create syllable blocks. Build them one at a time.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"syllable-building\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"jamo-pool-stage2\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Available Letters:\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Select consonants and vowels to build the next syllable. You can reuse consonants for different positions.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"jamo-pool-grid\",children:[getRequiredJamo().consonants.map(consonant=>{const selectedCount=selectedJamo.consonants.filter(c=>c.id===consonant.id).length;const maxNeeded=2;// Can be used as both initial and final\nreturn/*#__PURE__*/_jsxs(\"button\",{className:\"jamo-btn \".concat(selectedCount>0?'selected':'available'),onClick:()=>handleJamoSelection(consonant,'consonant'),children:[/*#__PURE__*/_jsx(\"span\",{className:\"jamo-letter\",children:consonant.koreanLetter}),/*#__PURE__*/_jsx(\"span\",{className:\"jamo-name\",children:consonant.name}),selectedCount>0&&/*#__PURE__*/_jsxs(\"span\",{className:\"usage-count\",children:[\"(\",selectedCount,\"/\",maxNeeded,\")\"]})]},\"\".concat(consonant.id,\"-\").concat(consonant.koreanLetter));}),getRequiredJamo().vowels.map(vowel=>/*#__PURE__*/_jsxs(\"button\",{className:getJamoButtonClass(vowel,'vowel'),onClick:()=>handleJamoSelection(vowel,'vowel'),children:[/*#__PURE__*/_jsx(\"span\",{className:\"jamo-letter\",children:vowel.koreanLetter}),/*#__PURE__*/_jsx(\"span\",{className:\"jamo-name\",children:vowel.name})]},vowel.id))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"jamo-workspace\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Selected for Current Syllable:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"selected-jamo\",children:[selectedJamo.consonants.map((c,index)=>{const position=index===0?'initial':'final';const positionKorean=position==='initial'?'초성':'종성';return/*#__PURE__*/_jsxs(\"span\",{className:\"selected-jamo-item \".concat(position==='initial'?'consonant':'final-consonant'),children:[c.koreanLetter,\" (\",c.name,\") - \",positionKorean]},\"\".concat(c.id,\"-\").concat(index,\"-\").concat(position));}),selectedJamo.vowels.map(v=>/*#__PURE__*/_jsxs(\"span\",{className:\"selected-jamo-item vowel\",children:[v.koreanLetter,\" (\",v.name,\") - Vowel\"]},v.id))]}),/*#__PURE__*/_jsx(\"div\",{className:\"selection-summary\",children:selectedJamo.consonants.length>0&&selectedJamo.vowels.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"structure-info\",children:[selectedJamo.consonants.length===1&&selectedJamo.vowels.length===1&&/*#__PURE__*/_jsx(\"span\",{className:\"structure-badge cv\",children:\"CV Structure\"}),selectedJamo.consonants.length===2&&selectedJamo.vowels.length===1&&/*#__PURE__*/_jsx(\"span\",{className:\"structure-badge cvc\",children:\"CVC Structure\"})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"syllable-preview\",children:selectedJamo.consonants.length>0&&selectedJamo.vowels.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"preview-syllable\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"preview-text\",children:[\"Preview: \",selectedJamo.consonants[0].koreanLetter+selectedJamo.vowels[0].koreanLetter,selectedJamo.consonants.length>1&&selectedJamo.consonants[1].koreanLetter]}),/*#__PURE__*/_jsxs(\"span\",{className:\"preview-structure\",children:[\"(\",selectedJamo.consonants.length>1?'CVC':'CV',\")\"]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"workspace-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"build-syllable-btn\",onClick:()=>{console.log('Build Syllable clicked');console.log('Selected Jamo:',selectedJamo);console.log('Can build:',canBuildSyllable());buildSyllable();},disabled:!canBuildSyllable(),children:canBuildSyllable()?\"Build Syllable (\".concat(selectedJamo.consonants.length>1?'CVC':'CV',\") \\u2192\"):'Select 1 consonant + 1 vowel (+ optional final consonant)'}),/*#__PURE__*/_jsx(\"button\",{className:\"clear-selection-btn\",onClick:()=>setSelectedJamo({consonants:[],vowels:[]}),children:\"Clear Selection\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"built-syllables\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\"Built Syllables (\",builtSyllables.length,\"/\",selectedWord.syllables.length,\"):\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"syllables-display\",children:builtSyllables.map((syllable,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"built-syllable\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"syllable-text\",children:syllable.syllable}),/*#__PURE__*/_jsxs(\"div\",{className:\"syllable-components\",children:[syllable.consonant,\" + \",syllable.vowel,syllable.final&&\" + \".concat(syllable.final)]}),/*#__PURE__*/_jsx(\"div\",{className:\"syllable-structure\",children:syllable.structure})]},index))}),builtSyllables.length<selectedWord.syllables.length&&/*#__PURE__*/_jsxs(\"div\",{className:\"next-syllable-hint\",children:[\"Next: Build \\\"\",selectedWord.syllables[builtSyllables.length].syllable,\"\\\"\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stage-controls\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"hint-btn\",onClick:showHintForCurrentStage,children:\"\\uD83D\\uDCA1 Show Hint\"}),showHint&&/*#__PURE__*/_jsx(\"div\",{className:\"hint-text\",children:currentHint})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stage-navigation\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"prev-stage-btn\",onClick:()=>setCurrentStage(1),children:\"\\u2190 Back to Jamo\"}),/*#__PURE__*/_jsx(\"button\",{className:\"next-stage-btn\",onClick:advanceToNextStage,disabled:!checkStageCompletion(),children:\"Next: Build Word \\u2192\"})]})]}),currentStage===3&&/*#__PURE__*/_jsxs(\"div\",{className:\"stage-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stage-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Stage 3: Build the Complete Word\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Arrange the syllable blocks to form the complete word.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"word-building\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"target-word-area\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Word Structure:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"word-slots\",children:selectedWord.syllables.map((targetSyllable,index)=>{console.log(\"Rendering word slot \".concat(index,\":\"),{targetSyllable,userSyllable:userWord[index]});if(!targetSyllable){console.error('targetSyllable is undefined at index:',index);return null;}const isCorrect=userWord[index]&&userWord[index].syllable===targetSyllable.syllable;return/*#__PURE__*/_jsx(\"div\",{className:\"word-slot \".concat(isCorrect?'correct':''),children:userWord[index]?/*#__PURE__*/_jsxs(\"div\",{className:\"syllable-in-word \".concat(isCorrect?'correct':''),children:[/*#__PURE__*/_jsx(\"span\",{className:\"syllable-text\",children:userWord[index].syllable}),/*#__PURE__*/_jsx(\"button\",{className:\"remove-syllable\",onClick:()=>removeSyllable(index),children:\"\\xD7\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"empty-word-slot\",children:\"Drop syllable here\"})},index);})}),userWord.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"current-word\",children:[\"Current: \",/*#__PURE__*/_jsx(\"span\",{className:\"current-word-display\",children:userWord.map(s=>s.syllable).join('')})]}),checkStageCompletion()&&currentStage===3&&/*#__PURE__*/_jsxs(\"div\",{className:\"success-message\",children:[\"\\uD83C\\uDF89 Congratulations! You successfully built \\\"\",selectedWord.korean,\"\\\" (\",selectedWord.english,\")!\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"available-syllables\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Available Syllables:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"syllables-pool\",children:builtSyllables.map((syllable,index)=>/*#__PURE__*/_jsx(\"div\",{className:getSyllableButtonClass(syllable),draggable:!userWord.some(userSyl=>userSyl.syllable===syllable.syllable),onDragStart:e=>{e.dataTransfer.setData('text/plain',syllable.syllable);},onClick:()=>handleSyllableDrop(syllable),children:/*#__PURE__*/_jsx(\"span\",{className:\"syllable-display\",children:syllable.syllable})},index))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stage-controls\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"hint-btn\",onClick:showHintForCurrentStage,children:\"\\uD83D\\uDCA1 Show Hint\"}),showHint&&/*#__PURE__*/_jsx(\"div\",{className:\"hint-text\",children:currentHint})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stage-navigation\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"prev-stage-btn\",onClick:()=>setCurrentStage(2),children:\"\\u2190 Back to Syllables\"}),/*#__PURE__*/_jsx(\"button\",{className:\"check-word-btn\",onClick:()=>{try{console.log('Check Word button clicked');console.log('userWord:',userWord);console.log('selectedWord:',selectedWord);if(checkStageCompletion()){setShowHint(false);setCurrentHint(\"Perfect! You successfully built \\\"\".concat(selectedWord.korean,\"\\\" (\").concat(selectedWord.english,\")!\"));setShowHint(true);}else{// Find the first incorrect syllable\nlet errorMessage='Check your syllable placement and try again.';if(userWord.length>0&&selectedWord&&selectedWord.syllables){const firstIncorrect=userWord.findIndex((userSyl,index)=>{if(!userSyl||!selectedWord.syllables[index])return true;return userSyl.syllable!==selectedWord.syllables[index].syllable;});if(firstIncorrect>=0){errorMessage=\"Check position \".concat(firstIncorrect+1,\". Make sure \\\"\").concat(selectedWord.syllables[firstIncorrect].syllable,\"\\\" is in the correct place.\");}}setShowHint(false);setCurrentHint(errorMessage);setShowHint(true);}}catch(error){console.error('Error in Check Word:',error);setShowHint(false);setCurrentHint('An error occurred. Please try again or refresh the page.');setShowHint(true);}},children:\"Check Word\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-controls\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"reset-btn\",onClick:resetExercise,children:\"Start Over\"}),/*#__PURE__*/_jsx(\"button\",{className:\"new-word-btn\",onClick:()=>setSelectedWord(null),children:\"Try Another Word\"})]}),showHint&&/*#__PURE__*/_jsx(\"div\",{className:\"hint-section\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"hint-content\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"hint-icon\",children:\"\\uD83D\\uDCA1\"}),/*#__PURE__*/_jsx(\"span\",{className:\"hint-text\",children:currentHint}),/*#__PURE__*/_jsx(\"button\",{className:\"close-hint\",onClick:()=>setShowHint(false),children:\"\\xD7\"})]})})]})]});};export default WordBuilderSection;","map":{"version":3,"names":["React","useState","useCallback","exampleWords","koreanConsonants","koreanVowels","jsx","_jsx","jsxs","_jsxs","WordBuilderSection","selectedWord","setSelectedWord","currentStage","setCurrentStage","selectedJamo","setSelectedJamo","consonants","vowels","builtSyllables","setBuiltSyllables","userWord","setUserWord","showHint","setShowHint","currentHint","setCurrentHint","selectWord","word","getRequiredJamo","required","syllables","forEach","syllable","consonant","find","c","koreanLetter","id","push","vowel","v","final","finalConsonant","getHints","hints","missingConsonants","filter","reqC","_selectedJamo$consona","some","selC","missingVowels","reqV","_selectedJamo$vowels","selV","length","concat","name","currentSyllableIndex","targetSyllable","initial","structure","availableConsonants","nextSyllable","availableSyllable","bs","showHintForCurrentStage","handleJamoSelection","jamo","type","console","log","prev","isAlreadySelected","_objectSpread","canBuildSyllable","hasConsonant","hasVowel","buildSyllable","initialConsonant","syllableText","ts","consonantMatch","vowelMatch","finalMatch","newSyllable","completed","updated","handleSyllableDrop","error","userSyl","newWord","removeSyllable","index","_","i","checkStageCompletion","hasAllConsonants","every","_selectedJamo$consona2","hasAllVowels","_selectedJamo$vowels2","isCorrect","advanceToNextStage","resetExercise","getJamoButtonClass","isSelected","getSyllableButtonClass","isUsed","className","children","map","onClick","korean","romanization","english","disabled","stageHints","selectedCount","maxNeeded","position","positionKorean","userSyllable","s","join","draggable","onDragStart","e","dataTransfer","setData","errorMessage","firstIncorrect","findIndex"],"sources":["/Users/gabortabi/DEV/learnKorean/src/components/WordBuilderSection.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { exampleWords, koreanConsonants, koreanVowels } from '../koreanAlphabetData';\n\nconst WordBuilderSection = () => {\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [currentStage, setCurrentStage] = useState(1); // 1: jamo, 2: syllables, 3: word\n  const [selectedJamo, setSelectedJamo] = useState({\n    consonants: [],   // Array of selected consonants (can include duplicates for different positions)\n    vowels: []        // Array of selected vowels\n  });\n  const [builtSyllables, setBuiltSyllables] = useState([]);\n  const [userWord, setUserWord] = useState([]);\n  const [showHint, setShowHint] = useState(false);\n  const [currentHint, setCurrentHint] = useState('');\n\n  const selectWord = useCallback((word) => {\n    setSelectedWord(word);\n    setCurrentStage(1);\n    setSelectedJamo({ consonants: [], vowels: [] });\n    setBuiltSyllables([]);\n    setUserWord([]);\n    setShowHint(false);\n  }, []);\n\n  const getRequiredJamo = useCallback(() => {\n    if (!selectedWord) return { consonants: [], vowels: [] };\n\n    const required = { consonants: [], vowels: [] };\n\n    selectedWord.syllables.forEach(syllable => {\n      // Add initial consonant\n      if (syllable.consonant) {\n        const consonant = koreanConsonants.find(c => c.koreanLetter === syllable.consonant);\n        if (consonant && !required.consonants.find(c => c.id === consonant.id)) {\n          required.consonants.push(consonant);\n        }\n      }\n\n      // Add vowel\n      if (syllable.vowel) {\n        const vowel = koreanVowels.find(v => v.koreanLetter === syllable.vowel);\n        if (vowel && !required.vowels.find(v => v.id === vowel.id)) {\n          required.vowels.push(vowel);\n        }\n      }\n\n      // Add final consonant (for CVC syllables)\n      if (syllable.final) {\n        const finalConsonant = koreanConsonants.find(c => c.koreanLetter === syllable.final);\n        if (finalConsonant && !required.consonants.find(c => c.id === finalConsonant.id)) {\n          required.consonants.push(finalConsonant);\n        }\n      }\n    });\n\n    return required;\n  }, [selectedWord]);\n\n  const getHints = useCallback(() => {\n    if (!selectedWord) return [];\n\n    const hints = [];\n\n    if (currentStage === 1) {\n      const required = getRequiredJamo();\n      const missingConsonants = required.consonants.filter(reqC =>\n        !selectedJamo.consonants?.some(selC => selC.id === reqC.id)\n      );\n      const missingVowels = required.vowels.filter(reqV =>\n        !selectedJamo.vowels?.some(selV => selV.id === reqV.id)\n      );\n\n      if (missingConsonants.length > 0) {\n        hints.push(`Select the consonant: ${missingConsonants[0].koreanLetter} (${missingConsonants[0].name})`);\n      } else if (missingVowels.length > 0) {\n        hints.push(`Select the vowel: ${missingVowels[0].koreanLetter} (${missingVowels[0].name})`);\n      } else {\n        hints.push(\"Great! You've selected all required letters. Click 'Next' to build syllables.\");\n      }\n    }\n\n    if (currentStage === 2) {\n      const currentSyllableIndex = builtSyllables.length;\n      if (currentSyllableIndex < selectedWord.syllables.length) {\n        const targetSyllable = selectedWord.syllables[currentSyllableIndex];\n\n        if (!selectedJamo.initial && !selectedJamo.vowel) {\n          if (targetSyllable.structure === 'CVC') {\n            hints.push(`Build \"${targetSyllable.syllable}\" (CVC): Select ${targetSyllable.consonant} (initial) + ${targetSyllable.vowel} + ${targetSyllable.final} (final)`);\n          } else {\n            hints.push(`Build \"${targetSyllable.syllable}\" (CV): Select ${targetSyllable.consonant} + ${targetSyllable.vowel}`);\n          }\n        } else if (selectedJamo.initial && !selectedJamo.vowel) {\n          hints.push(`Now select ${targetSyllable.vowel}${targetSyllable.final ? ' (and optionally ' + targetSyllable.final + ' for final consonant)' : ''}`);\n        } else if (!selectedJamo.initial && selectedJamo.vowel) {\n          hints.push(`Select ${targetSyllable.consonant} as initial consonant`);\n        } else if (selectedJamo.initial && selectedJamo.vowel && !selectedJamo.final) {\n          if (targetSyllable.final) {\n            // Check if we can reuse the same consonant for final position\n            const required = getRequiredJamo();\n            const availableConsonants = required.consonants.filter(c =>\n              c.koreanLetter === targetSyllable.final ||\n              c.koreanLetter === targetSyllable.consonant\n            );\n            if (availableConsonants.length > 0) {\n              hints.push(`Add ${targetSyllable.final} as final consonant (you can reuse ${targetSyllable.consonant} if it's the same letter)`);\n            } else {\n              hints.push(`Add ${targetSyllable.final} as final consonant`);\n            }\n          } else {\n            hints.push(`Click \"Build Syllable\" to create \"${targetSyllable.syllable}\" (CV structure)`);\n          }\n        } else if (selectedJamo.initial && selectedJamo.vowel && selectedJamo.final) {\n          hints.push(`Click \"Build Syllable\" to create \"${targetSyllable.syllable}\" (CVC structure)`);\n        }\n      }\n    }\n\n    if (currentStage === 3) {\n      if (userWord.length < selectedWord.syllables.length) {\n        const nextSyllable = selectedWord.syllables[userWord.length];\n        const availableSyllable = builtSyllables.find(bs => bs.syllable === nextSyllable.syllable);\n        if (availableSyllable) {\n          hints.push(`Drag \"${availableSyllable.syllable}\" to the next empty slot`);\n        } else {\n          hints.push(`Build \"${nextSyllable.syllable}\" first in Stage 2`);\n        }\n      } else {\n        hints.push(`Click \"Check Word\" to verify your word construction`);\n      }\n    }\n\n    return hints;\n  }, [selectedWord, currentStage, selectedJamo, builtSyllables, userWord, getRequiredJamo]);\n\n\n  const showHintForCurrentStage = useCallback(() => {\n    const hints = getHints();\n    if (hints.length > 0) {\n      setCurrentHint(hints[0]);\n      setShowHint(true);\n    }\n  }, [getHints]);\n\n  const handleJamoSelection = useCallback((jamo, type) => {\n    console.log('Jamo selected:', jamo, type);\n\n    setSelectedJamo(prev => {\n      if (type === 'consonant') {\n        // For consonants, allow multiple selections of the same jamo for different positions\n        // Check if this exact jamo is already selected\n        const isAlreadySelected = prev.consonants.some(c => c.id === jamo.id);\n\n        if (isAlreadySelected) {\n          // If already selected, we can still add it again for reuse\n          // This allows the same consonant to be used in multiple positions\n          console.log('Adding another instance of consonant for reuse');\n          return {\n            ...prev,\n            consonants: [...prev.consonants, jamo]\n          };\n        } else {\n          // If not selected, add it\n          console.log('Adding new consonant selection');\n          return {\n            ...prev,\n            consonants: [...prev.consonants, jamo]\n          };\n        }\n      } else if (type === 'vowel') {\n        // For vowels, toggle behavior (usually only need one vowel per syllable)\n        const isAlreadySelected = prev.vowels.some(v => v.id === jamo.id);\n\n        if (isAlreadySelected) {\n          console.log('Toggling vowel selection');\n          return {\n            ...prev,\n            vowels: prev.vowels.filter(v => v.id !== jamo.id)\n          };\n        } else {\n          console.log('Adding vowel selection');\n          return {\n            ...prev,\n            vowels: [...prev.vowels, jamo]\n          };\n        }\n      }\n\n      return prev;\n    });\n  }, []);\n\n  const canBuildSyllable = useCallback(() => {\n    // Need at least 1 consonant and 1 vowel to build a syllable\n    // For CVC syllables, we'll need 2 consonants and 1 vowel\n    const hasConsonant = selectedJamo.consonants.length >= 1;\n    const hasVowel = selectedJamo.vowels.length >= 1;\n\n    return hasConsonant && hasVowel;\n  }, [selectedJamo]);\n\n\n  const buildSyllable = useCallback(() => {\n    if (!canBuildSyllable()) return;\n\n    console.log('Building syllable with:', selectedJamo);\n\n    const initialConsonant = selectedJamo.consonants[0];\n    const vowel = selectedJamo.vowels[0];\n    const finalConsonant = selectedJamo.consonants.length > 1 ? selectedJamo.consonants[1] : null;\n\n    // Create syllable text based on structure\n    let syllableText = initialConsonant.koreanLetter + vowel.koreanLetter;\n    if (finalConsonant) {\n      syllableText += finalConsonant.koreanLetter;\n    }\n\n    console.log('Looking for target syllable with:', {\n      consonant: initialConsonant.koreanLetter,\n      vowel: vowel.koreanLetter,\n      final: finalConsonant ? finalConsonant.koreanLetter : null\n    });\n\n    // Find the matching syllable in the target word to get complete structure\n    const targetSyllable = selectedWord.syllables.find(ts => {\n      const consonantMatch = ts.consonant === initialConsonant.koreanLetter;\n      const vowelMatch = ts.vowel === vowel.koreanLetter;\n      const finalMatch = finalConsonant\n        ? ts.final === finalConsonant.koreanLetter\n        : !ts.final; // No final consonant expected\n\n      console.log('Checking syllable:', ts, { consonantMatch, vowelMatch, finalMatch });\n      return consonantMatch && vowelMatch && finalMatch;\n    });\n\n    console.log('Found target syllable:', targetSyllable);\n\n    const newSyllable = {\n      syllable: targetSyllable ? targetSyllable.syllable : syllableText,\n      consonant: initialConsonant.koreanLetter,\n      vowel: vowel.koreanLetter,\n      final: finalConsonant ? finalConsonant.koreanLetter : (targetSyllable ? targetSyllable.final : null),\n      structure: targetSyllable ? targetSyllable.structure : (finalConsonant ? 'CVC' : 'CV'),\n      completed: true\n    };\n\n    console.log('Created new syllable:', newSyllable);\n\n    setBuiltSyllables(prev => {\n      const updated = [...prev, newSyllable];\n      console.log('Updated builtSyllables:', updated);\n      return updated;\n    });\n\n    // Clear selections after building\n    setSelectedJamo({ consonants: [], vowels: [] });\n  }, [canBuildSyllable, selectedJamo, selectedWord]);\n\n  const handleSyllableDrop = useCallback((syllable) => {\n    console.log('Dropping syllable:', syllable);\n\n    if (!selectedWord) {\n      console.error('selectedWord is undefined');\n      return;\n    }\n\n    if (userWord.length >= selectedWord.syllables.length) {\n      console.log('Word is already complete');\n      return;\n    }\n\n    if (userWord.some(userSyl => userSyl.syllable === syllable.syllable)) {\n      console.log('Syllable already used');\n      return;\n    }\n\n    setUserWord(prev => {\n      const newWord = [...prev, syllable];\n      console.log('New userWord:', newWord);\n      return newWord;\n    });\n  }, [selectedWord, userWord]);\n\n  const removeSyllable = useCallback((index) => {\n    console.log('Removing syllable at index:', index);\n    setUserWord(prev => {\n      const newWord = prev.filter((_, i) => i !== index);\n      console.log('New userWord after removal:', newWord);\n      return newWord;\n    });\n  }, []);\n\n  const checkStageCompletion = useCallback(() => {\n    console.log('Checking stage completion:', { currentStage, userWord, selectedWord });\n\n    if (currentStage === 1) {\n      // For Stage 1, we need to check if all required jamo have been collected\n      // But since we're now using the old array-based structure for Stage 1,\n      // we need to maintain backward compatibility\n      const required = getRequiredJamo();\n      console.log('Stage 1 validation:', { required, selectedJamo });\n\n      // Check if all required consonants are in the collected jamo\n      const hasAllConsonants = required.consonants.every(reqC =>\n        selectedJamo.consonants?.some(selC => selC.id === reqC.id)\n      );\n\n      // Check if all required vowels are in the collected jamo\n      const hasAllVowels = required.vowels.every(reqV =>\n        selectedJamo.vowels?.some(selV => selV.id === reqV.id)\n      );\n\n      console.log('Stage 1 completion check:', { hasAllConsonants, hasAllVowels });\n      return hasAllConsonants && hasAllVowels;\n    }\n\n    if (currentStage === 2) {\n      return builtSyllables.length === selectedWord.syllables.length &&\n             builtSyllables.every(bs => bs.completed);\n    }\n\n    if (currentStage === 3) {\n      console.log('Stage 3 validation:', { userWord, selectedWord });\n\n      if (!selectedWord || !selectedWord.syllables) {\n        console.error('selectedWord or syllables is undefined');\n        return false;\n      }\n\n      if (userWord.length !== selectedWord.syllables.length) {\n        console.log('User word length mismatch:', userWord.length, selectedWord.syllables.length);\n        return false;\n      }\n\n      // Check each syllable with proper error handling\n      for (let index = 0; index < userWord.length; index++) {\n        const userSyl = userWord[index];\n        const targetSyllable = selectedWord.syllables[index];\n\n        console.log(`Checking index ${index}:`, { userSyl, targetSyllable });\n\n        if (!userSyl) {\n          console.error('userSyl is undefined at index:', index);\n          return false;\n        }\n\n        if (!targetSyllable) {\n          console.error('targetSyllable is undefined at index:', index);\n          return false;\n        }\n\n        if (!userSyl.syllable || !targetSyllable.syllable) {\n          console.error('Syllable text is undefined:', { userSyl, targetSyllable });\n          return false;\n        }\n\n        const isCorrect = userSyl.syllable === targetSyllable.syllable;\n        console.log(`Comparing: \"${userSyl.syllable}\" vs \"${targetSyllable.syllable}\" = ${isCorrect}`);\n\n        if (!isCorrect) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }, [currentStage, selectedJamo, builtSyllables, userWord, selectedWord, getRequiredJamo]);\n\n  const advanceToNextStage = useCallback(() => {\n    if (currentStage < 3) {\n      setCurrentStage(prev => prev + 1);\n      setShowHint(false);\n    }\n  }, [currentStage]);\n\n  const resetExercise = useCallback(() => {\n    setCurrentStage(1);\n    setSelectedJamo({ consonants: [], vowels: [] });\n    setBuiltSyllables([]);\n    setUserWord([]);\n    setShowHint(false);\n  }, []);\n\n  const getJamoButtonClass = (jamo, type) => {\n    let isSelected = false;\n\n    if (type === 'consonant') {\n      isSelected = selectedJamo.consonants.some(c => c.id === jamo.id);\n    } else if (type === 'vowel') {\n      isSelected = selectedJamo.vowels.some(v => v.id === jamo.id);\n    }\n\n    return `jamo-btn ${isSelected ? 'selected' : 'available'}`;\n  };\n\n  const getSyllableButtonClass = (syllable) => {\n    const isUsed = userWord.some(userSyl => userSyl.syllable === syllable.syllable);\n    return `syllable-btn ${isUsed ? 'used' : 'available'}`;\n  };\n\n\n  if (!selectedWord) {\n    return (\n      <div className=\"word-builder-section\">\n        <div className=\"section-header\">\n          <h2>Progressive Word Builder</h2>\n          <p>Learn Korean writing step by step: from individual letters to complete words.</p>\n        </div>\n\n        <div className=\"word-selection\">\n          <h3>Select a word to build:</h3>\n          <div className=\"word-cards\">\n            {exampleWords.map(word => (\n              <button\n                key={word.id}\n                className=\"word-card\"\n                onClick={() => selectWord(word)}\n              >\n                <div className=\"word-korean\">{word.korean}</div>\n                <div className=\"word-romanization\">{word.romanization}</div>\n                <div className=\"word-english\">\"{word.english}\"</div>\n                <div className=\"syllable-count\">{word.syllables.length} syllables</div>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"word-builder-section\">\n      <div className=\"section-header\">\n        <div className=\"exercise-header\">\n          <button className=\"back-btn\" onClick={() => setSelectedWord(null)}>\n            ← Back to Word Selection\n          </button>\n          <h2>Build: {selectedWord.english}</h2>\n          <div className=\"word-info\">\n            <span className=\"target-word\">{selectedWord.korean}</span>\n            <span className=\"romanization\">({selectedWord.romanization})</span>\n          </div>\n        </div>\n\n        {/* Progress indicator */}\n        <div className=\"stage-progress\">\n          <div className={`stage ${currentStage === 1 ? 'active' : ''} ${currentStage > 1 ? 'completed' : ''}`}>\n            <span className=\"stage-number\">1</span>\n            <span className=\"stage-label\">Jamo</span>\n          </div>\n          <div className={`stage ${currentStage === 2 ? 'active' : ''} ${currentStage > 2 ? 'completed' : ''}`}>\n            <span className=\"stage-number\">2</span>\n            <span className=\"stage-label\">Syllables</span>\n          </div>\n          <div className={`stage ${currentStage === 3 ? 'active' : ''}`}>\n            <span className=\"stage-number\">3</span>\n            <span className=\"stage-label\">Word</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"word-builder-container\">\n        {/* Stage 1: Jamo Selection */}\n        {currentStage === 1 && (\n          <div className=\"stage-container\">\n            <div className=\"stage-header\">\n              <h3>Stage 1: Select Required Letters (Jamo)</h3>\n              <p>Choose all the consonants and vowels needed to build this word.</p>\n            </div>\n\n            <div className=\"jamo-selection\">\n              <div className=\"jamo-section\">\n                <h4>Required Consonants:</h4>\n                <div className=\"jamo-grid\">\n                  {getRequiredJamo().consonants.map(consonant => (\n                    <div\n                      key={consonant.id}\n                      className={getJamoButtonClass(consonant, 'consonant')}\n                      onClick={() => handleJamoSelection(consonant, 'consonant')}\n                    >\n                      <span className=\"jamo-letter\">{consonant.koreanLetter}</span>\n                      <span className=\"jamo-name\">{consonant.name}</span>\n                      <span className=\"jamo-sound\">({consonant.romanization})</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"jamo-section\">\n                <h4>Required Vowels:</h4>\n                <div className=\"jamo-grid\">\n                  {getRequiredJamo().vowels.map(vowel => (\n                    <div\n                      key={vowel.id}\n                      className={getJamoButtonClass(vowel, 'vowel')}\n                      onClick={() => handleJamoSelection(vowel, 'vowel')}\n                    >\n                      <span className=\"jamo-letter\">{vowel.koreanLetter}</span>\n                      <span className=\"jamo-name\">{vowel.name}</span>\n                      <span className=\"jamo-sound\">({vowel.romanization})</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"stage-controls\">\n              <button\n                className=\"hint-btn\"\n                onClick={showHintForCurrentStage}\n                disabled={stageHints.length === 0}\n              >\n                💡 Show Hint\n              </button>\n              {showHint && <div className=\"hint-text\">{currentHint}</div>}\n            </div>\n\n            <div className=\"stage-navigation\">\n              <button\n                className=\"next-stage-btn\"\n                onClick={advanceToNextStage}\n                disabled={!checkStageCompletion()}\n              >\n                Next: Build Syllables →\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Stage 2: Syllable Building */}\n        {currentStage === 2 && (\n          <div className=\"stage-container\">\n            <div className=\"stage-header\">\n              <h3>Stage 2: Build Syllable Blocks</h3>\n              <p>Combine consonants and vowels to create syllable blocks. Build them one at a time.</p>\n            </div>\n\n            <div className=\"syllable-building\">\n              {/* Available Jamo Pool for Syllable Building */}\n              <div className=\"jamo-pool-stage2\">\n                <h4>Available Letters:</h4>\n                <p>Select consonants and vowels to build the next syllable. You can reuse consonants for different positions.</p>\n                <div className=\"jamo-pool-grid\">\n                  {getRequiredJamo().consonants.map(consonant => {\n                    const selectedCount = selectedJamo.consonants.filter(c => c.id === consonant.id).length;\n                    const maxNeeded = 2; // Can be used as both initial and final\n\n                    return (\n                      <button\n                        key={`${consonant.id}-${consonant.koreanLetter}`}\n                        className={`jamo-btn ${selectedCount > 0 ? 'selected' : 'available'}`}\n                        onClick={() => handleJamoSelection(consonant, 'consonant')}\n                      >\n                        <span className=\"jamo-letter\">{consonant.koreanLetter}</span>\n                        <span className=\"jamo-name\">{consonant.name}</span>\n                        {selectedCount > 0 && (\n                          <span className=\"usage-count\">({selectedCount}/{maxNeeded})</span>\n                        )}\n                      </button>\n                    );\n                  })}\n                  {getRequiredJamo().vowels.map(vowel => (\n                    <button\n                      key={vowel.id}\n                      className={getJamoButtonClass(vowel, 'vowel')}\n                      onClick={() => handleJamoSelection(vowel, 'vowel')}\n                    >\n                      <span className=\"jamo-letter\">{vowel.koreanLetter}</span>\n                      <span className=\"jamo-name\">{vowel.name}</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"jamo-workspace\">\n                <h4>Selected for Current Syllable:</h4>\n                <div className=\"selected-jamo\">\n                  {selectedJamo.consonants.map((c, index) => {\n                    const position = index === 0 ? 'initial' : 'final';\n                    const positionKorean = position === 'initial' ? '초성' : '종성';\n                    return (\n                      <span key={`${c.id}-${index}-${position}`} className={`selected-jamo-item ${position === 'initial' ? 'consonant' : 'final-consonant'}`}>\n                        {c.koreanLetter} ({c.name}) - {positionKorean}\n                      </span>\n                    );\n                  })}\n                  {selectedJamo.vowels.map(v => (\n                    <span key={v.id} className=\"selected-jamo-item vowel\">\n                      {v.koreanLetter} ({v.name}) - Vowel\n                    </span>\n                  ))}\n                </div>\n\n                <div className=\"selection-summary\">\n                  {selectedJamo.consonants.length > 0 && selectedJamo.vowels.length > 0 && (\n                    <div className=\"structure-info\">\n                      {selectedJamo.consonants.length === 1 && selectedJamo.vowels.length === 1 && (\n                        <span className=\"structure-badge cv\">CV Structure</span>\n                      )}\n                      {selectedJamo.consonants.length === 2 && selectedJamo.vowels.length === 1 && (\n                        <span className=\"structure-badge cvc\">CVC Structure</span>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"syllable-preview\">\n                  {selectedJamo.consonants.length > 0 && selectedJamo.vowels.length > 0 && (\n                    <div className=\"preview-syllable\">\n                      <span className=\"preview-text\">\n                        Preview: {selectedJamo.consonants[0].koreanLetter + selectedJamo.vowels[0].koreanLetter}\n                        {selectedJamo.consonants.length > 1 && selectedJamo.consonants[1].koreanLetter}\n                      </span>\n                      <span className=\"preview-structure\">\n                        ({selectedJamo.consonants.length > 1 ? 'CVC' : 'CV'})\n                      </span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"workspace-buttons\">\n                  <button\n                    className=\"build-syllable-btn\"\n                    onClick={() => {\n                      console.log('Build Syllable clicked');\n                      console.log('Selected Jamo:', selectedJamo);\n                      console.log('Can build:', canBuildSyllable());\n                      buildSyllable();\n                    }}\n                    disabled={!canBuildSyllable()}\n                  >\n                    {canBuildSyllable()\n                      ? `Build Syllable (${selectedJamo.consonants.length > 1 ? 'CVC' : 'CV'}) →`\n                      : 'Select 1 consonant + 1 vowel (+ optional final consonant)'\n                    }\n                  </button>\n\n                  <button\n                    className=\"clear-selection-btn\"\n                    onClick={() => setSelectedJamo({ consonants: [], vowels: [] })}\n                  >\n                    Clear Selection\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"built-syllables\">\n                <h4>Built Syllables ({builtSyllables.length}/{selectedWord.syllables.length}):</h4>\n                <div className=\"syllables-display\">\n                  {builtSyllables.map((syllable, index) => (\n                    <div key={index} className=\"built-syllable\">\n                      <span className=\"syllable-text\">{syllable.syllable}</span>\n                      <div className=\"syllable-components\">\n                        {syllable.consonant} + {syllable.vowel}\n                        {syllable.final && ` + ${syllable.final}`}\n                      </div>\n                      <div className=\"syllable-structure\">{syllable.structure}</div>\n                    </div>\n                  ))}\n                </div>\n\n                {builtSyllables.length < selectedWord.syllables.length && (\n                  <div className=\"next-syllable-hint\">\n                    Next: Build \"{selectedWord.syllables[builtSyllables.length].syllable}\"\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"stage-controls\">\n              <button className=\"hint-btn\" onClick={showHintForCurrentStage}>\n                💡 Show Hint\n              </button>\n              {showHint && <div className=\"hint-text\">{currentHint}</div>}\n            </div>\n\n            <div className=\"stage-navigation\">\n              <button className=\"prev-stage-btn\" onClick={() => setCurrentStage(1)}>\n                ← Back to Jamo\n              </button>\n              <button\n                className=\"next-stage-btn\"\n                onClick={advanceToNextStage}\n                disabled={!checkStageCompletion()}\n              >\n                Next: Build Word →\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Stage 3: Word Building */}\n        {currentStage === 3 && (\n          <div className=\"stage-container\">\n            <div className=\"stage-header\">\n              <h3>Stage 3: Build the Complete Word</h3>\n              <p>Arrange the syllable blocks to form the complete word.</p>\n            </div>\n\n            <div className=\"word-building\">\n              <div className=\"target-word-area\">\n                <h4>Word Structure:</h4>\n                <div className=\"word-slots\">\n                  {selectedWord.syllables.map((targetSyllable, index) => {\n                    console.log(`Rendering word slot ${index}:`, { targetSyllable, userSyllable: userWord[index] });\n\n                    if (!targetSyllable) {\n                      console.error('targetSyllable is undefined at index:', index);\n                      return null;\n                    }\n\n                    const isCorrect = userWord[index] && userWord[index].syllable === targetSyllable.syllable;\n                    return (\n                      <div key={index} className={`word-slot ${isCorrect ? 'correct' : ''}`}>\n                        {userWord[index] ? (\n                          <div className={`syllable-in-word ${isCorrect ? 'correct' : ''}`}>\n                            <span className=\"syllable-text\">{userWord[index].syllable}</span>\n                            <button\n                              className=\"remove-syllable\"\n                              onClick={() => removeSyllable(index)}\n                            >\n                              ×\n                            </button>\n                          </div>\n                        ) : (\n                          <div className=\"empty-word-slot\">\n                            Drop syllable here\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n                {userWord.length > 0 && (\n                  <div className=\"current-word\">\n                    Current: <span className=\"current-word-display\">\n                      {userWord.map(s => s.syllable).join('')}\n                    </span>\n                  </div>\n                )}\n\n                {checkStageCompletion() && currentStage === 3 && (\n                  <div className=\"success-message\">\n                    🎉 Congratulations! You successfully built \"{selectedWord.korean}\" ({selectedWord.english})!\n                  </div>\n                )}\n              </div>\n\n              <div className=\"available-syllables\">\n                <h4>Available Syllables:</h4>\n                <div className=\"syllables-pool\">\n                  {builtSyllables.map((syllable, index) => (\n                    <div\n                      key={index}\n                      className={getSyllableButtonClass(syllable)}\n                      draggable={!userWord.some(userSyl => userSyl.syllable === syllable.syllable)}\n                      onDragStart={(e) => {\n                        e.dataTransfer.setData('text/plain', syllable.syllable);\n                      }}\n                      onClick={() => handleSyllableDrop(syllable)}\n                    >\n                      <span className=\"syllable-display\">{syllable.syllable}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"stage-controls\">\n              <button className=\"hint-btn\" onClick={showHintForCurrentStage}>\n                💡 Show Hint\n              </button>\n              {showHint && <div className=\"hint-text\">{currentHint}</div>}\n            </div>\n\n            <div className=\"stage-navigation\">\n              <button className=\"prev-stage-btn\" onClick={() => setCurrentStage(2)}>\n                ← Back to Syllables\n              </button>\n              <button className=\"check-word-btn\" onClick={() => {\n                try {\n                  console.log('Check Word button clicked');\n                  console.log('userWord:', userWord);\n                  console.log('selectedWord:', selectedWord);\n\n                  if (checkStageCompletion()) {\n                    setShowHint(false);\n                    setCurrentHint(`Perfect! You successfully built \"${selectedWord.korean}\" (${selectedWord.english})!`);\n                    setShowHint(true);\n                  } else {\n                    // Find the first incorrect syllable\n                    let errorMessage = 'Check your syllable placement and try again.';\n                    if (userWord.length > 0 && selectedWord && selectedWord.syllables) {\n                      const firstIncorrect = userWord.findIndex((userSyl, index) => {\n                        if (!userSyl || !selectedWord.syllables[index]) return true;\n                        return userSyl.syllable !== selectedWord.syllables[index].syllable;\n                      });\n\n                      if (firstIncorrect >= 0) {\n                        errorMessage = `Check position ${firstIncorrect + 1}. Make sure \"${selectedWord.syllables[firstIncorrect].syllable}\" is in the correct place.`;\n                      }\n                    }\n\n                    setShowHint(false);\n                    setCurrentHint(errorMessage);\n                    setShowHint(true);\n                  }\n                } catch (error) {\n                  console.error('Error in Check Word:', error);\n                  setShowHint(false);\n                  setCurrentHint('An error occurred. Please try again or refresh the page.');\n                  setShowHint(true);\n                }\n              }}>\n                Check Word\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Overall Controls */}\n        <div className=\"exercise-controls\">\n          <button className=\"reset-btn\" onClick={resetExercise}>\n            Start Over\n          </button>\n          <button className=\"new-word-btn\" onClick={() => setSelectedWord(null)}>\n            Try Another Word\n          </button>\n        </div>\n\n        {/* Hints */}\n        {showHint && (\n          <div className=\"hint-section\">\n            <div className=\"hint-content\">\n              <span className=\"hint-icon\">💡</span>\n              <span className=\"hint-text\">{currentHint}</span>\n              <button className=\"close-hint\" onClick={() => setShowHint(false)}>×</button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WordBuilderSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}